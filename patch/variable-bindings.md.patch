diff --git a/rust/master:src/doc/trpl/variable-bindings.md b/master:variable-bindings.md
index 88babd8..5efaebe 100644
--- a/rust/master:src/doc/trpl/variable-bindings.md
+++ b/master:variable-bindings.md
@@ -1,71 +1,53 @@
-% Variable Bindings
+% Связывание переменных
 
-The first thing we'll learn about are *variable bindings*. They look like this:
+Для начала рассмотрим тему о *связывании переменных*. Это выглядит так:
 
-```{rust}
+```rust
 fn main() {
     let x = 5;
 }
 ```
 
-Putting `fn main() {` in each example is a bit tedious, so we'll leave that out
-in the future. If you're following along, make sure to edit your `main()`
-function, rather than leaving it off. Otherwise, you'll get an error.
+> Все операции производимые ниже будут происходть в функции `main()`, так как каждый раз вставлять в примеры `fn main() {` немного утомляет. Убедитесь что примеры приведенные в этом разделе вводите в функции `main()`, иначе вы можете получить ошибку при компилировании.
 
-In many languages, this is called a *variable*. But Rust's variable bindings
-have a few tricks up their sleeves. Rust has a very powerful feature called
-*pattern matching* that we'll get into detail with later, but the left
-hand side of a `let` expression is a full pattern, not just a variable name.
-This means we can do things like:
+Во многих языках программирования это называется *переменная*. Но связывание переменных в Rust имеет пару трюков в рукаве. Rust имеет мощную особенность называемую *шаблоном*, который мы рассмотрим позже более детально, с левой стороны выражение `let` это полный шаблон, а не просто имя переменной. Это значит что мы можем делать вещи вроде этой:
 
-```{rust}
+```rust
 let (x, y) = (1, 2);
 ```
 
-After this expression is evaluated, `x` will be one, and `y` will be two.
-Patterns are really powerful, but this is about all we can do with them so far.
-So let's just keep this in the back of our minds as we go forward.
+После завершения этого выражения `x` будет единицей, a `y` двойкой. Шаблоны очень мощны, но пока это все, что мы можем с ними сделать. Мы их рассмотрим в отдельной теме.
 
-Rust is a statically typed language, which means that we specify our types up
-front. So why does our first example compile? Well, Rust has this thing called
-*type inference*. If it can figure out what the type of something is, Rust
-doesn't require you to actually type it out.
+Rust статически типизированный язык программирования, что означает, что мы сперва мы должны указать наш тип. Так почему же наш первый пример скомпилировался? В Rust'е есть такая вещь, как *определение типа*. Если Rust может понять какой тип у чего-либо, то он не требует указывать его.
 
-We can add the type if we want to, though. Types come after a colon (`:`):
+Тем не менее, мы можем указать желаемый тип. Он следует после двоеточия (`:`):
 
-```{rust}
+```rust
 let x: i32 = 5;
 ```
 
-If I asked you to read this out loud to the rest of the class, you'd say "`x`
-is a binding with the type `i32` and the value `five`."
+Если бы я попросил вас прочитать это вслух, то вы бы сказали "`x` связан с типом `int` и имеет значение `пять`"
 
-In this case we chose to represent `x` as a 32-bit signed integer. Rust has
-many different primitive integer types. They begin with `i` for signed integers
-and `u` for unsigned integers. The possible integer sizes are 8, 16, 32, and 64
-bits.
+В этом случае мы указали что `x` у нас будет 32-битным целым числом со знаком. Есть ещё и другие целочисленные типы. Они начинаются с `i` для целых чисел со знаком и `u` для целых чисел без знака. Возможный размер чисел может быть 8, 16, 32 и 64 бита.
 
-In future examples, we may annotate the type in a comment. The examples will
-look like this:
+Далее в примерах этого руководства, мы будем указывать тип в комментарии. Это будет выглядеть вот так:
 
-```{rust}
+```rust
 fn main() {
     let x = 5; // x: i32
 }
 ```
 
-Note the similarities between this annotation and the syntax you use with `let`.
-Including these kinds of comments is not idiomatic Rust, but we'll occasionally
-include them to help you understand what the types that Rust infers are.
+Добавлять эти комментарии вам не обязательно. Мы указываем их для того, чтобы помочь вам понять с каким типом Rust связывает переменную.
 
-By default, bindings are *immutable*. This code will not compile:
+По-умолчанию, связывание *неизменяемо*. Этот код не скомпилируется:
 
-```{ignore}
+```rust
 let x = 5;
 x = 10;
 ```
 
-It will give you this error:
+И вы получите ошибку:
 
 ```text
 error: re-assignment of immutable variable `x`
@@ -73,32 +55,22 @@ error: re-assignment of immutable variable `x`
      ^~~~~~~
 ```
 
-If you want a binding to be mutable, you can use `mut`:
+Если вы хотите что бы связывание было изменяемым, вы можете использовать `mut`:
 
-```{rust}
+```rust
 let mut x = 5; // mut x: i32
 x = 10;
 ```
 
-There is no single reason that bindings are immutable by default, but we can
-think about it through one of Rust's primary focuses: safety. If you forget to
-say `mut`, the compiler will catch it, and let you know that you have mutated
-something you may not have intended to mutate. If bindings were mutable by
-default, the compiler would not be able to tell you this. If you _did_ intend
-mutation, then the solution is quite easy: add `mut`.
+Может показаться, что нет ни одной причины делать связывание неизменяемым по-умолчанию, но вспомните, на чем в первую очередь сфокусирован Rust: на безопасности. Если вы случайно забыли указать `mut`, компилятор поймет это, и вы узнаете, что изменили то, что возможно не собирались менять. Если бы связывание по-умолчанию было бы изменяемым, в такой ситуации компилятор не смог бы вам помочь. Если вы намерены сделать изменение, решение очень простое: добавьте `mut`.
 
-There are other good reasons to avoid mutable state when possible, but they're
-out of the scope of this guide. In general, you can often avoid explicit
-mutation, and so it is preferable in Rust. That said, sometimes, mutation is
-what you need, so it's not verboten.
+Есть и другие весомые аргументы, по-возможности, избегать изменяемых состояний, но они выходят за рамки этого руководства. В общем, зачастую вы можете избежать явных изменений, поэтому это предпочтительнее в Rust. Тем не менее, иногда изменение это то, что вам нужно, так что это не запрещено.
 
-Let's get back to bindings. Rust variable bindings have one more aspect that
-differs from other languages: bindings are required to be initialized with a
-value before you're allowed to use them.
+Вернемся к связыванию. При связывании переменных в Rust есть еще одно отличие от других языков: связывание требует инициализации перед использованием.
 
-Let's try it out. Change your `src/main.rs` file to look like this:
+Давайте приступим к рассмотрению вышесказаного. Измените ваш файл `src/main.rs` так, что бы он выглядел следующим образом:
 
-```{rust}
+```rust
 fn main() {
     let x: i32;
 
@@ -106,8 +78,7 @@ fn main() {
 }
 ```
 
-You can use `cargo build` on the command line to build it. You'll get a warning,
-but it will still print "Hello, world!":
+Используйте команду `cargo build` в командной строке чтобы собрать проект. Вы должны получить предупреждение, но программа будет работать и выводить строку "Hello, world!":
 
 ```text
    Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)
@@ -116,11 +87,9 @@ src/main.rs:2     let x: i32;
                       ^
 ```
 
-Rust warns us that we never use the variable binding, but since we never use it,
-no harm, no foul. Things change if we try to actually use this `x`, however. Let's
-do that. Change your program to look like this:
+Rust предупредит нас о том, что мы никогда не используем связанную переменную, но, так как мы не используем ее, никакого вреда и нарушения в этом нет. Однако, все изменится если мы попробуем использовать `x`. Сделаем это. Измените вашу программу так, что бы она выглядела следующим образом:
 
-```{rust,ignore}
+```rust
 fn main() {
     let x: i32;
 
@@ -128,9 +97,9 @@ fn main() {
 }
 ```
 
-And try to build it. You'll get an error:
+И попробуйте собрать проект. Вы получите ошибку:
 
-```{bash}
+```bash
 $ cargo build
    Compiling hello_world v0.0.1 (file:///home/you/projects/hello_world)
 src/main.rs:4:39: 4:40 error: use of possibly uninitialized variable: `x`
@@ -144,18 +113,8 @@ error: aborting due to previous error
 Could not compile `hello_world`.
 ```
 
-Rust will not let us use a value that has not been initialized. Next, let's
-talk about this stuff we've added to `println!`.
-
-If you include two curly braces (`{}`, some call them moustaches...) in your
-string to print, Rust will interpret this as a request to interpolate some sort
-of value. *String interpolation* is a computer science term that means "stick
-in the middle of a string." We add a comma, and then `x`, to indicate that we
-want `x` to be the value we're interpolating. The comma is used to separate
-arguments we pass to functions and macros, if you're passing more than one.
-
-When you just use the curly braces, Rust will attempt to display the
-value in a meaningful way by checking out its type. If you want to specify the
-format in a more detailed manner, there are a [wide number of options
-available](../std/fmt/index.html). For now, we'll just stick to the default:
-integers aren't very complicated to print.
+Rust не позволит нам использовать неинициализированную переменную. Далее, поговорим о том, что мы добавили в `println!`.
+
+Если вы добавите две фигурные скобки (`{}`, иногда называемые "усами"...) в вашу печатаемую строку, Rust истолкует это как просьбу своего рода вставки значения. *Строковая вставка* это термин в информатике, который обозначает "вставить посреди строки". Мы добавили запятую, и затем `x`, что бы указать, что мы хотим вставить `x` в строку. Запятая используется для разделения параметров передаваемых нами в функции и макросы, если вы передаёте больше одного.
+
+Когда вы используете фигурные скобки, Rust попытается отобразить значение осмысленно, проверяя его тип. Если вы хотите указать формат более детально, тут есть [большое количество доступных параметров](http://doc.rust-lang.org/std/fmt/index.html). На данный момент мы будем вставлять как есть: целые числа не очень сложны для печати.
\ No newline at end of file
