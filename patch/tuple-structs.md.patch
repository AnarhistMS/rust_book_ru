diff --git a/rust/master:src/doc/trpl/tuple-structs.md b/HEAD:tuple-structs.md
index 8fba658..083a936 100644
--- a/rust/master:src/doc/trpl/tuple-structs.md
+++ b/HEAD:tuple-structs.md
@@ -1,56 +1,60 @@
-% Tuple Structs
+% Кортежные структуры
+
+В Rust есть ещё один тип данных, который представляет собой нечто среднее между
+кортежем и структурой. Он называется *кортежной структурой*. Кортежные структуры
+именуются, а вот у их полей имён нет:
 
-Rust has another data type that's like a hybrid between a tuple and a struct,
-called a *tuple struct*. Tuple structs do have a name, but their fields don't:
 
 ```{rust}
 struct Color(i32, i32, i32);
 struct Point(i32, i32, i32);
 ```
 
-These two will not be equal, even if they have the same values:
+Эти два объекта различны, несмотря на то, что у них одинаковые значения:
 
 ```{rust}
 # struct Color(i32, i32, i32);
 # struct Point(i32, i32, i32);
 let black = Color(0, 0, 0);
 let origin = Point(0, 0, 0);
 ```
 
-It is almost always better to use a struct than a tuple struct. We would write
-`Color` and `Point` like this instead:
+Почти всегда, вместо кортежной структуры лучше использовать обычную структуру.
+Мы бы скорее объявили типы `Color` и `Point` вот так:
 
 ```{rust}
 struct Color {
     red: i32,
     blue: i32,
     green: i32,
 }
 
 struct Point {
     x: i32,
     y: i32,
     z: i32,
 }
 ```
 
-Now, we have actual names, rather than positions. Good names are important,
-and with a struct, we have actual names.
+Теперь у нас есть настоящие имена, а не только позиции. Хорошие имена важны, и
+при использовании структуры у нас есть эти имена.
 
-There _is_ one case when a tuple struct is very useful, though, and that's a
-tuple struct with only one element. We call this the *newtype* pattern, because
-it allows you to create a new type, distinct from that of its contained value
-and expressing its own semantic meaning:
+Однако, _есть_ один случай, когда кортежные структуры очень полезны. Это
+кортежная структура с всего одним элементом. Такое использование называется
+*новым типом*, потому что оно позволяет создать новый тип, отличный от типа
+значения, содержащегося в кортежной структуре. При этом новый тип обозначает
+что-то другое:
 
 ```{rust}
 struct Inches(i32);
 
 let length = Inches(10);
 
 let Inches(integer_length) = length;
-println!("length is {} inches", integer_length);
+println!("Длина в дюймах: {}", integer_length);
 ```
 
-As you can see here, you can extract the inner integer type through a
-destructuring `let`, as we discussed previously in 'tuples.' In this case, the
-`let Inches(integer_length)` assigns `10` to `integer_length`.
+Как вы можете видеть в данном примере, извлечь вложенный целый тип можно с
+помощью деконструирующего `let`. Мы обсуждали это выше, в разделе "кортежи". В
+данном случае, оператор `let Inches(integer_length)` присваивает `10` имени
+`integer_length`.
