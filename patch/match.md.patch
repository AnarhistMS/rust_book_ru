diff --git a/rust/master:src/doc/trpl/match.md b/HEAD:match.md
index 2c0c8ea..259afd0 100644
--- a/rust/master:src/doc/trpl/match.md
+++ b/HEAD:match.md
@@ -1,63 +1,65 @@
-% Match
+% Конструкция `match` (Сопоставление с шаблоном)
 
-Often, a simple [`if`][if]/`else` isn’t enough, because you have more than two
-possible options. Also, conditions can get quite complex. Rust
-has a keyword, `match`, that allows you to replace complicated `if`/`else`
-groupings with something more powerful. Check it out:
+Простого `if`/`else` часто недостаточно, потому что нужно проверить больше, чем
+два возможных варианта. Да и к тому же условия в `else` часто становятся очень
+сложными. Как же решить эту проблему?
+
+В Rust есть ключевое слово `match`, позволяющее заменить группы операторов
+`if`/`else` чем-то более удобным. Смотрите:
 
 ```rust
 let x = 5;
 
 match x {
-    1 => println!("one"),
-    2 => println!("two"),
-    3 => println!("three"),
-    4 => println!("four"),
-    5 => println!("five"),
-    _ => println!("something else"),
+    1 => println!("один"),
+    2 => println!("два"),
+    3 => println!("три"),
+    4 => println!("четыре"),
+    5 => println!("пять"),
+    _ => println!("что-то ещё"),
 }
 ```
 
-[if]: if.html
-
-`match` takes an expression and then branches based on its value. Each ‘arm’ of
-the branch is of the form `val => expression`. When the value matches, that arm’s
-expression will be evaluated. It’s called `match` because of the term ‘pattern
-matching’, which `match` is an implementation of. There’s an [entire section on
-patterns][patterns] that covers all the patterns that are possible here.
+`match` принимает выражение и выбирает одну из ветвей исполнения согласно его
+значению. Каждая *ветвь* имеет форму `значение => выражение`. Выражение ветви
+вычисляется, когда значение данной ветви совпадает со значением, принятым
+оператором `match` (в данном случае, `x`). Эта конструкция называется `match`
+(сопоставление), потому что она выполняет сопоставление значения неким
+"шаблонам". Раздел [Шаблоны][patterns], идущий далее, охватывает все варианты,
+которые были затронуты здесь.
 
 [patterns]: patterns.html
 
-So what’s the big advantage? Well, there are a few. First of all, `match`
-enforces ‘exhaustiveness checking’. Do you see that last arm, the one with the
-underscore (`_`)? If we remove that arm, Rust will give us an error:
+Так в чём же преимущества данной конструкции? Их несколько. Во-первых, ветви
+`match` *проверяются на полноту*. Видите последнюю ветвь, со знаком
+подчёркивания (`_`)? Если мы удалим её, Rust выдаст ошибку:
 
 ```text
 error: non-exhaustive patterns: `_` not covered
 ```
 
-In other words, Rust is trying to tell us we forgot a value. Because `x` is an
-integer, Rust knows that it can have a number of different values – for
-example, `6`. Without the `_`, however, there is no arm that could match, and
-so Rust refuses to compile the code. `_` acts like a ‘catch-all arm’. If none
-of the other arms match, the arm with `_` will, and since we have this
-catch-all arm, we now have an arm for every possible value of `x`, and so our
-program will compile successfully.
+Другими словами, компилятор сообщает нам, что мы забыли сопоставить какие-то
+значения. Поскольку `x` - это целое число, оно может принимать разные значения -
+например, `6`. Однако, если мы убираем ветвь `_`, ни одна ветвь не совпадёт,
+поэтому такой код не скомпилируется. `_` - это ‘совпадение с любым значением‘.
+Если ни одна другая ветвь не совпала, совпадёт ветвь с `_`. Поскольку в примере
+выше есть ветвь с `_`, мы покрываем всё множество значений `x`, и наша программа
+скомпилируется.
 
-`match` is also an expression, which means we can use it on the right-hand
-side of a `let` binding or directly where an expression is used:
+`match` также является выражением. Это значит, что мы можем использовать его в
+правой части оператора `let` или непосредственно как выражение:
 
 ```rust
 let x = 5;
 
 let numer = match x {
     1 => "one",
     2 => "two",
     3 => "three",
     4 => "four",
     5 => "five",
     _ => "something else",
 };
 ```
 
-Sometimes it’s a nice way of converting something from one type to another.
+Иногда это очень удобный вариант преобразования.
