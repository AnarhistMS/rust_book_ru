diff --git a/rust/master:./src/doc/trpl/vectors.md b/HEAD:./syntax-and-semantics/vectors.md
index d8b894a..4c71f33 100644
--- a/rust/master:./src/doc/trpl/vectors.md
+++ b/HEAD:./syntax-and-semantics/vectors.md
@@ -1,60 +1,38 @@
-% Vectors
+% Вектора
 
-A ‘vector’ is a dynamic or ‘growable’ array, implemented as the standard
-library type [`Vec<T>`][vec]. The `T` means that we can have vectors
-of any type (see the chapter on [generics][generic] for more).
-Vectors always allocate their data on the heap.
-You can create them with the `vec!` macro:
+*Вектор* - это динамический, "растущий" массив, реализованный в виде
+стандартного библиотечного типа [`Vec<T>`](../std/vec/) (где `<T>` является
+[дженериком](./generics.md)). Вектора всегда размещает данные в куче. Вектора и
+[срезы][slices] - это как [`String`][string] и `&str`. Вы можете создавать их с
+помощью макроса `vec!`:
 
-```rust
-let v = vec![1, 2, 3, 4, 5]; // v: Vec<i32>
+```{rust}
+let v = vec![1, 2, 3]; // v: Vec<i32>
 ```
 
-(Notice that unlike the `println!` macro we’ve used in the past, we use square
-brackets `[]` with `vec!` macro. Rust allows you to use either in either situation,
-this is just convention.)
+[slices]: primitive-types.html#slices
+[string]: strings.html
 
-There’s an alternate form of `vec!` for repeating an initial value:
+(Заметьте, что, в отличие от макроса `println!`, который мы использовали ранее,
+с `vec!` используются квадратные скобки `[]`. Rust разрешает использование и
+круглых, и квадратных скобок в обеих ситуациях - это просто стилистическое
+соглашение.)
 
-```rust
+Для создания вектора из повторяющихся значений есть другая форма `vec!`:
+
+```
 let v = vec![0; 10]; // ten zeroes
 ```
 
-## Accessing elements
+Вы можете получать длину, перебирать и индексировать вектора так же, как и
+массивы. К тому же, (изменяемые) вектора могут расти автоматически:
 
-To get the value at a particular index in the vector, we use `[]`s:
+```{rust}
+let mut nums = vec![1, 2, 3]; // mut nums: Vec<i32>
 
-```rust
-let v = vec![1, 2, 3, 4, 5];
+nums.push(4);
 
-println!("The third element of v is {}", v[2]);
+println!("Теперь длина nums составляет {}", nums.len()); // Печатает 4
 ```
 
-The indices count from `0`, so the third element is `v[2]`.
-
-## Iterating
-
-Once you have a vector, you can iterate through its elements with `for`. There
-are three versions:
-
-```rust
-let mut v = vec![1, 2, 3, 4, 5];
-
-for i in &v {
-    println!("A reference to {}", i);
-}
-
-for i in &mut v {
-    println!("A mutable reference to {}", i);
-}
-
-for i in v {
-    println!("Take ownership of the vector and its element {}", i);
-}
-```
-
-Vectors have many more useful methods, which you can read about in [their
-API documentation][vec].
-
-[vec]: ../std/vec/index.html
-[generic]: generics.html
+У векторов есть много других полезных методов.
