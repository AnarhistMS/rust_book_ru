diff --git a/rust/master:src/doc/trpl/vectors.md b/HEAD:vectors.md
index cba4352..fc57226 100644
--- a/rust/master:src/doc/trpl/vectors.md
+++ b/HEAD:vectors.md
@@ -1,33 +1,35 @@
-% Vectors
+% Вектора
 
-A *vector* is a dynamic or "growable" array, implemented as the standard
-library type [`Vec<T>`](../std/vec/) (we'll talk about what the `<T>` means
-later). Vectors always allocate their data on the heap. Vectors are to slices
-what `String` is to `&str`. You can create them with the `vec!` macro:
+*Вектор* - это динамический, "растущий" массив, реализованный в виде
+стандартного библиотечного типа [`Vec<T>`](../std/vec/) (позже мы поговорим о
+том, что здесь означает `<T>`). Вектора всегда помещают данные в куче. Вектора и
+срез - это как `String` и `&str`. Вы можете создавать их с помощью макроса
+`vec!`:
 
 ```{rust}
 let v = vec![1, 2, 3]; // v: Vec<i32>
 ```
 
-(Notice that unlike the `println!` macro we've used in the past, we use square
-brackets `[]` with `vec!`. Rust allows you to use either in either situation,
-this is just convention.)
+(Заметьте, что, в отличие от макроса `println!`, который мы использовали ранее,
+с `vec!` используются квадратные скобки `[]`. Rust разрешает использование и
+круглых, и квадратных скобок в обеих ситуациях - это просто стилистическое
+соглашение.)
 
-There's an alternate form of `vec!` for repeating an initial value:
+Для создания вектора из повторяющихся значений есть другая форма `vec!`:
 
 ```
 let v = vec![0; 10]; // ten zeroes
 ```
 
-You can get the length of, iterate over, and subscript vectors just like
-arrays. In addition, (mutable) vectors can grow automatically:
+Вы можете получать длину, перебирать и индексировать вектора так же, как и
+массивы. К тому же, (изменяемые) вектора могут расти автоматически:
 
 ```{rust}
 let mut nums = vec![1, 2, 3]; // mut nums: Vec<i32>
 
 nums.push(4);
 
-println!("The length of nums is now {}", nums.len()); // Prints 4
+println!("Теперь длина nums составляет {}", nums.len()); // Печатает 4
 ```
 
-Vectors have many more useful methods.
+У векторов есть много других полезных методов.
