diff --git a/rust/master:src/doc/trpl/while-loops.md b/HEAD:while-loops.md
index 508c4ee..0c9ab0d 100644
--- a/rust/master:src/doc/trpl/while-loops.md
+++ b/HEAD:while-loops.md
@@ -1,83 +1,84 @@
-% `while` loops
+% `while` циклы
 
-The other kind of looping construct in Rust is the `while` loop. It looks like
-this:
+Цикл `while` это еще один вид конструкции цикла в Rust. Выглядит он так:
 
 ```{rust}
 let mut x = 5; // mut x: u32
 let mut done = false; // mut done: bool
 
 while !done {
     x += x - 3;
     println!("{}", x);
     if x % 5 == 0 { done = true; }
 }
 ```
 
-`while` loops are the correct choice when you're not sure how many times
-you need to loop.
+этот цикл применяется, если неизвестно сколько раз нужно выполнить тело цикла,
+чтобы получть результат. При каждой итерации цикла проверяется условие, если оно
+истино, то запускается следующая итерация, иначе цикл `while` завершается.
 
-If you need an infinite loop, you may be tempted to write this:
+Если вам нужен бесконечный цикл, то можете сделать условие всегда истинным:
 
 ```{rust,ignore}
 while true {
 ```
 
-However, Rust has a dedicated keyword, `loop`, to handle this case:
+Однако, в Rust имеется ключевое слово `loop` для такого случая:
 
 ```{rust,ignore}
 loop {
 ```
 
-Rust's control-flow analysis treats this construct differently than a
-`while true`, since we know that it will always loop. The details of what
-that _means_ aren't super important to understand at this stage, but in
-general, the more information we can give to the compiler, the better it
-can do with safety and code generation, so you should always prefer
-`loop` when you plan to loop infinitely.
+В Rust анализатор потока управления обрабатывает конструкцию `loop` иначе, чем
+`while true`, хотя для нас это одно и тоже. На данном этапе изучения Rust нам не
+важно знать в чем именно различие между этими конструкциями, но если вы хотите
+сделать бесконечный цикл, то используйте конструкцию `loop`, т.к. компилятор
+сможет транслировать ваш код в более эффективный и безопасный машинный код.
 
-## Ending iteration early
+## Управление итерацией цикла
 
-Let's take a look at that `while` loop we had earlier:
+Давайте посмотрим на цикл `while` снова:
 
 ```{rust}
 let mut x = 5;
 let mut done = false;
 
 while !done {
     x += x - 3;
     println!("{}", x);
     if x % 5 == 0 { done = true; }
 }
 ```
 
-We had to keep a dedicated `mut` boolean variable binding, `done`, to know
-when we should exit out of the loop. Rust has two keywords to help us with
-modifying iteration: `break` and `continue`.
+В этом примере имеется изменяемая переменная `done` типа boolean, которая
+используется в условии для выхода из цикла. В Rust имеются два ключевых слова,
+которые помогут нам работать с итерациями цикла: `break` и `continue`.
 
-In this case, we can write the loop in a better way with `break`:
+Можем переписать цикл более лучшим способом с помощью `break`, чтобы избавиться
+от переменной `done`:
 
 ```{rust}
 let mut x = 5;
 
 loop {
     x += x - 3;
     println!("{}", x);
     if x % 5 == 0 { break; }
 }
 ```
 
-We now loop forever with `loop` and use `break` to break out early.
+Теперь мы исользуем бесконечный цикл `loop` и для выхода из цикла `break`.
 
-`continue` is similar, but instead of ending the loop, goes to the next
-iteration. This will only print the odd numbers:
+`continue` похож на `break`, но вместо выхода из цикла переходит к следующей
+итерации. Следующий пример отобразит только нечетные числа:
 
 ```{rust}
-for x in 0..10 {
+for x in 0u32..10 {
     if x % 2 == 0 { continue; }
 
     println!("{}", x);
 }
 ```
 
-Both `continue` and `break` are valid in both kinds of loops.
+Использовать `continue` и `break` можно как в циклах `while`, так и в циклах
+`for`.
