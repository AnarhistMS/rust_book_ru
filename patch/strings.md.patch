diff --git a/rust/master:src/doc/trpl/strings.md b/HEAD:strings.md
index 2c2e6a8..774368c 100644
--- a/rust/master:src/doc/trpl/strings.md
+++ b/HEAD:strings.md
@@ -1,61 +1,63 @@
-% Strings
+% Строки
 
-Strings are an important concept for any programmer to master. Rust's string
-handling system is a bit different from other languages, due to its systems
-focus. Any time you have a data structure of variable size, things can get
-tricky, and strings are a re-sizable data structure. That being said, Rust's
-strings also work differently than in some other systems languages, such as C.
+Строки являются важным понятием для любого ведущего программиста. Система
+обработки строк в Rust немного отличается от других языков, в связи с его
+фокусировкой на системный уровень. Всякий раз, когда вы имеете дело со
+структурой данных с переменным размером, все может стать слишком запутанным, и
+строки как раз являются структурой данных с переменным размером. Кроме того,
+работа со строками в Rust также отличается и от некоторых системных языков,
+таких как C.
 
-Let's dig into the details. A *string* is a sequence of Unicode scalar values
-encoded as a stream of UTF-8 bytes. All strings are guaranteed to be
-validly encoded UTF-8 sequences. Additionally, strings are not null-terminated
-and can contain null bytes.
+Давайте разбираться в деталях. *string* - это последовательность скалярных
+значений юникод, закодированных в виде потока UTF-8 байт. Все строки должны быть
+гарантированно валидными UTF-8 последовательностями. Кроме того, строки не
+оканчиваются нулем и могут содержать нулевые байты.
 
-Rust has two main types of strings: `&str` and `String`.
+В Rust есть два основных типа строк: `&str` и `String`.
 
-The first kind is a `&str`. These are called *string slices*. String literals
-are of the type `&str`:
+Первый тип строк - `&str`. Это произносится как 'строковый срез (слайс)'.
+Строковые литералы имеют тип `&str`:
 
 ```{rust}
 let string = "Hello there."; // string: &str
 ```
 
-This string is statically allocated, meaning that it's saved inside our
-compiled program, and exists for the entire duration it runs. The `string`
-binding is a reference to this statically allocated string. String slices
-have a fixed size, and cannot be mutated.
+Эта строка выделяется статически, что означает, что она сохраняется в нашей
+скомпилированной программе и существует в течение всего периода ее выполнения.
+`string` привязка представляет собой ссылку на эту статически размещенную
+строку. Строковые срезы имеют фиксированный размер и не могут быть изменены.
 
-A `String`, on the other hand, is a heap-allocated string. This string
-is growable, and is also guaranteed to be UTF-8. `String`s are
-commonly created by converting from a string slice using the
-`to_string` method.
+`String` же, напротив, выделяется в куче. Эта строка расширяема, а также она
+гарантированно является UTF-8 последовательностью. `String` обычно создается
+путем преобразования из строкового среза с использованием метода `to_string`.
 
 ```{rust}
 let mut s = "Hello".to_string(); // mut s: String
 println!("{}", s);
 
 s.push_str(", world.");
 println!("{}", s);
 ```
 
-`String`s will coerce into `&str` with an `&`:
+`String` преобразуются в `&str` с помощью `&`:
 
 ```
 fn takes_slice(slice: &str) {
     println!("Got: {}", slice);
 }
 
 fn main() {
     let s = "Hello".to_string();
     takes_slice(&s);
 }
 ```
 
-Viewing a `String` as a `&str` is cheap, but converting the `&str` to a
-`String` involves allocating memory. No reason to do that unless you have to!
+Представление `String` как `&str` является дешевой операцией, но преобразование
+`&str` в `String` предполагает выделение памяти. Нет причин делать это, если в
+этом нет необходимости!
 
-That's the basics of strings in Rust! They're probably a bit more complicated
-than you are used to, if you come from a scripting language, but when the
-low-level details matter, they really matter. Just remember that `String`s
-allocate memory and control their data, while `&str`s are a reference to
-another string, and you'll be all set.
+Это основы работы со строками в Rust! Они, вероятно, немного сложнее, чем вы
+привыкли, если вы пришли из скриптового языка, но когда низкоуровневые детали
+имеют значение, они действительно имеют значение. Просто помните, что `String`
+выделяют память и контролируют свои данные, а `&str` является ссылкой на другую
+строку, и будет все в порядке.
