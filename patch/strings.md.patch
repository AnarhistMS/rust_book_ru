diff --git a/rust/master:src/doc/trpl/strings.md b/HEAD:strings.md
index 61a6ec3..3f7fb39 100644
--- a/rust/master:src/doc/trpl/strings.md
+++ b/HEAD:strings.md
@@ -1,129 +1,134 @@
-% Strings
+% Строки
 
-Strings are an important concept for any programmer to master. Rust’s string
-handling system is a bit different from other languages, due to its systems
-focus. Any time you have a data structure of variable size, things can get
-tricky, and strings are a re-sizable data structure. That being said, Rust’s
-strings also work differently than in some other systems languages, such as C.
+Строки являются важным понятием для любого ведущего программиста. Система
+обработки строк в Rust немного отличается от других языков, в связи с его
+фокусировкой на системный уровень. Всякий раз, когда вы имеете дело со
+структурой данных с переменным размером, все может стать слишком запутанным, и
+строки как раз являются структурой данных с переменным размером. Кроме того,
+работа со строками в Rust также отличается и от некоторых системных языков,
+таких как C.
 
-Let’s dig into the details. A ‘string’ is a sequence of Unicode scalar values
-encoded as a stream of UTF-8 bytes. All strings are guaranteed to be a valid
-encoding of UTF-8 sequences. Additionally, unlike some systems languages,
-strings are not null-terminated and can contain null bytes.
+Давайте разбираться в деталях. *string* - это последовательность скалярных
+значений юникод, закодированных в виде потока UTF-8 байт. Все строки должны быть
+гарантированно валидными UTF-8 последовательностями. Кроме того, строки не
+оканчиваются нулем и могут содержать нулевые байты.
 
-Rust has two main types of strings: `&str` and `String`. Let’s talk about
-`&str` first. These are called ‘string slices’. String literals are of the type
-`&'static str`:
+В Rust есть два основных типа строк: `&str` и `String`. Сперва поговорим о
+`&str`. Это произносится как 'строковый срез (слайс)'. Строковые литералы имеют
+тип `&'static str`:
 
 ```rust
 let string = "Hello there."; // string: &'static str
 ```
 
-This string is statically allocated, meaning that it’s saved inside our
-compiled program, and exists for the entire duration it runs. The `string`
-binding is a reference to this statically allocated string. String slices
-have a fixed size, and cannot be mutated.
+Эта строка выделяется статически, что означает, что она сохраняется в нашей
+скомпилированной программе и существует в течение всего периода ее выполнения.
+`string` привязка представляет собой ссылку на эту статически размещенную
+строку. Строковые срезы имеют фиксированный размер и не могут быть изменены.
 
-A `String`, on the other hand, is a heap-allocated string. This string is
-growable, and is also guaranteed to be UTF-8. `String`s are commonly created by
-converting from a string slice using the `to_string` method.
+`String` же, напротив, выделяется в куче. Эта строка расширяема, а также она
+гарантированно является UTF-8 последовательностью. `String` обычно создается
+путем преобразования из строкового среза с использованием метода `to_string`.
 
 ```rust
 let mut s = "Hello".to_string(); // mut s: String
 println!("{}", s);
 
 s.push_str(", world.");
 println!("{}", s);
 ```
 
-`String`s will coerce into `&str` with an `&`:
+`String` преобразуются в `&str` с помощью `&`:
 
 ```
 fn takes_slice(slice: &str) {
     println!("Got: {}", slice);
 }
 
 fn main() {
     let s = "Hello".to_string();
     takes_slice(&s);
 }
 ```
 
-Viewing a `String` as a `&str` is cheap, but converting the `&str` to a
-`String` involves allocating memory. No reason to do that unless you have to!
+Представление `String` как `&str` является дешевой операцией, но преобразование
+`&str` в `String` предполагает выделение памяти. Нет причин делать это, если в
+этом нет необходимости!
 
-## Indexing
+## Индексация
 
-Because strings are valid UTF-8, strings do not support indexing:
+Поскольку строки являются валидными UTF-8 последовательностями, то они не
+поддерживают индексацию:
 
 ```rust,ignore
 let s = "hello";
 
 println!("The first letter of s is {}", s[0]); // ERROR!!!
 ```
 
-Usually, access to a vector with `[]` is very fast. But, because each character
-in a UTF-8 encoded string can be multiple bytes, you have to walk over the
-string to find the nᵗʰ letter of a string. This is a significantly more
-expensive operation, and we don’t want to be misleading. Furthermore, ‘letter’
-isn’t something defined in Unicode, exactly. We can choose to look at a string as
-individual bytes, or as codepoints:
+Как правило, доступ к вектору с помощью `[]` является очень быстрой операцией.
+Но поскольку каждый символ в строке, закодированной UTF-8, может быть
+представлен несколькими байтами, то при поиске вы должны перебрать n-ое
+количество литер в строке. Это значительно более дорогая операция, а мы не хотим
+вводить в заблуждение. Кроме того, ‘литера‘ - это не совсем то, что определено в
+Unicode. Мы можем выбрать как рассматиравать строку: как отдельные байты или как
+кодовые единицы:
 
 ```rust
 let hachiko = "忠犬ハチ公";
 
 for b in hachiko.as_bytes() {
     print!("{}, ", b);
 }
 
 println!("");
 
 for c in hachiko.chars() {
     print!("{}, ", c);
 }
 
 println!("");
 ```
 
-This prints:
+Этот код напечатает:
 
 ```text
 229, 191, 160, 231, 138, 172, 227, 131, 143, 227, 131, 129, 229, 133, 172, 
 忠, 犬, ハ, チ, 公, 
 ```
 
-As you can see, there are more bytes than `char`s.
+Как вы можете видеть, количество байт больше, чем количество символов (`char`).
 
-You can get something similar to an index like this:
+Вы можете получить что-то наподобие индекса, как показано ниже:
 
 ```rust
 # let hachiko = "忠犬ハチ公";
 let dog = hachiko.chars().nth(1); // kinda like hachiko[1]
 ```
 
-This emphasizes that we have to go through the whole list of `chars`.
+Это подчеркивает, что мы должны пройти через весь список `chars`.
 
-## Concatenation
+## Конкатенация
 
-If you have a `String`, you can concatenate a `&str` to the end of it:
+Если у вас есть `String`, то вы можете присоединить к ней в конец `&str`:
 
 ```rust
 let hello = "Hello ".to_string();
 let world = "world!";
 
 let hello_world = hello + world;
 ```
 
-But if you have two `String`s, you need an `&`:
+Но если у вас есть две `String`, то необходимо использовать `&`:
 
 ```rust
 let hello = "Hello ".to_string();
 let world = "world!".to_string();
 
 let hello_world = hello + &world;
 ```
 
-This is because `&String` can automatically coerece to a `&str`. This is a
-feature called ‘[`Deref` coercions][dc]’.
+Это потому, что `&String` может быть автоматически приведен к `&str`. Эта фича
+называется ‘[Приведение при разыменовании][dc]’.
 
 [dc]: deref-coercions.html
