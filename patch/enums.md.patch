diff --git a/rust/master:src/doc/trpl/enums.md b/HEAD:enums.md
index 504bd09..77e7372 100644
--- a/rust/master:src/doc/trpl/enums.md
+++ b/HEAD:enums.md
@@ -1,147 +1,157 @@
-% Enums
+% Перечисления
 
-Finally, Rust has a "sum type", an *enum*. Enums are an incredibly useful
-feature of Rust, and are used throughout the standard library. An `enum` is
-a type which relates a set of alternates to a specific name. For example, below
-we define `Character` to be either a `Digit` or something else. These
-can be used via their fully scoped names: `Character::Other` (more about `::`
-below).
+Наконец, в Rust есть "типы-суммы", или *перечисления* (тип-сумма - это термин из
+теории типов). Перечисления - это очень полезная возможность Rust, и они очень
+много используются в стандартной библиотеке языка. Они объявляются с помощью
+ключевого слова `enum`. `enum` - это тип, который соотносит набор неких
+вариантов одному имени. Например, ниже мы определяем перечисление `Character`
+(символ), представляющее собой или цифру (`Digit`), или что-то другое.
+Объявленные варианты можно использовать с помощью полностью квалифицированных
+имён, таких, как `Character::Other` (мы поговорим об операции `::` ниже).
 
 ```rust
 enum Character {
     Digit(i32),
     Other,
 }
 ```
 
-Most normal types are allowed as the variant components of an `enum`. Here are
-some examples:
+Б'ольшая часть обычных типов могут быть вариантами перечисления. Вот несколько
+примеров:
 
 ```rust
 struct Empty;
 struct Color(i32, i32, i32);
 struct Length(i32);
 struct Status { Health: i32, Mana: i32, Attack: i32, Defense: i32 }
 struct HeightDatabase(Vec<i32>);
 ```
 
-You see that, depending on its type, an `enum` variant may or may not hold data.
-In `Character`, for instance, `Digit` gives a meaningful name for an `i32`
-value, where `Other` is only a name. However, the fact that they represent
-distinct categories of `Character` is a very useful property.
+Здесь мы видим, что, в зависимости от типа, вариант перечисления может содержать
+вложенные данные, а может и не иметь таковых. Например, в перечислении
+`Character` (символ), вариант `Digit` (цифра) даёт значимое имя числу типа
+`i32`. А вот вариант `Other` представляет собой лишь имя, без значения. Однако
+наиболее полезно именно то, что отдельные варианты представляют собой отдельные
+виды символов (`Character`).
 
-As with structures, the variants of an enum by default are not comparable with
-equality operators (`==`, `!=`), have no ordering (`<`, `>=`, etc.), and do not
-support other binary operations such as `*` and `+`. As such, the following code
-is invalid for the example `Character` type:
+Как и структуры, варианты перечислений по умолчанию не сравнимы операциями
+сравнения (`==`, `!=`), не упорядочены (не реализуют `<`, `>=` и другие) и не
+поддерживают другие двухместные операции, такие как умножение (`*`) и сложение
+(`+`). Нижеследующий код, как таковой, не верен (если мы используем приведённый
+выше тип-перечисление `Character`):
 
 ```{rust,ignore}
-// These assignments both succeed
+// Оба этих присваивания успешны
 let ten  = Character::Digit(10);
 let four = Character::Digit(4);
 
 // Error: `*` is not implemented for type `Character`
 let forty = ten * four;
 
 // Error: `<=` is not implemented for type `Character`
 let four_is_smaller = four <= ten;
 
 // Error: `==` is not implemented for type `Character`
 let four_equals_ten = four == ten;
 ```
 
-This may seem rather limiting, but it's a limitation which we can overcome.
-There are two ways: by implementing equality ourselves, or by pattern matching
-variants with [`match`][match] expressions, which you'll learn in the next
-chapter. We don't know enough about Rust to implement equality yet, but we can
-use the `Ordering` enum from the standard library, which does:
+Наверное, это выглядит неудобным. Но мы можем преодолеть данное ограничение.
+Есть два способа сделать это: реализовать сравнение самим, или использовать
+сопоставление вариантов с образцом с помощью выражений [`match`][match]. Мы
+узнаем о них в следующей главе. Пока мы не имеем достаточных знаний Rust для
+реализации сравнения. Но мы можем использовать перечисление `Ordering` (порядок)
+из стандартной библиотеки, которое выглядит так:
 
 ```
 enum Ordering {
     Less,
     Equal,
     Greater,
 }
 ```
 
-Because `Ordering` has already been defined for us, we will import it with the
-`use` keyword. Here's an example of how it is used:
+Поскольку перечисление `Ordering` уже определено, мы импортируем его с помощью
+ключевого слова `use`. Вот пример его использования:
 
 ```{rust}
 use std::cmp::Ordering;
 
 fn cmp(a: i32, b: i32) -> Ordering {
     if a < b { Ordering::Less }
     else if a > b { Ordering::Greater }
     else { Ordering::Equal }
 }
 
 fn main() {
     let x = 5;
     let y = 10;
 
     let ordering = cmp(x, y); // ordering: Ordering
 
     if ordering == Ordering::Less {
-        println!("less");
+        println!("меньше");
     } else if ordering == Ordering::Greater {
-        println!("greater");
+        println!("больше");
     } else if ordering == Ordering::Equal {
-        println!("equal");
+        println!("равно");
     }
 }
 ```
 
-The `::` symbol is used to indicate a namespace. In this case, `Ordering` lives
-in the `cmp` submodule of the `std` module. We'll talk more about modules later
-in the guide. For now, all you need to know is that you can `use` things from
-the standard library if you need them.
+Мы используем символ `::` для обозначения пространства имён. В данном случае,
+перечисление `Ordering` находится в под-модуле модуля `std`. Мы подробнее
+поговорим о модулях позже. Пока же достаточно знать, что вы можете использовать
+(`use`) вещи из стандартной библиотеки, если они вам понадобятся.
 
-Okay, let's talk about the actual code in the example. `cmp` is a function that
-compares two things, and returns an `Ordering`. We return either
-`Ordering::Less`, `Ordering::Greater`, or `Ordering::Equal`, depending on
-whether the first value is less than, greater than, or equal to the second. Note
-that each variant of the `enum` is namespaced under the `enum` itself: it's
-`Ordering::Greater`, not `Greater`.
+Отлично, теперь давайте поговорим о самом коде примера. `cmp` - это функция,
+которая сравнивает два объекта, и возвращает значение типа "порядок"
+(`Ordering`). Мы возвращаем одно из значений `Ordering::Less`,
+`Ordering::Greater` или `Ordering::Equal`, когда первое значение меньше, больше
+или равно второму, соответственно. Заметьте, что варианты перечисления находятся
+в пространстве имён самого перечисления: к нему нужно обращаться
+`Ordering::Greater`, а не `Greater`.
 
-The `ordering` variable has the type `Ordering`, and so contains one of the
-three values. We then do a bunch of `if`/`else` comparisons to check which
-one it is.
+Переменная `ordering` имеет тип `Ordering`, и содержит одно из трёх значений.
+Затем мы делаем несколько сравнений с помощью `if`/`else`, чтобы проверить,
+какое из значений мы получили.
 
-This `Ordering::Greater` notation is too long. Let's use another form of `use`
-to import the `enum` variants instead. This will avoid full scoping:
+Запись `Ordering::Greater` неудобна из-за своей длины. Давайте используем другой
+вид оператора `use` и импортируем сами варианты перечисления. В таком коде не
+нужно полностью специфицировать имена вариантов:
 
 ```{rust}
 use std::cmp::Ordering::{self, Equal, Less, Greater};
 
 fn cmp(a: i32, b: i32) -> Ordering {
     if a < b { Less }
     else if a > b { Greater }
     else { Equal }
 }
 
 fn main() {
     let x = 5;
     let y = 10;
 
     let ordering = cmp(x, y); // ordering: Ordering
 
-    if ordering == Less { println!("less"); }
-    else if ordering == Greater { println!("greater"); }
-    else if ordering == Equal { println!("equal"); }
+    if ordering == Less { println!("меньше"); }
+    else if ordering == Greater { println!("больше"); }
+    else if ordering == Equal { println!("равно"); }
 }
 ```
 
-Importing variants is convenient and compact, but can also cause name conflicts,
-so do this with caution. For this reason, it's normally considered better style
-to `use` an enum rather than its variants directly.
+Импорт вариантов удобен и компактен, но он может вызывать конфликты имён,
+поэтому будьте осторожны при его использовании. Обычно стилистически лучше
+импортировать перечисление, а не его варианты.
+
+Как видите, перечисления довольно удобны, и особенно полезны когда они
+[обобщены][generics] относительно вложенных в них типов. Однако, прежде чем мы
+перейдём к рассмотрению обобщённых типов, давайте поговорим об использовании
+перечислений при сопоставлении с образцом. Сопоставление с образцом - это
+инструмент, позволяющий нам элегантно разбирать типы-суммы вроде `Ordering`.
+Данная техника позволит нам избежать всех этих хрупких сравнений с помощью
+`if`/`else`.
 
-As you can see, `enum`s are quite a powerful tool for data representation, and
-are even more useful when they're [generic][generics] across types. Before we
-get to generics, though, let's talk about how to use enums with pattern
-matching, a tool that will let us deconstruct sum types (the type theory term
-for enums) like `Ordering` in a very elegant way that avoids all these messy
-and brittle `if`/`else`s.
 
 [match]: ./match.html
 [generics]: ./generics.html
