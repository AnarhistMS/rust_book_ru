diff --git a/rust/master:src/doc/trpl/enums.md b/HEAD:enums.md
index 80ea25e..63c00a6 100644
--- a/rust/master:src/doc/trpl/enums.md
+++ b/HEAD:enums.md
@@ -1,68 +1,77 @@
-% Enums
+% Перечисления
 
-Rust has a ‘sum type’, an `enum`. Enums are an incredibly useful feature of
-Rust, and are used throughout the standard library. An `enum` is a type which
-relates a set of alternates to a specific name. For example, below we define
-`Character` to be either a `Digit` or something else.
+В Rust есть "типы-суммы", или *перечисления* (тип-сумма - это термин из теории
+типов). Перечисления - это очень полезная возможность Rust, и они очень много
+используются в стандартной библиотеке языка. Они объявляются с помощью ключевого
+слова `enum`. `enum` - это тип, который соотносит набор неких вариантов одному
+имени. Например, ниже мы определяем перечисление `Character` (символ),
+представляющее собой или цифру (`Digit`), или что-то другое.
 
 ```rust
 enum Character {
     Digit(i32),
     Other,
 }
 ```
 
-Most types are allowed as the variant components of an `enum`. Here are some
-examples:
+Большая часть обычных типов могут быть вариантами перечисления. Вот несколько
+примеров:
 
 ```rust
 struct Empty;
 struct Color(i32, i32, i32);
 struct Length(i32);
 struct Stats { Health: i32, Mana: i32, Attack: i32, Defense: i32 }
 struct HeightDatabase(Vec<i32>);
 ```
 
-You see that, depending on its type, an `enum` variant may or may not hold data.
-In `Character`, for instance, `Digit` gives a meaningful name for an `i32`
-value, where `Other` is only a name. However, the fact that they represent
-distinct categories of `Character` is a very useful property.
+Здесь мы видим, что, в зависимости от типа, вариант перечисления может
+содержать, а может и не содержать вложенные данные. Например, в перечислении
+`Character`, вариант `Digit` даёт значимое имя числу типа `i32`. А вот вариант
+`Other` представляет собой лишь имя, без значения. Однако наиболее полезно
+именно то, что отдельные варианты представляют собой различные виды символов
+(`Character`).
 
-The variants of an `enum` by default are not comparable with equality operators
-(`==`, `!=`), have no ordering (`<`, `>=`, etc.), and do not support other
-binary operations such as `*` and `+`. As such, the following code is invalid
-for the example `Character` type:
+Как и структуры, варианты перечислений по умолчанию не сравнимы операциями
+сравнения (`==`, `!=`), не упорядочены (не реализуют `<`, `>=` и другие) и не
+поддерживают другие двухместные операции, такие как умножение (`*`) и сложение
+(`+`). Нижеследующий код, как таковой, не верен (если мы используем приведённый
+выше тип-перечисление `Character`):
 
 ```rust,ignore
-// These assignments both succeed
+// Оба этих присваивания успешны
 let ten  = Character::Digit(10);
 let four = Character::Digit(4);
 
 // Error: `*` is not implemented for type `Character`
 let forty = ten * four;
 
 // Error: `<=` is not implemented for type `Character`
 let four_is_smaller = four <= ten;
 
 // Error: `==` is not implemented for type `Character`
 let four_equals_ten = four == ten;
 ```
 
-We use the `::` syntax to use the name of each variant: They’re scoped by the name
-of the `enum` itself. This allows both of these to work:
+Мы используем `::` синтаксис чтобы использовать имя каждого из вариантов. Их
+область видимости ограничена именем самого перечисления `enum`. Это позволяет
+использовать оба варианта из примера ниже совместно:
 
 ```rust,ignore
 Character::Digit(10);
 Hand::Digit;
 ```
 
-Both variants are named `Digit`, but since they’re scoped to the `enum` name,
+Оба варианта имеют одинаковые имена, `Digit`, но область видимости каждого из
+них ограничена соответствующим именем `enum`.
 
-Not supporting these operations may seem rather limiting, but it’s a limitation
-which we can overcome. There are two ways: by implementing equality ourselves,
-or by pattern matching variants with [`match`][match] expressions, which you’ll
-learn in the next section. We don’t know enough about Rust to implement
-equality yet, but we’ll find out in the [`traits`][traits] section.
+То, что эти операции не поддерживаются, может показаться достаточно
+ограничивающим, но это ограничение, которое мы всегда можем преодолеть. Есть два
+способа: посредством реализация равенства самостоятельно, или посредством
+сопоставления вариантов с шаблонами с помощью выражений конструкции
+[`match`][match], о котором вы узнаете в следующем разделе. Пока мы еще не знаем
+достаточно о Rust для реализации равенства, но мы узнаем об этом в разделе
+[`traits`][traits].
 
 [match]: match.html
 [traits]: traits.html
