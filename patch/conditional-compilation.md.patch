diff --git a/rust/master:src/doc/trpl/conditional-compilation.md b/HEAD:conditional-compilation.md
index 73eb010..5579698 100644
--- a/rust/master:src/doc/trpl/conditional-compilation.md
+++ b/HEAD:conditional-compilation.md
@@ -1,93 +1,97 @@
-% Conditional Compilation
+% Условная компиляция
 
-Rust has a special attribute, `#[cfg]`, which allows you to compile code
-based on a flag passed to the compiler. It has two forms:
+В Rust есть специальный атрибут, `#[cfg]`, который позволяет компилировать код в
+зависимости от флагов переданых компилятору. Он имеет две формы:
 
 ```rust
 #[cfg(foo)]
 # fn foo() {}
 
 #[cfg(bar = "baz")]
 # fn bar() {}
 ```
 
-They also have some helpers:
+Он также имеет несколько помощников:
 
 ```rust
 #[cfg(any(unix, windows))]
 # fn foo() {}
 
 #[cfg(all(unix, target_pointer_width = "32"))]
 # fn bar() {}
 
 #[cfg(not(foo))]
 # fn not_foo() {}
 ```
 
-These can nest arbitrarily:
+Которые могут быть как угодно вложены:
 
 ```rust
 #[cfg(any(not(unix), all(target_os="macos", target_arch = "powerpc")))]
 # fn foo() {}
 ```
 
-As for how to enable or disable these switches, if you’re using Cargo,
-they get set in the [`[features]` section][features] of your `Cargo.toml`:
+Что же касается того, как включить или отключить эти флаги: если вы используете
+Cargo, то они устанавливаются в [разделе `[features]`][features] вашего
+`Cargo.toml`:
 
 [features]: http://doc.crates.io/manifest.html#the-[features]-section
 
 ```toml
 [features]
 # no features by default
 default = []
 
 # The “secure-password” feature depends on the bcrypt package.
 secure-password = ["bcrypt"]
 ```
 
-When you do this, Cargo passes along a flag to `rustc`:
+Если вы сделаете это, то Cargo передаст флаг в `rustc`:
 
 ```text
 --cfg feature="${feature_name}"
 ```
 
-The sum of these `cfg` flags will determine which ones get activated, and
-therefore, which code gets compiled. Let’s take this code:
+Совокупность этих `cfg` флагов будет определять, какие из них будут активны, и,
+следовательно, какой код будет скомпилирован. Давайте рассмотрим такой код:
 
 ```rust
 #[cfg(feature = "foo")]
 mod foo {
 }
 ```
 
-If we compile it with `cargo build --features "foo"`, it will send the `--cfg
-feature="foo"` flag to `rustc`, and the output will have the `mod foo` in it.
-If we compile it with a regular `cargo build`, no extra flags get passed on,
-and so, no `foo` module will exist.
+Если скомпилировать его с помощью `cargo build --features "foo"`, то будет
+передан флаг `--cfg feature="foo"` в `rustc` и выход будет содержать модуль `mod
+foo`. Если скомпилировать его с помощью обычной команды `cargo build`, то
+никаких дополнительных флагов передано не будет, и поэтому, модуль `mod foo` не
+будет существовать.
 
 # cfg_attr
 
-You can also set another attribute based on a `cfg` variable with `cfg_attr`:
+Вы также можете установить другой атрибут в зависимости от переменной `cfg` с
+помощью атрибута `cfg_attr`:
 
 ```rust
 #[cfg_attr(a, b)]
 # fn foo() {}
 ```
 
-Will be the same as `#[b]` if `a` is set by `cfg` attribute, and nothing otherwise.
+Этот код будет равносилен атрибуту `#[b]`, если в атрибуте `cfg` установлен флаг
+`a`, или "без атрибута" в противном случае.
 
 # cfg!
 
-The `cfg!` [syntax extension][compilerplugins] lets you use these kinds of flags
-elsewhere in your code, too:
+[Расширение синтаксиса][Compilerplugins] `cfg!` позволяет использовать данные
+виды флагов и в другом месте в коде:
 
 ```rust
 if cfg!(target_os = "macos") || cfg!(target_os = "ios") {
     println!("Think Different!");
 }
 ```
 
 [compilerplugins]: compiler-plugins.html
 
-These will be replaced by a `true` or `false` at compile-time, depending on the
-configuration settings.
+Они будут заменены на `true` или `false` во время компиляции, в зависимости от
+настройки конфигурации.
