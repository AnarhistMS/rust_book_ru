diff --git a/rust/master:src/doc/trpl/concurrency.md b/fix_current_version:concurrency.md
index 79cb311..210094a 100644
--- a/rust/master:src/doc/trpl/concurrency.md
+++ b/fix_current_version:concurrency.md
@@ -1,63 +1,37 @@
-% Concurrency
+% Многозадачность (параллелизм)
 
-Concurrency and parallelism are incredibly important topics in computer
-science, and are also a hot topic in industry today. Computers are gaining more
-and more cores, yet many programmers aren't prepared to fully utilize them.
+Многозадачность и параллелизм являются невероятно важными проблемами в области компьютерной науки. А также это актуальная тема для современной индустрии. Компьютеры приобретают все больше и больше ядер, но многие программисты не готовы в полной мере использовать это.
 
-Rust's memory safety features also apply to its concurrency story too. Even
-concurrent Rust programs must be memory safe, having no data races. Rust's type
-system is up to the task, and gives you powerful ways to reason about
-concurrent code at compile time.
+Средства Rust для безопасной работы с памятью в полной мере применимы и при работе в многозадачной среде. Поэтому многозадачные программы на Rust должны безопасно работать с памятью, и не создавать состояния гонки данных. Система типов Rust способна справиться с этими задачами еще на этапе компиляции, благодаря мощным средствам, которые она предоставляет.
 
-Before we talk about the concurrency features that come with Rust, it's important
-to understand something: Rust is low-level enough that all of this is provided
-by the standard library, not by the language. This means that if you don't like
-some aspect of the way Rust handles concurrency, you can implement an alternative
-way of doing things. [mio](https://github.com/carllerche/mio) is a real-world
-example of this principle in action.
+Прежде чем мы поговорим об особенностях многозадачности, которые идут с Rust, важно понять вот что: Rust является достаточно низкоуровневым, поэтому все это предусмотрено в стандартной библиотеке, а не в самом языке. Это означает, что если вам не нравится какой-то аспект в способе обработки многозадачности, который использует Rust, вы всегда можете реализовать альтернативный способ. [mio](https://github.com/carllerche/mio) представляет реальный пример этого принципа в действии.
 
-## Background: `Send` and `Sync`
+## Справочная информация: `Send` и `Sync`
 
-Concurrency is difficult to reason about. In Rust, we have a strong, static
-type system to help us reason about our code. As such, Rust gives us two traits
-to help us make sense of code that can possibly be concurrent.
+О многозадачности рассуждать довольно трудно. В Rust, у нас есть система строгой, статической типизации, чтобы помочь нам делать выводы о нашем коде. В связи с этим Rust дает нам два трейта, помогающих нам разбираться в коде, который, по всей вероятности, является многозадачным.
 
 ### `Send`
 
-The first trait we're going to talk about is
-[`Send`](../std/marker/trait.Send.html). When a type `T` implements `Send`, it indicates
-to the compiler that something of this type is able to have ownership transferred
-safely between threads.
+Первый трейт, о котором мы будем говорить, называется [`Send`](../std/marker/trait.Send.html). Когда тип `T` реализует `Send`, это указывает компилятору, что право владения переменными этого типа можно безопасно перемещать между потоками.
 
-This is important to enforce certain restrictions. For example, if we have a
-channel connecting two threads, we would want to be able to send some data
-down the channel and to the other thread. Therefore, we'd ensure that `Send` was
-implemented for that type.
+Это важно для соблюдения некоторых ограничений. Например, если у нас есть канал, соединяющий два потока, и мы хотели бы иметь возможность отправлять некоторые данные по каналу из одного потока в другой. Следовательно, мы должны гарантировать, что для отправляемого типа данных реализован трейт `Send`.
 
 In the opposite way, if we were wrapping a library with FFI that isn't
 threadsafe, we wouldn't want to implement `Send`, and so the compiler will help
 us enforce that it can't leave the current thread.
+И наоборот, если мы были упаковка библиотека с помощью FFI (Foreign Function Interface), который не является потокобезопасным, мы не хотели бы реализовать трейт `Send`, и поэтому компилятор поможет нам обеспечивать это, что нельзя оставить текущий поток.
 
 ### `Sync`
 
-The second of these traits is called [`Sync`](../std/marker/trait.Sync.html).
-When a type `T` implements `Sync`, it indicates to the compiler that something
-of this type has no possibility of introducing memory unsafety when used from
-multiple threads concurrently.
+Второй из этих трейтов называется [`Sync`](../std/marker/trait.Sync.html). Когда тип `T` реализует `Sync`, это указывает компилятору, что переменные этого типа не имеют возможности использовать небезопасную память, когда они используются из нескольких потоков одновременно.
 
-For example, sharing immutable data with an atomic reference count is
-threadsafe. Rust provides a type like this, `Arc<T>`, and it implements `Sync`,
-so it is safe to share between threads.
+Например, совместное использование неизменяемых данных с помощью атомарного счетчика ссылок является потокобезопасным. Rust обеспечивает такой тип, `Arc<T>`, и он реализует `Sync`, так что при помощи этого типа можно безопасно обмениваться данными между потоками.
 
-These two traits allow you to use the type system to make strong guarantees
-about the properties of your code under concurrency. Before we demonstrate
-why, we need to learn how to create a concurrent Rust program in the first
-place!
+Эти два трейта позволяют использовать систему типов, чтобы обеспечить надежные гарантии о свойствах вашего кода в условиях многозадачности. Прежде чем мы продемонстрируем как, сначала мы должны узнать, как создать многозадачную программу в Rust!
 
-## Threads
+## Потоки
 
-Rust's standard library provides a library for 'threads', which allow you to
-run Rust code in parallel. Here's a basic example of using `std::thread`:
+Стандартная библиотека Rust предоставляет библиотеку для 'потоков', которая позволяет запускать Rust код параллельно. Вот простой пример использования `std::thread`:
 
 ```
 use std::thread;
@@ -69,8 +43,7 @@ fn main() {
 }
 ```
 
-The `thread::scoped()` method accepts a closure, which is executed in a new
-thread. It's called `scoped` because this thread returns a join guard:
+Метод `Thread::scoped()` в качестве единственного аргумента принимает замыкание, которое выполняется в новом потоке. Он называется `scoped`, потому что этот поток возвращает присоединенного к нему гварда:
 
 ```
 use std::thread;
@@ -84,8 +57,7 @@ fn main() {
 }
 ```
 
-When `guard` goes out of scope, it will block execution until the thread is
-finished. If we didn't want this behaviour, we could use `thread::spawn()`:
+Когда `guard` выходит из области видимости, он будет блокировать выполнение до тех пор, пока присоединенный к нему поток не закончит выполняться. Если бы мы не хотели такого поведения, то могли бы использовать метод `thread::spawn()`:
 
 ```
 # #![feature(old_io, std_misc)]
@@ -102,11 +74,9 @@ fn main() {
 }
 ```
 
-We need to `sleep` here because when `main()` ends, it kills all of the
-running threads.
+Когда заканчивается функция `main()`, то завершается основной поток, в результате чего убиваются все запущенные потоки. Для предотвращения этого мы должны вызвать метод `sleep`.
 
-[`scoped`](std/thread/struct.Builder.html#method.scoped) has an interesting
-type signature:
+[`scoped`](std/thread/struct.Builder.html#method.scoped) имеет интересную сигнатуру типа:
 
 ```text
 fn scoped<'a, T, F>(self, f: F) -> JoinGuard<'a, T>
@@ -115,36 +85,21 @@ fn scoped<'a, T, F>(self, f: F) -> JoinGuard<'a, T>
           F: Send + 'a
 ```
 
-Specifically, `F`, the closure that we pass to execute in the new thread. It
-has two restrictions: It must be a `FnOnce` from `()` to `T`. Using `FnOnce`
-allows the closure to take ownership of any data it mentions from the parent
-thread. The other restriction is that `F` must be `Send`. We aren't allowed to
-transfer this ownership unless the type thinks that's okay.
+А именно: `F`, замыкание, которое мы передаем для выполнения в новом потоке. Оно имеет два ограничения: оно должно быть `FnOnce`, принимающей `()` и возвращающей `T`. Ограничение `FnOnce` позволяет замыканию захватить право владения над теми данными в родительском потоке, на которые оно ссылается (которые оно использует). Другое ограничение состоит в том, что `F` должно быть `Send`. Мы не можем перемещать право владения, если сам тип не думает, что это нормально.
 
-Many languages have the ability to execute threads, but it's wildly unsafe.
-There are entire books about how to prevent errors that occur from shared
-mutable state. Rust helps out with its type system here as well, by preventing
-data races at compile time. Let's talk about how you actually share things
-between threads.
+Многие языки имеют возможность выполнять потоки, но это дико опасно. Есть целые книги о том, как избежать ошибок, которые происходят от совместного использования изменяемого состояния. В Rust снова помогает система типов, которая предотвращает гонки данных на этапе компиляции. Давайте поговорим о том, как же на самом деле обеспечивается совместное использование что-либо в условиях нескольких потоков.
 
-## Safe Shared Mutable State
+## Безопасное совместное использование изменяемого состояния
 
-Due to Rust's type system, we have a concept that sounds like a lie: "safe
-shared mutable state." Many programmers agree that shared mutable state is
-very, very bad.
+Благодаря системе типов Rust, у нас есть понятие, которое звучит как ложь: "безопасное совместное использование изменяемого состояния." Многие программисты считают, что совместное использование изменяемого состояния - это очень, очень плохо.
 
-Someone once said this:
+Кто-то однажды сказал это:
 
-> Shared mutable state is the root of all evil. Most languages attempt to deal
-> with this problem through the 'mutable' part, but Rust deals with it by
-> solving the 'shared' part.
+> Совместно используемое изменяемое состояние является корнем всех зол. Большинство языков пытаются решить эту проблему через 'изменяемое' часть, но Rust решает ее через 'совместно используемое' часть.
 
-The same [ownership system](ownership.html) that helps prevent using pointers
-incorrectly also helps rule out data races, one of the worst kinds of
-concurrency bugs.
+Та же самая [система владения](ownership.html), которая помогает предотвратить неправильное использование указателей, также помогает исключить гонки данных, один из худших видов ошибок многозадачности.
 
-As an example, here is a Rust program that would have a data race in many
-languages. It will not compile:
+В качестве примера приведем программу на Rust, которая входила бы в состояние гонки данных на многих языках. На Rust она не будет компилироваться:
 
 ```ignore
 # #![feature(old_io, std_misc)]
@@ -165,7 +120,7 @@ fn main() {
 }
 ```
 
-This gives us an error:
+Она выдает ошибку:
 
 ```text
 12:17 error: capture of moved value: `data`
@@ -173,18 +128,9 @@ This gives us an error:
         ^~~~
 ```
 
-In this case, we know that our code _should_ be safe, but Rust isn't sure. And
-it's actually not safe: if we had a reference to `data` in each thread, and the
-thread takes ownership of the reference, we have three owners! That's bad. We
-can fix this by using the `Arc<T>` type, which is an atomic reference counted
-pointer. The 'atomic' part means that it's safe to share across threads.
+В данном случае мы знаем, что наш код _должен_ быть безопасным, но Rust в этом не уверен. И, на самом деле, он не является безопасным: так как у нас есть ссылка на `data` в каждом потоке, а поток становится владельцем ссылки, то у нас есть три владельца! Это плохо. Мы можем исправить это с помощью типа `Arc<T>`, который является атомарным указателем со счетчиком ссылок. 'атомарный' означает, что им безопасно можно обмениваться между потоками.
 
-`Arc<T>` assumes one more property about its contents to ensure that it is safe
-to share across threads: it assumes its contents are `Sync`. But in our
-case, we want to be able to mutate the value. We need a type that can ensure
-only one person at a time can mutate what's inside. For that, we can use the
-`Mutex<T>` type. Here's the second version of our code. It still doesn't work,
-but for a different reason:
+`Arc<T>` предполагает наличие еще одного свойства у своего содержимого, чтобы гарантировать, что его можно безопасно использовать из нескольких потоков: он предполагает, что его содержимое реализует трейт `Sync`. В нашем случае мы также хотим, чтобы была возможность изменять значение содержимого. Нам нужен тип, который может обеспечить возможность изменения своего содержимого лишь одиним пользователем единовременно. Для этого мы можем использовать тип `Mutex<T>`. Вот вторая версия нашего кода. Она по-прежнему не работает, но по другой причине:
 
 ```ignore
 # #![feature(old_io, std_misc)]
@@ -207,7 +153,7 @@ fn main() {
 }
 ```
 
-Here's the error:
+Вот ошибка:
 
 ```text
 <anon>:11:9: 11:22 error: the trait `core::marker::Send` is not implemented for the type `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` [E0277]
@@ -218,18 +164,15 @@ Here's the error:
                   ^~~~~~~~~~~~~
 ```
 
-You see, [`Mutex`](std/sync/struct.Mutex.html) has a
-[`lock`](http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.lock)
-method which has this signature:
+Вы можете видеть, [`Mutex`](std/sync/struct.Mutex.html) содержит метод [`lock`](http://doc.rust-lang.org/nightly/std/sync/struct.Mutex.html#method.lock), который имеет следующую сигнатуру:
 
 ```ignore
 fn lock(&self) -> LockResult<MutexGuard<T>>
 ```
 
-Because `Send` is not implemented for `MutexGuard<T>`, we can't transfer the
-guard across thread boundaries, which gives us our error.
+Так как трейт `Send` не был реализован для `MutexGuard<T>`, мы не можем перемещать гварда через границы потоков, что и сказано в сообщении об ошибке.
 
-We can use `Arc<T>` to fix this. Here's the working version:
+Мы можем использовать `Arc<T>`, чтобы исправить это. Вот рабочая версия:
 
 ```
 # #![feature(old_io, std_misc)]
@@ -253,9 +196,7 @@ fn main() {
 }
 ```
 
-We now call `clone()` on our `Arc`, which increases the internal count. This
-handle is then moved into the new thread. Let's examine the body of the
-thread more closely:
+Теперь мы вызываем `clone()` для нашего `Arc`, что увеличивает внутренний счетчик. Затем эта ручка перемещается в новый поток. Давайте более подробно рассмотрим тело потока:
 
 ```
 # #![feature(old_io, std_misc)]
@@ -275,23 +216,15 @@ thread::spawn(move || {
 # }
 ```
 
-First, we call `lock()`, which acquires the mutex's lock. Because this may fail,
-it returns an `Result<T, E>`, and because this is just an example, we `unwrap()`
-it to get a reference to the data. Real code would have more robust error handling
-here. We're then free to mutate it, since we have the lock.
+Во-первых, мы вызываем метод `lock()`, который захватывает блокировку мьютекса. Так как вызов данного метода может потерпеть неудачу, то он возвращает `Result<T, E>`, но, поскольку это просто пример, мы используем `unwrap()`, чтобы получить ссылку на данные. Реальный код должен иметь более надежную обработку ошибок в такой ситуации. После этого мы свободно изменяем данные, так как у нас есть блокировка.
 
-This timer bit is a bit awkward, however. We have picked a reasonable amount of
-time to wait, but it's entirely possible that we've picked too high, and that
-we could be taking less time. It's also possible that we've picked too low,
-and that we aren't actually finishing this computation.
+Использовать в данном контексте `timer` не совсем правильно. Мы выбрали оптимальное время ожидания. Но вполне возможно, что мы выбрали слишком высокое время ожидания, в результате чего временные затраты на выполнение существенно увеличиваются. Также возможно, что мы выбрали слишком низкое время ожидания, из-за чего вычисления не будут выполнены до конца.
 
-Rust's standard library provides a few more mechanisms for two threads to
-synchronize with each other. Let's talk about one: channels.
+Стандартная библиотека Rust предоставляет несколько механизмов для синхронизации двух потоков друг с другом. Давайте поговорим об одном из них: каналах.
 
-## Channels
+## Каналы
 
-Here's a version of our code that uses channels for synchronization, rather
-than waiting for a specific time:
+А вот версия нашего кода, которая использует каналы для синхронизации, вместо того чтобы ждать в течение определенного времени:
 
 ```
 use std::sync::{Arc, Mutex};
@@ -320,11 +253,9 @@ fn main() {
 }
 ```
 
-We use the `mpsc::channel()` method to construct a new channel. We just `send`
-a simple `()` down the channel, and then wait for ten of them to come back.
+Мы используем метод `mpsc::channel()`, чтобы построить новый канал. В этом примере мы в каждом из десяти потоков вызываем метод `send`, который передает по каналу простое значение `()`, а затем в главном потоке ждем, пока не будут приняты все десять значений.
 
-While this channel is just sending a generic signal, we can send any data that
-is `Send` over the channel!
+В то время как по этому каналу послается просто общий сигнал, в общем случае мы можем отправить по каналу любые данные, которые реализуют трейт `Send`!
 
 ```
 use std::thread;
@@ -347,14 +278,12 @@ fn main() {
 }
 ```
 
-A `u32` is `Send` because we can make a copy. So we create a thread, ask it to calculate
-the answer, and then it `send()`s us the answer over the channel.
+`u32` реализует `Send` потому что мы можем сделать копию. Итак, создается поток, в котором вычисляется ответ, а затем этот ответ с помощью метода `send()` передается обратно по каналу.
 
 
-## Panics
+## Паника
 
-A `panic!` will crash the currently executing thread. You can use Rust's
-threads as a simple isolation mechanism:
+`panic!` аварийно завершает выполняемый в данный момент поток. Вы можете использовать потоки Rust, как простой механизм изоляции:
 
 ```
 use std::thread;
@@ -366,5 +295,4 @@ let result = thread::spawn(move || {
 assert!(result.is_err());
 ```
 
-Our `Thread` gives us a `Result` back, which allows us to check if the thread
-has panicked or not.
+`Thread` возвращает `Result`, что позволяет нам проверить, произошло ли завершение потока в результате паники или нет.
