diff --git a/rust/master:./src/doc/trpl/intrinsics.md b/HEAD:./nightly-rust/intrinsics.md
index e0a8bb5..b03c73c 100644
--- a/rust/master:./src/doc/trpl/intrinsics.md
+++ b/HEAD:./nightly-rust/intrinsics.md
@@ -1,25 +1,24 @@
-% Intrinsics
+% Внутренние средства (Intrinsics)
 
-> **Note**: intrinsics will forever have an unstable interface, it is
-> recommended to use the stable interfaces of libcore rather than intrinsics
-> directly.
+> **Примечание**: внутренние средства всегда будут иметь нестабильный интерфейс,
+> рекомендуется использовать стабильные интерфейсы libcore, а не внутренние
+> напрямую.
 
-These are imported as if they were FFI functions, with the special
-`rust-intrinsic` ABI. For example, if one was in a freestanding
-context, but wished to be able to `transmute` between types, and
-perform efficient pointer arithmetic, one would import those functions
-via a declaration like
+Они импортируются как если бы они были FFI функциями, со специальным `rust-
+intrinsic` ABI. Например, если, находясь в отдельныом (автономном) контексте,
+хочется иметь возможность `transmute` между типами, а также использовать
+эффективную арифметику указателей, то можно импортировать эти функции через
+объявление, такое как
 
-```rust
+```
 # #![feature(intrinsics)]
 # fn main() {}
 
 extern "rust-intrinsic" {
     fn transmute<T, U>(x: T) -> U;
 
     fn offset<T>(dst: *const T, offset: isize) -> *const T;
 }
 ```
 
-As with any other FFI functions, these are always `unsafe` to call.
-
+Как и с любыми другими FFI функциями, их вызов всегда `unsafe`.
