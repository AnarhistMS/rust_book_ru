diff --git a/rust/master:./src/doc/trpl/unsafe.md b/HEAD:./syntax-and-semantics/unsafe.md
index fdb9c33..6f7cd8e 100644
--- a/rust/master:./src/doc/trpl/unsafe.md
+++ b/HEAD:./syntax-and-semantics/unsafe.md
@@ -1,128 +1,191 @@
-% Unsafe
+% Небезопасный код
 
-Rust’s main draw is its powerful static guarantees about behavior. But safety
-checks are conservative by nature: there are some programs that are actually
-safe, but the compiler is not able to verify this is true. To write these kinds
-of programs, we need to tell the compiler to relax its restrictions a bit. For
-this, Rust has a keyword, `unsafe`. Code using `unsafe` has less restrictions
-than normal code does.
+# Введение
 
-Let’s go over the syntax, and then we’ll talk semantics. `unsafe` is used in
-two contexts. The first one is to mark a function as unsafe:
+Rust стремится обеспечить безопасные абстракции над низкоуровневыми деталями
+процессора и операционной системы, но иногда бывает нужно спуститься и писать
+код именно на низком уровне. Цель этого руководства - предоставить обзор
+опасностей и мощи (эффективности), получаемых при использовании небезопасного
+подмножества в Rust.
 
-```rust
-unsafe fn danger_will_robinson() {
-    // scary stuff 
-}
+Rust обеспечивает аварийный люк в виде блока `unsafe { ... }`, который позволяет
+программисту обойти некоторые из проверок компилятора и выполнить широкий спектр
+операций, таких как:
+
+- разыменование [raw pointers](#raw-pointers)
+- вызов функций посредством FFI ([covered by the FFI guide](ffi.html))
+- побитовое (поразрядное) преобразование типов (приведение типов, которое может
+оказаться небезопасным и зависящим от реализации) (`transmute`, также известное
+как "reinterpret cast")
+- встраивание ассемблерного кода [inline assembly](#inline-assembly)
+
+Обратите внимание, что блок `unsafe` не дает послабления для правил, относящихся
+к срокам жизни для `&` и замораживанию (фиксации) позаимствованных данных.
+
+Любое использование `unsafe` равносильно заявлению программиста: "Я знаю больше,
+чем ты", для компилятора. И таким образом, программист должен быть абсолютно
+уверен в том, что он на самом деле знает что-то, почему этот кусок кода является
+валидным. В целом, следует попытаться свести к минимуму количество опасного кода
+в кодовой базе; предпочтительно использовать допустимо минимальное количество
+`unsafe` блоков при создания безопасных интерфейсов.
+
+> **Примечание**: низкоуровневые детали языка Rust еще могут меняться, поэтому
+нет никакой гарантии стабильности или обратной совместимости. В частности, могут
+быть изменения, которые не вызывают ошибок компиляции, но вызывают смысловые
+изменения (например, приводящие к неопределенному (двусмысленному) поведению).
+Таким образом, требуется крайняя осторожность.
+
+# Указатели
+
+## Ссылки
+
+Одной из важнейших особенностей Rust является безопасность памяти. Она
+достигается, в частности с помощью [системы владения](ownership.html), а именно:
+благодяря ей компилятор может гарантировать, что каждая ссылка `&` всегда
+валидна, и никогда не указывает на освобожденную память.
+
+Эти ограничения для `&` имеют огромные преимущества. Тем не менее, они также
+ограничивают и то, как мы можем их использовать. Например, поведение ссылок `&`
+отличается от поведения указателей языка C, и поэтому ссылки не могут быть
+использованы в качестве указателей в интерфейсах внешних функций (FFI). Кроме
+того, и неизменяемые (`&`), и изменяемые (`&mut`) ссылки обладают некоторыми
+гарантиями относительно псевдонимизации и замораживания (фиксации), необходимыми
+для обеспечения безопасности памяти.
+
+В частности, если у вас есть ссылка `&T`, то `T` не должен быть изменен с
+помощью этой или любой другой ссылки. В стандартной библиотеке есть несколько
+типов, например `Cell` и `RefCell`, которые обеспечивают внутреннюю
+изменчивость, заменяя гарантии во время компиляции на динамические проверки во
+время выполнения.
+
+Ссылка `&mut` имеет различные ограничения: когда объект имеет ссылку `&mut T`,
+указывающую на него, тогда эта `&mut` ссылка должна быть единственным возможным
+способом обращения к этому объекту во всей программе. То есть, ссылки `&mut` не
+могу быть псевдонимизированны (иметь псевдоним) любыми другими ссылками.
+
+Использование `unsafe` кода, для того чтобы некорректно обойти и нарушить эти
+ограничения, приведет к неопределеному (двусмысленному) поведению. Например,
+следующий код создает два псевдонима для `&mut` указателя, и не является
+валидным.
+
+```
+use std::mem;
+let mut x: u8 = 1;
+
+let ref_1: &mut u8 = &mut x;
+let ref_2: &mut u8 = unsafe { mem::transmute(&mut *ref_1) };
+
+// oops, ref_1 and ref_2 point to the same piece of data (x) and are
+// both usable
+*ref_1 = 10;
+*ref_2 = 20;
 ```
 
-All functions called from [FFI][ffi] must be marked as `unsafe`, for example.
-The second use of `unsafe` is an unsafe block:
+## Сырье указатели (Raw pointers)
 
-[ffi]: ffi.html
+Rust предлагает два дополнительных вида указателя (*сырье указатели* (*raw
+pointers*), написание которых `*const T` и `*mut T`. Они приблизительно
+соответствуют `const T*` и `T*` языка C; действительно, одно из самых
+распространенных их применений - для FFI, при взаимодействии с внешними
+библиотеками C.
+
+Сырье указатели дают гораздо меньше гарантий, чем другие типы указателей,
+предоставляемые языком Rust и библиотеками. Например, они
+
+- не гарантируют, что они указывают на действительную область памяти, и не
+гарантируют, что они является ненулевыми указателями (в отличие от `Box` и `&`);
+- не имеют никакой автоматической очистки, в отличие от `Box`, и поэтому требуют
+ручного управления ресурсами;
+- это простые структуры данных (plain-old-data), то есть они не перемещают право
+собственности, опять же в отличие от `Box`, следовательно, компилятор Rust не
+может защитить от ошибок, таких как использование освобождённой памяти (use-
+after-free);
+- лишены сроков жизни в какой-либо форме, в отличие от `&`, и поэтому компилятор
+не может делать выводы о висячих указателях; и
+- не имеют никаких гарантий относительно псевдонимизации или изменяемости, за
+исключением изменений, недопустимых непосредственно для `*const T`.
+
+К счастью, им присуща и положительная особенность: слабые гарантии означают и
+слабые ограничения. Отсутствие ограничений делает сырые указатели подходящими в
+качестве строительного блока для реализации внутри библиотек таких вещей как
+смарт-указатели (умные указатели) и векторы. Например, для `*` указателей
+разрешается задавать псевдонимы, что позволяет им быть использоваными при
+написании типов для множественного права собственности, таких как указатели со
+счетчиком ссылок и указатели со сборкой мусора и даже типов для потоко-
+безопасного совместного использования памяти (типы `Rc` и `Arc` реализованы в
+Rust в полной мере).
+
+При работе с сырыми указателями есть две вещи, которые требуют большей
+осторожности (т.е. требуют блок `unsafe { ... }`):
+
+- разыменование: указатели могут содержать любое значение: поэтому возможные
+результаты включают: аварии, чтение неинициализированной памяти, использование
+памяти после освобождения или обычное чтение данных.
+- арифметика указателей с помощью `offset` [intrinsic](#intrinsics)
+(или `.offset` метода): внутреннее используется так называемая "in-bounds"
+арифметика, то есть, он определен только поведение, если результат находится
+внутри (или один байт после конца (one-byte-past-the-end)) объекта, из которого
+первоначально указатель пришел.
+
+Последнее предположение позволяет компилятору более эффективно оптимизировать
+код. Как можно видеть, фактически *создание* сырого указателя не является
+небезопасным, и не происходит преобразование указателя в целое число.
+
+### Ссылки и сырые указатели
+
+Во время выполнения и сырой указатель, `*`, и ссылка, указывающая на тот же
+кусок данных, имеют одинаковое представление. По факту, ссылка `&T` будет неявно
+приведена к сырому указателю `*const T` в безопасном коде, аналогично и для
+вариантов `mut` (оба приведения могут быть выполнены явно, с помощью,
+соответственно, `value as *const T` и `value as *mut T`).
+
+Переход в обратном направлении, от `*const` к ссылке `&`, не являеся безопасным.
+Ссылка `&T` всегда валидна, и поэтому, как минимум, сырой указатель `*const T`
+должен указывать на правильный экземпляр типа `T`. Кроме того, в результате
+указатель должен удовлетворять правилам псевдонимизации и изменяемости ссылок.
+Компилятор предполагает, что эти свойства верны для любых ссылок, независимо от
+того, как они были созданы, и поэтому любое преобразование из сырых указателей
+равносильно утверждению, что они соответствуют этим правилам. Программист
+*должен* гарантировать это.
+
+Рекомендуемым методом преобразования является
+
+```
+let i: u32 = 1;
+// explicit cast
+let p_imm: *const u32 = &i as *const u32;
+let mut m: u32 = 2;
+// implicit coercion
+let p_mut: *mut u32 = &mut m;
 
-```rust
 unsafe {
-    // scary stuff
+    let ref_imm: &u32 = &*p_imm;
+    let ref_mut: &mut u32 = &mut *p_mut;
 }
 ```
 
-It’s important to be able to explicitly delineate code that may have bugs that
-cause big problems. If a Rust program segfaults, you can be sure it’s somewhere
-in the sections marked `unsafe`.
+Разыменование с помощью конструкции `&*x` является более предпочтительным, чем с
+использованием `transmute`. Последнее является гораздо более мощным
+инструментом, чем необходимо, а более ограниченное поведение сложнее
+использовать неправильно. Например, она требует, чтобы `x` представляет собой
+указатель (в отличие от `transmute`).
 
-# What does ‘safe’ mean?
+## Делаем небезопасный код безопасным
 
-Safe, in the context of Rust, means “doesn’t do anything unsafe.” Easy!
+Есть различные способы создать безопасный интерфейс вокруг некоторого
+небезопасного кода:
 
-Okay, let’s try again: what is not safe to do? Here’s a list:
-
-* Data races
-* Dereferencing a null/dangling raw pointer
-* Reads of [undef][undef] (uninitialized) memory
-* Breaking the [pointer aliasing rules][aliasing] with raw pointers.
-* `&mut T` and `&T` follow LLVM’s scoped [noalias][noalias] model, except if
-  the `&T` contains an `UnsafeCell<U>`. Unsafe code must not violate these
-  aliasing guarantees.
-* Mutating an immutable value/reference without `UnsafeCell<U>`
-* Invoking undefined behavior via compiler intrinsics:
-  * Indexing outside of the bounds of an object with `std::ptr::offset`
-    (`offset` intrinsic), with
-    the exception of one byte past the end which is permitted.
-  * Using `std::ptr::copy_nonoverlapping_memory` (`memcpy32`/`memcpy64`
-    intrinsics) on overlapping buffers
-* Invalid values in primitive types, even in private fields/locals:
-  * Null/dangling references or boxes
-  * A value other than `false` (0) or `true` (1) in a `bool`
-  * A discriminant in an `enum` not included in its type definition
-  * A value in a `char` which is a surrogate or above `char::MAX`
-  * Non-UTF-8 byte sequences in a `str`
-* Unwinding into Rust from foreign code or unwinding from Rust into foreign
-  code.
-
-[noalias]: http://llvm.org/docs/LangRef.html#noalias
-[undef]: http://llvm.org/docs/LangRef.html#undefined-values
-[aliasing]: http://llvm.org/docs/LangRef.html#pointer-aliasing-rules
-
-Whew! That’s a bunch of stuff. It’s also important to notice all kinds of
-behaviors that are certainly bad, but are expressly _not_ unsafe:
-
-* Deadlocks
-* Reading data from private fields
-* Leaks due to reference count cycles
-* Exiting without calling destructors
-* Sending signals
-* Accessing/modifying the file system
-* Integer overflow
-
-Rust cannot prevent all kinds of software problems. Buggy code can and will be
-written in Rust. These things aren’t great, but they don’t qualify as `unsafe`
-specifically.
-
-# Unsafe Superpowers
-
-In both unsafe functions and unsafe blocks, Rust will let you do three things
-that you normally can not do. Just three. Here they are:
-
-1. Access or update a [static mutable variable][static].
-2. Dereference a raw pointer.
-3. Call unsafe functions. This is the most powerful ability.
-
-That’s it. It’s important that `unsafe` does not, for example, ‘turn off the
-borrow checker’. Adding `unsafe` to some random Rust code doesn’t change its
-semantics, it won’t just start accepting anything.
-
-But it will let you write things that _do_ break some of the rules. Let’s go
-over these three abilities in order.
-
-## Access or update a `static mut`
-
-Rust has a feature called ‘`static mut`’ which allows for mutable global state.
-Doing so can cause a data race, and as such is inherently not safe. For more
-details, see the [static][static] section of the book.
-
-[static]: const-and-static.html#static
-
-## Dereference a raw pointer
-
-Raw pointers let you do arbitrary pointer arithmetic, and can cause a number of
-different memory safety and security issues. In some senses, the ability to
-dereference an arbitrary pointer is one of the most dangerous things you can
-do. For more on raw pointers, see [their section of the book][rawpointers].
-
-[rawpointers]: raw-pointers.html
-
-## Call unsafe functions
-
-This last ability works with both aspects of `unsafe`: you can only call
-functions marked `unsafe` from inside an unsafe block.
-
-This ability is powerful and varied. Rust exposes some [compiler
-intrinsics][intrinsics] as unsafe functions, and some unsafe functions bypass
-safety checks, trading safety for speed.
-
-I’ll repeat again: even though you _can_ do arbitrary things in unsafe blocks
-and functions doesn’t mean you should. The compiler will act as though you’re
-upholding its invariants, so be careful!
-
-[intrinsics]: intrinsics.html
+- хранить указатели приватно (т.е. не в публичных полях публичных структур), так
+чтобы вы могли видеть и контролировать всех, кто читает и пишет по указателю, в
+одном месте.
+- использовать макрос `assert!()` повсеместно: так как вы не можете полагаться
+на защиту компилятора и систему типов, чтобы удостовериться в корректности
+вашего `unsafe` кода во время компиляции, то используйте `assert!()`, чтобы
+убедиться, что он работает правильно во время выполнения.
+- реализовывать `Drop` для очистки ресурсов с помощью деструктора, и
+использовать RAII (получение ресурса есть инициализация). Это уменьшает
+потребность в каком-либо ручном управлении памятью пользователями, и
+автоматически гарантирует, что очистка всегда выполняется, даже когда в потоке
+произошла паника.
+- гарантировать, что любые данные, хранящиеся по сырому указателю разрушаются в
+соответствующее время.
