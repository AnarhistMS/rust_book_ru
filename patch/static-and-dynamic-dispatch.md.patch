diff --git a/rust/master:src/doc/trpl/static-and-dynamic-dispatch.md b/master:static-and-dynamic-dispatch.md
index a779481..c343178 100644
--- a/rust/master:src/doc/trpl/static-and-dynamic-dispatch.md
+++ b/master:static-and-dynamic-dispatch.md
@@ -1,16 +1,10 @@
-% Static and Dynamic Dispatch
+% Статическая и Динамическая диспетчерезация
 
-When code involves polymorphism, there needs to be a mechanism to determine
-which specific version is actually run. This is called 'dispatch.' There are
-two major forms of dispatch: static dispatch and dynamic dispatch. While Rust
-favors static dispatch, it also supports dynamic dispatch through a mechanism
-called 'trait objects.'
+Когда код включает в себя полиморфизм, то должен быть механизм, чтобы определить, какая конкретная версия будет фактически вызвана. Это называется 'диспетчерезация.' Есть две основные формы диспетчерезации: статическая и динамическая. Хотя Rust и отдает предпочтение статической диспетчерезации, он также поддерживает динамическую диспетчерезацию через механизм, называемый 'трейт объекты.'
 
-## Background
+## Подготовка
 
-For the rest of this chapter, we'll need a trait and some implementations.
-Let's make a simple one, `Foo`. It has one method that is expected to return a
-`String`.
+Для остальной части этой главы нам потребуется трейт и несколько его реализаций. Давайте создадим простой трейт `Foo`. Он содержит один метод, который возвращает `String`.
 
 ```rust
 trait Foo {
@@ -18,7 +12,7 @@ trait Foo {
 }
 ```
 
-We'll also implement this trait for `u8` and `String`:
+Также мы реализуем этот трейт для `u8` и `String`:
 
 ```rust
 # trait Foo { fn method(&self) -> String; }
@@ -31,10 +25,9 @@ impl Foo for String {
 }
 ```
 
+## Статическая диспетчерезация
 
-## Static dispatch
-
-We can use this trait to perform static dispatch with trait bounds:
+Мы можем использовать этот трейт для выполнения статической диспетчерезации с помощью ограничения трейтом:
 
 ```rust
 # trait Foo { fn method(&self) -> String; }
@@ -53,10 +46,7 @@ fn main() {
 }
 ```
 
-Rust uses 'monomorphization' to perform static dispatch here. This means that
-Rust will create a special version of `do_something()` for both `u8` and
-`String`, and then replace the call sites with calls to these specialized
-functions. In other words, Rust generates something like this:
+Здесь Rust использует 'мономорфизацию' для статической диспетчерезации. Это означает, что Rust создаст специальную версию `do_something()` для каждого из типов: `u8` и `String`, а затем заменит все места вызовов на вызовы этих специализированных функций. Другими словами, Rust сгенерирует нечто вроде этого:
 
 ```rust
 # trait Foo { fn method(&self) -> String; }
@@ -79,45 +69,23 @@ fn main() {
 }
 ```
 
-This has a great upside: static dispatch allows function calls to be
-inlined because the callee is known at compile time, and inlining is
-the key to good optimization. Static dispatch is fast, but it comes at
-a tradeoff: 'code bloat', due to many copies of the same function
-existing in the binary, one for each type.
+Статическая диспетчерезация имеет большой потенциал: она позволяет вызывать функцию, которая будет встроена, потому что вызываемая версия этой функции известна на этапе компиляции, а встраивание - это ключ к хорошей оптимизации. Статическая диспетчерезация быстра, но это достигается путем компромисса: происходит 'раздувание кода' в связи с большим количеством копий одной и той же функции, по одной для каждого типа, расположенных в бинарном файле.
 
-Furthermore, compilers aren’t perfect and may “optimize” code to become slower.
-For example, functions inlined too eagerly will bloat the instruction cache
-(cache rules everything around us). This is part of the reason that `#[inline]`
-and `#[inline(always)]` should be used carefully, and one reason why using a
-dynamic dispatch is sometimes more efficient.
+Кроме того, компиляторы не совершенны и могут "оптимизировать" код так, что он станет медленнее. Например, встроенные функции будут слишком охотно раздувать кэш команд (правила кэширования все вокруг нас). Это одна из причин, по которой `#[inline]` и `#[inline(always)]` следует использовать осторожно, и почему использование динамической диспетчеризации иногда более эффективно.
 
-However, the common case is that it is more efficient to use static dispatch,
-and one can always have a thin statically-dispatched wrapper function that does
-a dynamic dispatch, but not vice versa, meaning static calls are more flexible.
-The standard library tries to be statically dispatched where possible for this
-reason.
+Тем не менее, в общем случае более эффективно использовать статическую диспетчерезацию. Кроме того, всегда можно иметь тонкую статически-диспетчерезуемую обертку для функции, которая выполняет динамическую диспетчеризацию, но не наоборот. То есть статические вызовы являются более гибкими. По этой причине стандартная библиотека старается быть статически диспетчерезуемой везде, где это возможно.
 
-## Dynamic dispatch
+## Динамическая диспетчерезация
 
-Rust provides dynamic dispatch through a feature called 'trait objects.' Trait
-objects, like `&Foo` or `Box<Foo>`, are normal values that store a value of
-*any* type that implements the given trait, where the precise type can only be
-known at runtime.
+Rust обеспечивает динамическую диспетчеризацию через механизм под названием 'трейт объекты.' Трейт объекты, такие как `&Foo` или `Box<Foo>`, это обычные переменные, хранящие значения *любого* типа, реализующего данный трейт. Конкретный тип трейт объекта может быть определен только на этапе выполнения.
 
-A trait object can be obtained from a pointer to a concrete type that
-implements the trait by *casting* it (e.g. `&x as &Foo`) or *coercing* it
-(e.g. using `&x` as an argument to a function that takes `&Foo`).
+Трейт объект может быть получен из указателя на конкретный тип, который реализует этот трейт, путем его `явного приведения` (например, `&x as &Foo`) или `неявного приведения` (например, используя `&x` в качестве аргумента функции, которая принимает `&Foo`).
 
-These trait object coercions and casts also work for pointers like `&mut T` to
-`&mut Foo` and `Box<T>` to `Box<Foo>`, but that's all at the moment. Coercions
-and casts are identical.
+Явное и неявное приведение трейт объекта также работает для таких указателей, как `&mut T` в `&mut Foo` и `Box<T>` в `Box<Foo>`, но это все на данный момент. Явное и неявное приведение идентичны.
 
-This operation can be seen as "erasing" the compiler's knowledge about the
-specific type of the pointer, and hence trait objects are sometimes referred to
-as "type erasure".
+Эта операция может рассматриваться как "затирание" знания компилятора о конкретном типе указателя, поэтому трейт объекты иногда называют как "затирание типов".
 
-Coming back to the example above, we can use the same trait to perform dynamic
-dispatch with trait objects by casting:
+Возвращаясь к примеру выше, мы можем использовать тот же самый трейт для выполнения динамической диспетчеризации с трейт объектами путем явного приведения типа:
 
 ```rust
 # trait Foo { fn method(&self) -> String; }
@@ -134,7 +102,7 @@ fn main() {
 }
 ```
 
-or by coercing:
+или неявного приведения типа:
 
 ```rust
 # trait Foo { fn method(&self) -> String; }
@@ -151,42 +119,23 @@ fn main() {
 }
 ```
 
-A function that takes a trait object is not specialized to each of the types
-that implements `Foo`: only one copy is generated, often (but not always)
-resulting in less code bloat. However, this comes at the cost of requiring
-slower virtual function calls, and effectively inhibiting any chance of
-inlining and related optimisations from occurring.
+Функция, которая принимает трейт объект, не обладает специализированнми копиями для каждого из типов, которые реализуют трейт `Foo`: генерируется только одна копия. Часто (но не всегда), в результате происходит уменьшение раздувания кода. Тем не менее, это происходит за счет более медленного вызова виртуальных функций, и, по существу, блокирования любой возможности встраивания и связанных с этим оптимизаций.
 
-### Why pointers?
+### Почему указатели?
 
-Rust does not put things behind a pointer by default, unlike many managed
-languages, so types can have different sizes. Knowing the size of the value at
-compile time is important for things like passing it as an argument to a
-function, moving it about on the stack and allocating (and deallocating) space
-on the heap to store it.
+В отличие от многих управляемых языков, Rust по умолчанию не размещает значения по указателю, так как типы могут иметь различные размеры. Знать размер значения во время компиляции важно прежде всего для выполнения таких задач, как передача значения в качестве аргумента в функцию, что вызывает помещение переданного значения в стек, и выделение (и освобождение) места на куче для сохранения значения там.
 
-For `Foo`, we would need to have a value that could be at least either a
-`String` (24 bytes) or a `u8` (1 byte), as well as any other type for which
-dependent crates may implement `Foo` (any number of bytes at all). There's no
-way to guarantee that this last point can work if the values are stored without
-a pointer, because those other types can be arbitrarily large.
+Для `Foo` допускается иметь значение, которое может быть либо `String` (24 байт), либо `u8` (1 байт), либо любой другой тип, для которого в соответствующих крейтах может быть реализован `Foo` (возможно абсолютно любое число байт). Так как этот другой тип может быть сколь угодно большими, то нет никакого способа, гарантирующего, что последний вариант будет работать, если значения сохраняются без указателя.
 
-Putting the value behind a pointer means the size of the value is not relevant
-when we are tossing a trait object around, only the size of the pointer itself.
+Размещение значения по указателю означает, что, когда мы имеем дело с трейт объектом, размер самого значения не важен, а важен лишь размер указателя.
 
-### Representation
+### Representation Представление
 
-The methods of the trait can be called on a trait object via a special record
-of function pointers traditionally called a 'vtable' (created and managed by
-the compiler).
+Методы трейта можно вызвать для трейт объекта с помощью специальной записи указателей на функции, традиционно называемой 'виртуальная таблица' ('vtable') (создается и управляется компилятором).
 
-Trait objects are both simple and complicated: their core representation and
-layout is quite straight-forward, but there are some curly error messages and
-surprising behaviors to discover.
+Трейт объекты являются одновременно и простыми и сложными: их основное представление и устройство довольно прямолинейно, но есть некоторые тонкости относительно обнаружения сообщений об ошибках и странного поведения.
 
-Let's start simple, with the runtime representation of a trait object. The
-`std::raw` module contains structs with layouts that are the same as the
-complicated built-in types, [including trait objects][stdraw]:
+Давайте начнем с простого, с рантайм представления трейт объекта. Модуль `std::raw` содержит структуры с макетами, которые являются такими же, как и сложные встроенные типы, [в том числе трейт объекты][stdraw]:
 
 ```rust
 # mod foo {
@@ -199,18 +148,11 @@ pub struct TraitObject {
 
 [stdraw]: ../std/raw/struct.TraitObject.html
 
-That is, a trait object like `&Foo` consists of a "data" pointer and a "vtable"
-pointer.
-
-The data pointer addresses the data (of some unknown type `T`) that the trait
-object is storing, and the vtable pointer points to the vtable ("virtual method
-table") corresponding to the implementation of `Foo` for `T`.
+То есть трейт объект, такой как `&Foo`, состоит из указателя на "данные" и указателя на "виртуальную таблицу".
 
+Указатель `data` адрессует данные (какого-то неизвестного типа `T`), которые хранит трейт объект, а указатель `vtable` указывает на виртуальную таблицу ("таблица виртуальных методов"), которая соответствует реализации `Foo` для `T`.
 
-A vtable is essentially a struct of function pointers, pointing to the concrete
-piece of machine code for each method in the implementation. A method call like
-`trait_object.method()` will retrieve the correct pointer out of the vtable and
-then do a dynamic call of it. For example:
+По существу, виртуальная таблица - это структура указателей на функции, указывающих на конкретный кусок машинного кода для каждого метода в реализации. Вызов метода наподобие `trait_object.method()` возвращает правильный указатель из виртуальной таблицы, а затем динамически вызывает метод по этому указателю. Например:
 
 ```{rust,ignore}
 struct FooVtable {
@@ -260,19 +202,9 @@ static Foo_for_String_vtable: FooVtable = FooVtable {
 };
 ```
 
-The `destructor` field in each vtable points to a function that will clean up
-any resources of the vtable's type, for `u8` it is trivial, but for `String` it
-will free the memory. This is necessary for owning trait objects like
-`Box<Foo>`, which need to clean-up both the `Box` allocation as well as the
-internal type when they go out of scope. The `size` and `align` fields store
-the size of the erased type, and its alignment requirements; these are
-essentially unused at the moment since the information is embedded in the
-destructor, but will be used in the future, as trait objects are progressively
-made more flexible.
+Поле `destructor` в каждой виртуальной таблице указывает на функцию, которая будет очищать любые ресурсы типа этой виртуальной таблицы, для `u8` она тривиальна, но для `String` она будет освобождать память. Это необходимо для владельцев трейт объектов, таких как `Box<Foo>`, для которых необходимо очищать выделенную память как для `Box`, так и для внутреннего типа, когда они выходят из области видимости. Поля `size` и `align` хранят размер затёртого типа, и его требования к выравниванию; по существу, они не использовался в момент, так как информация встроенного в деструктор, но будет использоваться в будущем, так как объекты отличительным признакам постепенно становится более гибким.
 
-Suppose we've got some values that implement `Foo`, then the explicit form of
-construction and use of `Foo` trait objects might look a bit like (ignoring the
-type mismatches: they're all just pointers anyway):
+Предположим, у нас есть несколько значений, которые реализуют `Foo`, тогда явный вид создания и использования трейт объектов `Foo` может выглядеть примерно как (игнорируются несоответствия типов: в любом случае, они всего лишь указатели):
 
 ```{rust,ignore}
 let a: String = "foo".to_string();
@@ -301,6 +233,4 @@ let y = TraitObject {
 (y.vtable.method)(y.data);
 ```
 
-If `b` or `y` were owning trait objects (`Box<Foo>`), there would be a
-`(b.vtable.destructor)(b.data)` (respectively `y`) call when they went out of
-scope.
+Если `b` или `y` были владельцами трейт объектов (`Box<Foo>`), то будут вызываны деструкторы `(b.vtable.destructor)(b.data)` или `(y.vtable.destructor)(y.data)` соответственно, как только они выйдут из своей области определения.
