diff --git a/rust/master:src/doc/trpl/ffi.md b/fix_current_version:ffi.md
index 23f6e17..76be914 100644
--- a/rust/master:src/doc/trpl/ffi.md
+++ b/fix_current_version:ffi.md
@@ -1,16 +1,19 @@
-% Foreign Function Interface
+% Интерфейс внешних функций (Foreign Function Interface)
 
-# Introduction
+# Введение
 
-This guide will use the [snappy](https://github.com/google/snappy)
-compression/decompression library as an introduction to writing bindings for
-foreign code. Rust is currently unable to call directly into a C++ library, but
-snappy includes a C interface (documented in
+Это руководство будет использовать [snappy](https://github.com/google/snappy),
+библиотеку упаковки/распаковки данных, в качестве примера для написания привязок
+к внешнему коду. Rust в настоящее время не в состоянии делать вызовы напрямую из
+библиотеки C++, но snappy включает в себя интерфейс C (документирован в
 [`snappy-c.h`](https://github.com/google/snappy/blob/master/snappy-c.h)).
 
 The following is a minimal example of calling a foreign function which will
 compile if snappy is installed:
 
+Ниже приведен минимальный пример вызова внешней функции, который будет
+скомпилирован, при условии, что библиотека snappy установлена:
+
 ```no_run
 # #![feature(libc)]
 extern crate libc;
@@ -27,23 +30,27 @@ fn main() {
 }
 ```
 
-The `extern` block is a list of function signatures in a foreign library, in
-this case with the platform's C ABI. The `#[link(...)]` attribute is used to
-instruct the linker to link against the snappy library so the symbols are
-resolved.
+Блок `extern` содержит список сигнатур функций из внешней библиотеки, в данном
+случае для платформы C ABI. Атрибут `#[link(...)]` используется для указания
+линкеру линковать с библиотекой snappy, поэтому символы будут разрешены.
 
-Foreign functions are assumed to be unsafe so calls to them need to be wrapped
-with `unsafe {}` as a promise to the compiler that everything contained within
-truly is safe. C libraries often expose interfaces that aren't thread-safe, and
-almost any function that takes a pointer argument isn't valid for all possible
-inputs since the pointer could be dangling, and raw pointers fall outside of
-Rust's safe memory model.
+Предполагается, что внешние функции могут быть небезопасными, поэтому их вызовы
+должны быть обёрнуты в блок `unsafe {}` как обещание компилятору, что все
+содержимое внутри этого блока в действительности безопасно. C библиотеки часто
+предоставляют интерфейсы, которые не являются поточно-безопасным. И почти любая
+функция, которая принимает в качестве аргумента указатель, не может быть
+валидной для всех возможных входных значений, поскольку указатель может быть
+висячим, и сырые указатели выходят за пределы безопасной модели памяти в Rust.
 
 When declaring the argument types to a foreign function, the Rust compiler can
 not check if the declaration is correct, so specifying it correctly is part of
 keeping the binding correct at runtime.
 
-The `extern` block can be extended to cover the entire snappy API:
+При объявлении типов аргументов для внешней функции, компилятор Rust не может
+проверить, является ли данное объявление правильным, поэтому проверка
+правильности является частью сохранения привязки правильно во время выполнения.
+
+Блок `extern` может быть распространён на весь snappy API:
 
 ```no_run
 # #![feature(libc)]
@@ -70,16 +77,19 @@ extern {
 # fn main() {}
 ```
 
-# Creating a safe interface
+# Создание безопасного интерфейса
 
-The raw C API needs to be wrapped to provide memory safety and make use of higher-level concepts
-like vectors. A library can choose to expose only the safe, high-level interface and hide the unsafe
-internal details.
+Сырой C API необходимо обернуть, чтобы обеспечить безопасность памяти, чтобы
+была возможность использовать концепции более высокого уровня, такие как
+векторы. Библиотека может выборочно открывать только безопасный, высокоуровневый
+интерфейс и скрывать небезопасные внутренние детали.
 
-Wrapping the functions which expect buffers involves using the `slice::raw` module to manipulate Rust
-vectors as pointers to memory. Rust's vectors are guaranteed to be a contiguous block of memory. The
-length is number of elements currently contained, and the capacity is the total size in elements of
-the allocated memory. The length is less than or equal to the capacity.
+Обёртывание функций, которые принимают в качестве входных параметров буферы,
+включает в себя использование модуля `slice::raw` для управления векторами Rust
+как указателями на память. Векторы Rust представляют собой гарантированно
+непрерывный блок памяти. Длина - это количество элементов, которое в настоящее
+время содержится в векторе, а мощность - общее количество выделенной памяти в
+элементах. Длина меньше или равна мощности.
 
 ```
 # #![feature(libc)]
@@ -98,14 +108,24 @@ The `validate_compressed_buffer` wrapper above makes use of an `unsafe` block, b
 guarantee that calling it is safe for all inputs by leaving off `unsafe` from the function
 signature.
 
-The `snappy_compress` and `snappy_uncompress` functions are more complex, since a buffer has to be
-allocated to hold the output too.
+Обертка `validate_compressed_buffer` использует блок `unsafe`, но это
+гарантирует, что ее вызов будет безопасен для всех входных данных, вследствие
+удаления модификатора `unsafe` из сигнатуры функции.
+
+Функции `snappy_compress` и `snappy_uncompress` являются более сложными, так как
+должен быть выделен буфер для хранения возвращаемых данных.
 
 The `snappy_max_compressed_length` function can be used to allocate a vector with the maximum
 required capacity to hold the compressed output. The vector can then be passed to the
 `snappy_compress` function as an output parameter. An output parameter is also passed to retrieve
 the true length after compression for setting the length.
 
+Функция `snappy_max_compressed_length` может быть использована для выделения
+вектора максимальной мощности, требуемой для хранения упакованных выходных
+данных. Этот вектор может затем быть передан в функцию `snappy_compress` в
+качестве выходного параметра. Выходной параметр также передается, чтобы получить
+истинную длину после сжатия для установки длины.
+
 ```
 # #![feature(libc)]
 # extern crate libc;
@@ -130,8 +150,9 @@ pub fn compress(src: &[u8]) -> Vec<u8> {
 }
 ```
 
-Decompression is similar, because snappy stores the uncompressed size as part of the compression
-format and `snappy_uncompressed_length` will retrieve the exact buffer size required.
+Распаковка аналогична, потому что snappy хранит размер неупакованных данных как
+часть формата сжатия, и `snappy_uncompressed_length` будет получить точный размер
+необходимого буфера.
 
 ```
 # #![feature(libc)]
@@ -166,31 +187,34 @@ pub fn uncompress(src: &[u8]) -> Option<Vec<u8>> {
 }
 ```
 
-For reference, the examples used here are also available as an [library on
-GitHub](https://github.com/thestinger/rust-snappy).
+Для справки, примеры, используемые здесь, также доступны в библиотеке на
+[GitHub](https://github.com/thestinger/rust-snappy).
 
-# Destructors
+# Деструкторы
 
-Foreign libraries often hand off ownership of resources to the calling code.
-When this occurs, we must use Rust's destructors to provide safety and guarantee
-the release of these resources (especially in the case of panic).
+Внешние библиотеки часто передают право собственности на ресурсы в вызовающий
+код. Когда это происходит, мы должны использовать деструкторы Rust, чтобы
+обеспечить безопасность и гарантировать освобождение этих ресурсов (особенно в
+случае паники).
 
-For more about destructors, see the [Drop trait](../std/ops/trait.Drop.html).
+Чтобы получить более подробную информацию о деструкторах, смотрите
+[Drop trait](../std/ops/trait.Drop.html).
 
-# Callbacks from C code to Rust functions
+# Обратные вызовы Rust функций из C кода
 
-Some external libraries require the usage of callbacks to report back their
-current state or intermediate data to the caller.
-It is possible to pass functions defined in Rust to an external library.
-The requirement for this is that the callback function is marked as `extern`
-with the correct calling convention to make it callable from C code.
+Некоторые внешние библиотеки требуют использование обратных вызовов для передачи
+вызывающей стороне отчета о своем текущем состоянии или промежуточных данных. Во
+внешнюю библиотеку можно передавать функции, которые были определены в Rust. При
+создании функции обратного вызова, которую можно вызывать из C кода, необходимо
+указать для нее спецификатор `extern`, за котороым следует правильное соглашение
+о вызове.
 
-The callback function can then be sent through a registration call
-to the C library and afterwards be invoked from there.
+Затем функция обратного вызова может быть передана в библиотеку C через
+регистрационный вызов, а затем вызывается оттуда.
 
-A basic example is:
+Простой пример:
 
-Rust code:
+Rust код:
 
 ```no_run
 extern fn callback(a: i32) {
@@ -211,7 +235,7 @@ fn main() {
 }
 ```
 
-C code:
+C код:
 
 ```c
 typedef void (*rust_callback)(int32_t);
@@ -227,23 +251,22 @@ void trigger_callback() {
 }
 ```
 
-In this example Rust's `main()` will call `trigger_callback()` in C,
-which would, in turn, call back to `callback()` in Rust.
+В этом примере функция `main()` в Rust вызовет функцию `trigger_callback()` в C,
+которая, в свою очередь, выполнит обратный вызов функции `callback()` в Rust.
 
+## Обратные вызовы, адресованные объектам Rust (Targeting callbacks to Rust objects)
 
-## Targeting callbacks to Rust objects
+Предыдущий пример показал, как глобальная функция может быть вызвана из C кода.
+Однако зачастую желательно, чтобы обратный вызов был адресован специальному
+объекту в Rust. Это может быть объект, который представляет собой обертку для
+соответствующего объекта C.
 
-The former example showed how a global function can be called from C code.
-However it is often desired that the callback is targeted to a special
-Rust object. This could be the object that represents the wrapper for the
-respective C object.
+Такое поведение может быть достигнуто путем передачи небезопасного указателя на
+объект в библиотеку C. После чего библиотека C сможет включать указатель на
+объект Rust при обратном вызове. Это позволит получить небезопасный доступ к
+ссылке на объект Rust в обратном вызове.
 
-This can be achieved by passing an unsafe pointer to the object down to the
-C library. The C library can then include the pointer to the Rust object in
-the notification. This will allow the callback to unsafely access the
-referenced Rust object.
-
-Rust code:
+Rust код:
 
 ```no_run
 #[repr(C)]
@@ -278,7 +301,7 @@ fn main() {
 }
 ```
 
-C code:
+C код:
 
 ```c
 typedef void (*rust_callback)(void*, int32_t);
@@ -296,13 +319,13 @@ void trigger_callback() {
 }
 ```
 
-## Asynchronous callbacks
+## Асинхронные обратные вызовы
 
-In the previously given examples the callbacks are invoked as a direct reaction
-to a function call to the external C library.
-The control over the current thread is switched from Rust to C to Rust for the
-execution of the callback, but in the end the callback is executed on the
-same thread that called the function which triggered the callback.
+В ранее приведенных примерах обратные вызовы выполняются как непосредственная
+реакция на вызов функции внешней C библиотеки. Для выполнения обратного вызова
+контроль над текущим потоком переключался из Rust в C, а затем снова в Rust, но,
+в конце концов, обратный вызов выполнялся в том же потоке, из которого была
+вызвана функция, инициировавшая обратный вызов.
 
 Things get more complicated when the external library spawns its own threads
 and invokes callbacks from there.
@@ -312,18 +335,27 @@ Besides classical synchronization mechanisms like mutexes, one possibility in
 Rust is to use channels (in `std::comm`) to forward data from the C thread
 that invoked the callback into a Rust thread.
 
-If an asynchronous callback targets a special object in the Rust address space
-it is also absolutely necessary that no more callbacks are performed by the
-C library after the respective Rust object gets destroyed.
-This can be achieved by unregistering the callback in the object's
-destructor and designing the library in a way that guarantees that no
-callback will be performed after deregistration.
+Все становится более сложным, когда внешняя библиотека порождает свои
+собственные потоки и осуществляет обратные вызовы из них. В этих случаях доступ
+к структурам данных Rust внутри обратных вызовов особенно небезопасен, и поэтому
+должны быть использованы соответствующие механизмы синхронизации. Помимо
+классических механизмов синхронизации, таких как мьютексы, в Rust есть еще одна
+возможность: использовать каналы (в `std::comm` (`std::sync::mpsc::channel`)),
+чтобы направить данные из потока C, который выполнял обратный вызов в потоке
+Rust.
 
-# Linking
+Если асинхронный обратный вызов адресован конкретному объекту в адресном
+пространстве Rust, то необходимо потребовать, чтобы обратные вызовы больше не
+выполнялись библиотекой C после удаления этого Rust объекта. Это может быть
+достигнуто путем отмены регистрации обратного вызова в деструкторе объекта и
+проектирования библиотеки таким образом, чтобы гарантировалось, что после отмены
+регистрации обратного вызова он больше не будет выполняться.
 
-The `link` attribute on `extern` blocks provides the basic building block for
-instructing rustc how it will link to native libraries. There are two accepted
-forms of the link attribute today:
+# Линковка
+
+Атрибут `link` для блоков `extern` обеспечивает основу для указания rustc, как
+он будет линковать нативные библиотеки. На сегодняшний день есть две
+общепринятых формы записи атрибута `link`:
 
 * `#[link(name = "foo")]`
 * `#[link(name = "foo", kind = "bar")]`
@@ -333,59 +365,75 @@ linking to, and in the second case `bar` is the type of native library that the
 compiler is linking to. There are currently three known types of native
 libraries:
 
-* Dynamic - `#[link(name = "readline")]`
-* Static - `#[link(name = "my_build_dependency", kind = "static")]`
-* Frameworks - `#[link(name = "CoreFoundation", kind = "framework")]`
+В обоих этих случаях `foo` - это имя нативной библиотеки, которую мы линкуем, и
+во втором случае `bar` - это тип нативной библиотеки, которую компилятор
+линкует. В настоящее время известны три типа нативных библиотек:
 
-Note that frameworks are only available on OSX targets.
+* Динамические - `#[link(name = "readline")]`
+* Статические - `#[link(name = "my_build_dependency", kind = "static")]`
+* Фреймворки - `#[link(name = "CoreFoundation", kind = "framework")]`
+
+Обратите внимание, что фреймворки доступны только для OSX.
 
 The different `kind` values are meant to differentiate how the native library
 participates in linkage. From a linkage perspective, the rust compiler creates
 two flavors of artifacts: partial (rlib/staticlib) and final (dylib/binary).
 Native dynamic libraries and frameworks are propagated to the final artifact
 boundary, while static libraries are not propagated at all.
+Различные значения `kind` предназначены для дифференцирования нативных библиотек
+по способу участия в линковке. С точки зрения линковки, компилятор Rust создает
+две разновидности артефактов: промежуточный (rlib/staticlib) и конечный
+(dylib/binary). Нативные динамические библиотеки и фреймворки распространяются
+на конечные артефакты, а статические библиотеки не распространяются на все.
 
-A few examples of how this model can be used are:
+Вот несколько примеров того, как эта модель может быть использована:
 
-* A native build dependency. Sometimes some C/C++ glue is needed when writing
-  some rust code, but distribution of the C/C++ code in a library format is just
-  a burden. In this case, the code will be archived into `libfoo.a` and then the
-  rust crate would declare a dependency via `#[link(name = "foo", kind =
-  "static")]`.
+* Нативная зависимость при сборке. Иногда написанный на Rust код необходимо
+  состыковать с некоторым кодом на C/C++, но распранение C/C++ кода в формате
+  библиотеки накладывает дополнительные трудности. В этом случае, код будут
+  упакован в `libfoo.a`, а затем контейнер Rust должен будет объявить
+  зависимость с помощью `#[link(name = "foo", kind = "static")]`.
 
-  Regardless of the flavor of output for the crate, the native static library
-  will be included in the output, meaning that distribution of the native static
-  library is not necessary.
+  Независимо от типа выхода (промежуточный или конечный) для контейнера,
+  нативная статическая библиотека будет включена на выходе, что означает, что
+  нет необходимости в распранении этой нативной статической библиотеки отдельно.
 
-* A normal dynamic dependency. Common system libraries (like `readline`) are
-  available on a large number of systems, and often a static copy of these
-  libraries cannot be found. When this dependency is included in a rust crate,
-  partial targets (like rlibs) will not link to the library, but when the rlib
-  is included in a final target (like a binary), the native library will be
-  linked in.
+  Нормальная динамическая зависимость. Общие системные библиотеки (такие, как
+  `readline`) доступны на большом количестве систем, и часто можно найти
+  статическую копию этих библиотек. Когда такая зависимость была включена в
+  контейнер Rust, промежуточные цели (например, rlibs) не будут линковать
+  библиотеку, но когда rlib входит в конечную цель (например, исполняемый файл),
+  нативная библиотека будет прилинкована.
 
-On OSX, frameworks behave with the same semantics as a dynamic library.
+На OSX, фреймворки ведут себя с той же семантикой, что и динамические
+библиотеки.
 
-# Unsafe blocks
+# Небезопасные блоки
 
-Some operations, like dereferencing unsafe pointers or calling functions that have been marked
-unsafe are only allowed inside unsafe blocks. Unsafe blocks isolate unsafety and are a promise to
-the compiler that the unsafety does not leak out of the block.
+Некоторые операции, такие как разыменование небезопасных указателей или вызов
+функций, которые были отмечены как небезопасные, разрешено только внутри
+небезопасных блоков. Небезопасных блоки изолируют опасносные ситуации и дают
+гарантии компилятору, что опасности не вытекут за пределы блока.
 
 Unsafe functions, on the other hand, advertise it to the world. An unsafe function is written like
 this:
 
+Небезопасные функции, с другой стороны, делают сильный акцент на этом.
+Небезопасная функция записывается в виде:
+
 ```
 unsafe fn kaboom(ptr: *const i32) -> i32 { *ptr }
 ```
 
-This function can only be called from an `unsafe` block or another `unsafe` function.
+Эта функция может быть вызвана только из блока `unsafe` или из другой функции
+`unsafe`.
 
-# Accessing foreign globals
+# Доступ к внешним глобальным переменным
 
-Foreign APIs often export a global variable which could do something like track
-global state. In order to access these variables, you declare them in `extern`
-blocks with the `static` keyword:
+Внешние API довольно часто экспортируют глобальные переменные, которые могут
+быть использованы, например, для отслеживание глобального состояния. Для того,
+чтобы получить доступ к этим переменным, нужно объявить их в блоке `extern`,
+используя ключевое слово `static`:
 
 ```no_run
 # #![feature(libc)]
@@ -402,9 +450,10 @@ fn main() {
 }
 ```
 
-Alternatively, you may need to alter global state provided by a foreign
-interface. To do this, statics can be declared with `mut` so we can mutate
-them.
+Кроме того, возможно вам потребуется изменить глобальное состояние,
+предоставленное внешним интерфейсом. Для этого при объявлении статических
+переменных может быть добавлен модификатор `mut`, чтобы была возможность
+изменять их.
 
 ```no_run
 # #![feature(libc)]
@@ -430,14 +479,17 @@ fn main() {
 }
 ```
 
-Note that all interaction with a `static mut` is unsafe, both reading and
-writing. Dealing with global mutable state requires a great deal of care.
+Обратите внимание, что любое взаимодействие с `static mut` небезопасно, как
+чтение, так и запись. Работа с изменяемым глобальным состоянием требует
+значительно большей осторожности.
 
-# Foreign calling conventions
+# Соглашение о вызове внешних функций
 
-Most foreign code exposes a C ABI, and Rust uses the platform's C calling convention by default when
-calling foreign functions. Some foreign functions, most notably the Windows API, use other calling
-conventions. Rust provides a way to tell the compiler which convention to use:
+Большинство внешнего кода предоставляет C ABI (Двоичный Интерфейс Приложений). И
+Rust при вызове внешних функций по умолчанию использует C соглашение о вызове
+для данной платформы. Но некоторые внешние функции, в первую очередь Windows
+API, используют другое соглашение о вызове. Rust обеспечивает способ указать
+компилятору, какое именно соглашение использовать:
 
 ```
 # #![feature(libc)]
@@ -452,8 +504,8 @@ extern "stdcall" {
 # fn main() { }
 ```
 
-This applies to the entire `extern` block. The list of supported ABI constraints
-are:
+Это указание относится ко всему блоку `extern`. Список поддерживаемых ABI
+ограничивается следующими:
 
 * `stdcall`
 * `aapcs`
@@ -465,20 +517,22 @@ are:
 * `C`
 * `win64`
 
-Most of the abis in this list are self-explanatory, but the `system` abi may
-seem a little odd. This constraint selects whatever the appropriate ABI is for
-interoperating with the target's libraries. For example, on win32 with a x86
-architecture, this means that the abi used would be `stdcall`. On x86_64,
-however, windows uses the `C` calling convention, so `C` would be used. This
-means that in our previous example, we could have used `extern "system" { ... }`
-to define a block for all windows systems, not just x86 ones.
+Большинство ABI в этом списке не требуют пояснений, но ABI `system` может
+показаться немного странным. Он выбирает такое ABI, которое подходит (уместно)
+для взаимодействия с целевыми библиотеками. Например, на платформе win32 с
+архитектурой x86, это означает, что будет использован `stdcall` ABI. Однако, на
+windows x86_64 используется `C` соглашение о вызовах, поэтому в этом случае
+будет использован `C` ABI. Это означает, что в нашем предыдущем примере мы могли
+бы использовать `extern "system" { ... }`, чтобы определить блок для всех
+windows систем, а не только для x86.
 
-# Interoperability with foreign code
+# Взаимодействие с внешним кодом
 
-Rust guarantees that the layout of a `struct` is compatible with the platform's
-representation in C only if the `#[repr(C)]` attribute is applied to it.
-`#[repr(C, packed)]` can be used to lay out struct members without padding.
-`#[repr(C)]` can also be applied to an enum.
+Rust гарантирует, что cхема расположения для `struct` совместима с
+представлением платформы в C, только в том случае, если к ней применяется
+атрибут `#[repr(C)]`. Атрибут `#[repr(C, packed)]` может быть использован для
+схемы расположения частей структуры без выравнивания (заполнения). Атрибут
+`#[repr(C)]` также может быть применен и к перечислениям.
 
 Rust's owned boxes (`Box<T>`) use non-nullable pointers as handles which point
 to the contained object. However, they should not be manually created because
@@ -487,18 +541,29 @@ non-nullable pointers directly to the type.  However, breaking the borrow
 checking or mutability rules is not guaranteed to be safe, so prefer using raw
 pointers (`*`) if that's needed because the compiler can't make as many
 assumptions about them.
+Боксы с правом владения в Rust (`Box<T>`) используют ненулевые (non-nullable)
+указатели как ручки, которые указывают на содержащийся в них объект. Тем не
+менее, они не должны быть созданы вручную, так как они находятся под управлением
+внутренних средств выделения памяти. Ссылки можно смело считать ненулевыми
+указателями непосредствено на тип. Однако нарушение проверка одолжить или правил
+изменчивости не гарантирует безопасность, поэтому предпочитают использовать
+сырые указатели (`*`), если это необходимо, потому что компилятор не может
+сделать так много предположений о них.
 
-Vectors and strings share the same basic memory layout, and utilities are
-available in the `vec` and `str` modules for working with C APIs. However,
-strings are not terminated with `\0`. If you need a NUL-terminated string for
-interoperability with C, you should use the `CString` type in the `std::ffi`
-module.
+Векторы и строки совместно используют одну и ту же базовую cхему расположения
+памяти и утилиты, доступные в модулях `vec` и `str`, для работы с C API. Тем не
+менее, строки не завершаются нулевым байтом, `\0`. Если вам нужна строка,
+завершающаяся нулевым байтом для совместимости с C, вы должны использовать тип
+`CString` из модуля `std::ffi`.
 
 The standard library includes type aliases and function definitions for the C
 standard library in the `libc` module, and Rust links against `libc` and `libm`
 by default.
+Стандартная библиотека включает в себя псевдонимы типов и определения функций
+для стандартной библиотеки C в модуле `libc`, и Rust линкует `libc` и `libm` по
+умолчанию.
 
-# The "nullable pointer optimization"
+# Оптимизация небезопасных указателей (The "nullable pointer optimization")
 
 Certain types are defined to not be `null`. This includes references (`&T`,
 `&mut T`), boxes (`Box<T>`), and function pointers (`extern "abi" fn()`).
@@ -510,11 +575,21 @@ with one of the non-nullable types, it is represented as a single pointer,
 and the non-data variant is represented as the null pointer. So
 `Option<extern "C" fn(c_int) -> c_int>` is how one represents a nullable
 function pointer using the C ABI.
+Некоторые типы по определению не могут быть `null`. Они включают в себя ссылки
+(`&T`, `&mut T`), боксы (`Box<T>`), указатели на функции (`extern "abi" fn()`).
+Указатели же, которые могут быть `null`, часто используются при взаимодействии с
+С. Как частный случай, в общем `enum`, который содержит ровно два варианта, один
+из которых не содержит данных, а другой содержит одно поле, имеет право на
+"оптимизацию ненулируемого указателя". При таких перечисление экземпляра с
+одним из ненулируемых типов, он представлен в виде одного указателя, и вариант
+без данных представляется как пустой указатель. Так `Option<extern "C" fn(c_int)
+-> c_int>` как один представляет собой указатель обнуляемого функции с
+использованием C ABI.
 
-# Calling Rust code from C
+# Вызов Rust кода из C кода
 
-You may wish to compile Rust code in a way so that it can be called from C. This is
-fairly easy, but requires a few things:
+Вы можете скомпилировать Rust код таким образом, чтобы он мог быть вызван из C
+кода. Это довольно легко, но требует нескольких вещей:
 
 ```
 #[no_mangle]
@@ -524,7 +599,7 @@ pub extern fn hello_rust() -> *const u8 {
 # fn main() {}
 ```
 
-The `extern` makes this function adhere to the C calling convention, as
-discussed above in "[Foreign Calling
-Conventions](ffi.html#foreign-calling-conventions)". The `no_mangle`
-attribute turns off Rust's name mangling, so that it is easier to link to.
+`extern` указывает, что эта функцию придерживается C соглашения о вызове, как
+описано выше в разделе "[Соглашение о вызове внешних функций](ffi.html#foreign-calling-conventions)".
+Атрибут `no_mangle` выключает модификацию имени, применяемую в Rust, для того
+чтобы было легче линковать.
