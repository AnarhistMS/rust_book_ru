diff --git a/rust/master:src/doc/trpl/primitive-types.md b/HEAD:primitive-types.md
index 811080c..80a49ec 100644
--- a/rust/master:src/doc/trpl/primitive-types.md
+++ b/HEAD:primitive-types.md
@@ -1,284 +1,294 @@
-% Primitive Types
+% –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã
 
-The Rust language has a number of types that are considered ‚Äòprimitive‚Äô. This
-means that they‚Äôre built-in to the language. Rust is structured in such a way
-that the standard library also provides a number of useful types built on top
-of these ones, as well, but these are the most primitive.
+–Ø–∑—ã–∫ Rust –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è ‚Äò–ø—Ä–æ—Å—Ç—ã–º–∏‚Äò (‚Äò–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–º–∏‚Äò).
+–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ —è–∑—ã–∫. Rust —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ
+—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä—è–¥ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –Ω–∞
+–±–∞–∑–µ —ç—Ç–∏—Ö –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤, –Ω–æ —ç—Ç–æ —Å–∞–º—ã–µ –ø—Ä–æ—Å—Ç—ã–µ.
 
-# Booleans
+# –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã (`bool`)
 
-Rust has a built in boolean type, named `bool`. It has two values, `true` and `false`:
+Rust –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø, –Ω–∞–∑—ã–≤–∞–µ–º—ã–π `bool`. –û–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–≤–∞
+–∑–Ω–∞—á–µ–Ω–∏—è, `true` –∏ `false` :
 
 ```rust
 let x = true;
 
 let y: bool = false;
 ```
 
-A common use of booleans is in [`if` statements][if].
+–õ–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ [–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ `if`][if].
 
 [if]: if.html
 
-You can find more documentation for `bool`s [in the standard library
-documentation][bool].
+–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–∏–ø–∞—Ö (`bool`) –≤ [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫
+—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ][bool].
 
 [bool]: ../std/primitive.bool.html
 
-# `char`
+# –°–∏–º–≤–æ–ª—ã (`char`)
 
-The `char` type represents a single Unicode scalar value. You can create `char`s
-with a single tick: (`'`)
+–¢–∏–ø `char` –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–∫–∞–ª—è—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Unicode. –í—ã –º–æ–∂–µ—Ç–µ
+—Å–æ–∑–¥–∞—Ç—å `char` —Å –ø–æ–º–æ—â—å—é –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫: (`'`)
 
 ```rust
 let x = 'x';
 let two_hearts = 'üíï';
 ```
 
-Unlike some other languages, this means that Rust‚Äôs `char` is not a single byte,
-but four.
+–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤, `char` –≤ Rust
+–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ –æ–¥–Ω–∏–º –±–∞–π—Ç–æ–º, –∞ —á–µ—Ç—ã—Ä–º—è.
 
-You can find more documentation for `char`s [in the standard library
-documentation][char].
+–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–∞—Ö (`char`) –≤ [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫
+—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ][char].
 
 [char]: ../std/primitive.char.html
 
-# Numeric types
+# –ß–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
 
-Rust has a variety of numeric types in a few categories: signed and unsigned,
-fixed and variable, floating-point and integer.
+Rust –∏–º–µ–µ—Ç —Ü–µ–ª—ã–π —Ä—è–¥ —á–∏—Å–ª–æ–≤—ã—Ö —Ç–∏–ø–æ–≤, –ø–æ–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –∑–Ω–∞–∫–æ–≤—ã–µ
+–∏ –±–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏
+—Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.
 
-These types consist of two parts: the category, and the size. For example,
-`u16` is an unsigned type with sixteen bits of size. More bits lets you have
-bigger numbers.
+–≠—Ç–∏ —Ç–∏–ø—ã —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ä–∞–∑–º–µ—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä, `u16`
+–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–∏–ø –±–µ–∑ –∑–Ω–∞–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å –±–∏—Ç. –ë–æ–ª—å—à–µ–µ
+–∫–æ–ª–∏—á–µ—Ç—Å–≤–æ –±–∏—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞.
 
-If a number literal has nothing to cause its type to be inferred, it defaults:
+–ï—Å–ª–∏ –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø, —Ç–æ –æ–Ω –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
 
 ```rust
 let x = 42; // x has type i32
 
 let y = 1.0; // y has type f64
 ```
 
-Here‚Äôs a list of the different numeric types, with links to their documentation
-in the standard library:
+–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö —Ç–∏–ø–æ–≤, —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
+–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:
 
 * [i16](../std/primitive.i16.html)
 * [i32](../std/primitive.i32.html)
 * [i64](../std/primitive.i64.html)
 * [i8](../std/primitive.i8.html)
 * [u16](../std/primitive.u16.html)
 * [u32](../std/primitive.u32.html)
 * [u64](../std/primitive.u64.html)
 * [u8](../std/primitive.u8.html)
 * [isize](../std/primitive.isize.html)
 * [usize](../std/primitive.usize.html)
 * [f32](../std/primitive.f32.html)
 * [f64](../std/primitive.f64.html)
 
-Let‚Äôs go over them by category:
+–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
 
-## Signed and Unsigned
+## –ó–Ω–∞–∫–æ–≤—ã–µ –∏ –±–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ
 
-Integer types come in two varieties: signed and unsigned. To understand the
-difference, let‚Äôs consider a number with four bits of size. A signed, four-bit
-number would let you store numbers from `-8` to `+7`. Signed numbers use
-‚Äòtwo‚Äôs compliment representation‚Äô. An unsigned four bit number, since it does
-not need to store negatives, can store values from `0` to `+15`.
+–¶–µ–ª—ã–µ —Ç–∏–ø—ã –±—ã–≤–∞—é—Ç –¥–≤—É—Ö –≤–∏–¥–æ–≤: –∑–Ω–∞–∫–æ–≤—ã–µ –∏ –±–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ. –ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Ä–∞–∑–Ω–∏—Ü—É,
+–¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–º–µ—Ä–æ–º –≤ —á–µ—Ç—ã—Ä–µ –±–∏—Ç–∞. –ó–Ω–∞–∫–æ–≤—ã–µ —á–µ—Ç—ã—Ä–µ—Ö–±–∏—Ç–Ω—ã–µ —á–∏—Å–ª–∞,
+–ø–æ–∑–≤–æ–ª—è—é—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç `-8` –¥–æ `+7`. –ó–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç
+–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ‚Äô–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –¥–≤—É—Ö‚Äô. –ë–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ —á–µ—Ç—ã—Ä–µ—Ö–±–∏—Ç–Ω—ã–µ —á–∏—Å–ª–∞, –≤–≤–∏–¥—É —Ç–æ–≥–æ
+—á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–∑–≤–æ–ª—è—é—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç `0`
+–¥–æ `+15`.
 
-Unsigned types use a `u` for their category, and signed types use `i`. The `i`
-is for ‚Äòinteger‚Äô. So `u8` is an eight-bit unsigned number, and `i8` is an
-eight-bit signed number. 
+–ë–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ —Ç–∏–ø—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç `u` –¥–ª—è —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∞ –∑–Ω–∞–∫–æ–≤—ã–µ —Ç–∏–ø—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç
+`i`. `i` –æ–∑–Ω–∞—á–∞–µ—Ç ‚Äòinteger‚Äô. –¢–∞–∫ `u8` –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —á–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–∞ —Å
+—Ä–∞–∑–º–µ—Ä–æ–º –≤–æ—Å–µ–º—å –±–∏—Ç, –∞ `i8` –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —á–∏—Å–ª–æ —Å–æ –∑–Ω–∞–∫–æ–º —Å —Ä–∞–∑–º–µ—Ä–æ–º –≤–æ—Å–µ–º—å
+–±–∏—Ç.
 
-## Fixed size types
+## –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 
-Fixed size types have a specific number of bits in their representation. Valid
-bit sizes are `8`, `16`, `32`, and `64`. So, `u32` is an unsigned, 32-bit integer,
-and `i64` is a signed, 64-bit integer.
+–¢–∏–ø—ã —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏–º–µ—é—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–æ–≤ –≤
+—Å–≤–æ–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è `8`, `16`, `32`, `64`. –¢–∞–∫–∏–º
+–æ–±—Ä–∞–∑–æ–º, `u32` –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –∑–Ω–∞–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º 32 –±–∏—Ç–∞, –∞
+`i64` - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–æ –∑–Ω–∞–∫–æ–º —Å —Ä–∞–∑–º–µ—Ä–æ–º 64 –±–∏—Ç–∞.
 
-## Variable sized types
+## –ü–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 
-Rust also provides types whose size depends on the size of a pointer of the
-underlying machine. These types have ‚Äòsize‚Äô as the category, and come in signed
-and unsigned varieties. This makes for two types: `isize` and `usize`.
+Rust —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø—ã, —Ä–∞–∑–º–µ—Ä –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞
+—Ü–µ–ª–µ–≤–æ–π –º–∞—à–∏–Ω–µ. –≠—Ç–∏ —Ç–∏–ø—ã –∏–º–µ—é—Ç ‚Äòsize‚Äô –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ —Ä–∞–∑–º–µ—Ä–∞, –∏
+–º–æ–≥—É—Ç –±—ã—Ç—å –∑–Ω–∞–∫–æ–≤—ã–º–∏ –∏–ª–∏ –±–µ–∑–∑–Ω–∞–∫–æ–≤—ã–º–∏. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞:
+`isize` –∏ `usize`.
 
-## Floating-point types
+## –° –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
 
-Rust also two floating point types: `f32` and `f64`. These correspond to 
-IEEE-754 single and double precision numbers.
+–í Rust —Ç–∞–∫–∂–µ –µ—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π: `f32` –∏ `f64`. –û–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç
+IEEE-754 —á–∏—Å–ª–∞–º —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –æ–¥–∏–Ω–∞—Ä–Ω–æ–π –∏ –¥–≤–æ–π–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
 
-# Arrays
+# –ú–∞—Å—Å–∏–≤—ã
 
-Like many programming languages, Rust has list types to represent a sequence of
-things. The most basic is the *array*, a fixed-size list of elements of the
-same type. By default, arrays are immutable.
+–í Rust, –∫–∞–∫ –∏ –≤–æ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å—Ç—å —Ç–∏–ø—ã-—Å–ø–∏—Å–∫–∏ –¥–ª—è
+–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –Ω–µ–∫–∏—Ö –≤–µ—â–µ–π. –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏–∑ –Ω–∏—Ö - —ç—Ç–æ
+*–º–∞—Å—Å–∏–≤*, —Ç–æ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, –∏–º–µ—é—â–∏–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
+—Ä–∞–∑–º–µ—Ä. –ú–∞—Å—Å–∏–≤—ã –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
 
 ```rust
 let a = [1, 2, 3]; // a: [i32; 3]
 let mut m = [1, 2, 3]; // m: [i32; 3]
 ```
 
-Arrays have type `[T; N]`. We‚Äôll talk about this `T` notation [in the generics
-section][generics]. The `N` is a compile-time constant, for the length of the
-array.
+–ú–∞—Å—Å–∏–≤—ã –∏–º–µ—é—Ç —Ç–∏–ø `[T; N]`. –û –∑–Ω–∞—á–µ–Ω–∏–∏ `T` –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ–º
+—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∂–µ–Ω–µ—Ä–∏–∫–∏. `N` - —ç—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏, –∑–∞–¥–∞—é—â–∞—è –¥–ª–∏–Ω—É
+–º–∞—Å—Å–∏–≤–∞.
 
-There‚Äôs a shorthand for initializing each element of an array to the same
-value. In this example, each element of `a` will be initialized to `0`:
+–î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º –µ—Å—Ç—å
+—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç `a` –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
+–∑–Ω–∞—á–µ–Ω–∏–µ–º `0`:
 
 ```rust
 let a = [0; 20]; // a: [i32; 20]
 ```
 
-You can get the number of elements in an array `a` with `a.len()`:
+–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ `a` —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ `a.len()`:
 
 ```rust
 let a = [1, 2, 3];
 
-println!("a has {} elements", a.len());
+println!("–ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ a: {}", a.len());
 ```
 
-You can access a particular element of an array with *subscript notation*:
+–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–º–æ—â—å—é *–∏–Ω–¥–µ–∫—Å–∞*:
 
 ```rust
 let names = ["Graydon", "Brian", "Niko"]; // names: [&str; 3]
 
-println!("The second name is: {}", names[1]);
+println!("–í—Ç–æ—Ä–æ–µ –∏–º—è: {}", names[1]);
 ```
 
-Subscripts start at zero, like in most programming languages, so the first name
-is `names[0]` and the second name is `names[1]`. The above example prints
-`The second name is: Brian`. If you try to use a subscript that is not in the
-array, you will get an error: array access is bounds-checked at run-time. Such
-errant access is the source of many bugs in other systems programming
-languages.
+–ò–Ω–¥–µ–∫—Å—ã –Ω—É–º–µ—Ä—É—é—Ç—Å—è —Å –Ω—É–ª—è, –∫–∞–∫ –∏ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É
+–º—ã –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–º—è —Å –ø–æ–º–æ—â—å—é `names[0]`, –∞ –≤—Ç–æ—Ä–æ–µ - —Å –ø–æ–º–æ—â—å—é `names[1]`.
+–ü—Ä–∏–º–µ—Ä –≤—ã—à–µ –ø–µ—á–∞—Ç–∞–µ—Ç `–í—Ç–æ—Ä–æ–µ –∏–º—è: Brian`. –ï—Å–ª–∏ –≤—ã –ø–æ–ø—ã—Ç–∞–µ—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
+–∏–Ω–¥–µ–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –º–∞—Å—Å–∏–≤, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É: –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–∞—Å—Å–∏–≤–∞–º
+–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –¢–∞–∫–∞—è –æ—à–∏–±–æ—á–Ω–∞—è
+–ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - –∏—Å—Ç–æ—á–Ω–∏–∫ –º–Ω–æ–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ
+–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
 
-You can find more documentation for `array`s [in the standard library
-documentation][array].
+–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Å–∏–≤–∞—Ö (`array`) –≤ [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫
+—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ][array].
 
 [array]: ../std/primitive.array.html
 
-# Slices
+# –°—Ä–µ–∑—ã
 
-A ‚Äòslice‚Äô is a reference to (or ‚Äúview‚Äù into) another data structure. They are
-useful for allowing safe, efficient access to a portion of an array without
-copying. For example, you might want to reference just one line of a file read
-into memory. By nature, a slice is not created directly, but from an existing
-variable. Slices have a length, can be mutable or not, and in many ways behave
-like arrays:
+*–°—Ä–µ–∑* - —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ (–∏–ª–∏ "–ø—Ä–æ–µ–∫—Ü–∏—è" –≤) –º–∞—Å—Å–∏–≤. –û–Ω–∏ –ø–æ–ª–µ–∑–Ω—ã, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
+–æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Å—Ç–∏ –º–∞—Å—Å–∏–≤–∞ –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
+–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ—Å–ª–∞—Ç—å—Å—è –Ω–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ñ–∞–π–ª–∞, —Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
+–≤ –ø–∞–º—è—Ç—å. –ò–∑-–∑–∞ —Å–≤–æ–µ–π —Å—Å—ã–ª–æ—á–Ω–æ–π –ø—Ä–∏—Ä–æ–¥—ã, —Å—Ä–µ–∑—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–µ –Ω–∞–ø—Ä—è–º—É—é, –∞ –∏–∑
+—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –£ —Å—Ä–µ–∑–æ–≤ –µ—Å—Ç—å –¥–ª–∏–Ω–∞, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—è–µ–º—ã –∏–ª–∏ –Ω–µ—Ç,
+–∏ –≤–æ –º–Ω–æ–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –æ–Ω–∏ –≤–µ–¥—É—Ç —Å–µ–±—è –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã:
 
 ```rust
 let a = [0, 1, 2, 3, 4];
-let middle = &a[1..4]; // A slice of a: just the elements 1, 2, and 3
+let middle = &a[1..4]; // –°—Ä–µ–∑ a: —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã 1, 2, –∏ 3
 ```
 
-Slices have type `&[T]`. We‚Äôll talk about that `T` when we cover
-[generics][generics].
+–°—Ä–µ–∑—ã –∏–º–µ—é—Ç —Ç–∏–ø `&[T]`. –û –∑–Ω–∞—á–µ–Ω–∏–∏ `T` –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ–º
+—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å [–¥–∂–µ–Ω–µ—Ä–∏–∫–∏][generics].
 
 [generics]: generics.html
 
-You can find more documentation for `slices`s [in the standard library
-documentation][slice].
+–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–µ–∑–∞—Ö (`slice`) –≤ [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫
+—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ][slice].
 
 [slice]: ../std/primitive.slice.html
 
 # `str`
 
-Rust‚Äôs `str` type is the most primitive string type. As an [unsized type][dst],
-it‚Äôs not very useful by itself, but becomes useful when placed behind a reference,
-like [`&str`][strings]. As such, we‚Äôll just leave it at that.
+–¢–∏–ø `str` –≤ Rust —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º —Ç–∏–ø–æ–º —Å—Ç—Ä–æ–∫. –≠—Ç–æ [–±–µ–∑—Ä–∞–∑–º–µ—Ä–Ω—ã–π
+—Ç–∏–ø][dst], –ø–æ—ç—Ç–æ–º—É —Å–∞–º –ø–æ —Å–µ–±–µ –æ–Ω –Ω–µ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω, –Ω–æ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–ª–µ–∑–Ω—ã–º
+–ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏, [`&str`][strings]. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º—ã –ø—Ä–æ—Å—Ç–æ
+–æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –Ω–∞ —ç—Ç–æ–º.
 
 [dst]: unsized-types.html
 [strings]: strings.html
 
-You can find more documentation for `str` [in the standard library
-documentation][str].
+–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–æ–∫–∞—Ö (`str`) –≤ [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫
+—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ][str].
 
 [str]: ../std/primitive.str.html
 
-# Tuples
+# –ö–æ—Ä—Ç–µ–∂–∏
 
-A tuple is an ordered list of fixed size. Like this:
+–ö–æ—Ä—Ç–µ–∂ - —ç—Ç–æ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –í—Ä–æ–¥–µ —Ç–∞–∫–æ–≥–æ:
 
 ```rust
-let x = (1, "hello");
+let x = (1, "–ø—Ä–∏–≤–µ—Ç");
 ```
 
-The parentheses and commas form this two-length tuple. Here‚Äôs the same code, but
-with the type annotated:
+–≠—Ç–æ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é —Å–∫–æ–±–æ–∫ –∏ –∑–∞–ø—è—Ç–æ–π –º–µ–∂–¥—É
+—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏. –í–æ—Ç —Ç–æ—Ç –∂–µ –∫–æ–¥, –Ω–æ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ —Ç–∏–ø–æ–≤:
 
 ```rust
-let x: (i32, &str) = (1, "hello");
+let x: (i32, &str) = (1, "–ø—Ä–∏–≤–µ—Ç");
 ```
 
-As you can see, the type of a tuple looks just like the tuple, but with each
-position having a type name rather than the value. Careful readers will also
-note that tuples are heterogeneous: we have an `i32` and a `&str` in this tuple.
-In systems programming languages, strings are a bit more complex than in other
-languages. For now, just read `&str` as a *string slice*, and we‚Äôll learn more
-soon.
+–ö–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å, —Ç–∏–ø –∫–æ—Ä—Ç–µ–∂–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å–∞–º –∫–æ—Ä—Ç–µ–∂, –Ω–æ –º–µ—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
+–∑–∞–Ω–∏–º–∞—é—Ç —Ç–∏–ø—ã. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Ç–∞—Ç–µ–ª–∏ —Ç–∞–∫–∂–µ –æ—Ç–º–µ—Ç—è—Ç, —á—Ç–æ –∫–æ—Ä—Ç–µ–∂–∏ –≥–µ—Ç–µ—Ä–æ–≥–µ–Ω–Ω—ã: –≤
+—ç—Ç–æ–º –∫–æ—Ä—Ç–µ–∂–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ `i32` –∏ `&str`. –í —è–∑—ã–∫–∞—Ö
+—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã, —á–µ–º –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö.
+–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç—å `&str` –∫–∞–∫ *—Å—Ä–µ–∑ —Å—Ç—Ä–æ–∫–∏*. –ú—ã –≤—Å–∫–æ—Ä–µ —É–∑–Ω–∞–µ–º –æ–± —ç—Ç–æ–º –±–æ–ª—å—à–µ.
 
-You can assign one tuple into another, if they have the same contained types
-and [arity]. Tuples have the same arity when they have the same length.
+–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –æ–¥–∏–Ω –∫–æ—Ä—Ç–µ–∂ –¥—Ä—É–≥–æ–º—É, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
+—Ç–∏–ø–æ–≤ –∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é [–∞—Ä–Ω–æ—Å—Ç—å][arity]. –ê—Ä–Ω–æ—Å—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤–∞, –∫–æ–≥–¥–∞ –∏—Ö
+–¥–ª–∏–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.
 
 [arity]: glossary.html#arity
 
 ```rust
 let mut x = (1, 2); // x: (i32, i32)
 let y = (2, 3); // y: (i32, i32)
 
 x = y;
 ```
 
-You can access the fields in a tuple through a *destructuring let*. Here‚Äôs
-an example:
+–î–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º –∫–æ—Ä—Ç–µ–∂–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å –ø–æ–º–æ—â—å—é *–¥–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É—é—â–µ–≥–æ let*. –í–æ—Ç
+–ø—Ä–∏–º–µ—Ä:
 
 ```rust
 let (x, y, z) = (1, 2, 3);
 
-println!("x is {}", x);
+println!("x —ç—Ç–æ {}", x);
 ```
 
-Remember [before][let] when I said the left-hand side of a `let` statement was more
-powerful than just assigning a binding? Here we are. We can put a pattern on
-the left-hand side of the `let`, and if it matches up to the right-hand side,
-we can assign multiple bindings at once. In this case, `let` "destructures,"
-or "breaks up," the tuple, and assigns the bits to three bindings.
+–ü–æ–º–Ω–∏—Ç–µ, —è [–≥–æ–≤–æ—Ä–∏–ª][let], —á—Ç–æ –ª–µ–≤–∞—è —á–∞—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ `let` –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–∞, —á–µ–º
+–ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏? –û–± —ç—Ç–æ–º —è –∏ –≥–æ–≤–æ—Ä–∏–ª. –ú—ã –º–æ–∂–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–µ–≤–∞ –æ—Ç `let`
+–æ–±—Ä–∞–∑–µ—Ü, –∏, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–ø—Ä–∞–≤–∞, –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –∏–º—ë–Ω
+—Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, `let` "–¥–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç" –∏–ª–∏
+"—Ä–∞–∑–±–∏–≤–∞–µ—Ç" –∫–æ—Ä—Ç–µ–∂, –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –µ–≥–æ —á–∞—Å—Ç–∏ —Ç—Ä—ë–º –∏–º–µ–Ω–∞–º.
 
 [let]: variable-bindings.html
 
-This pattern is very powerful, and we‚Äôll see it repeated more later.
+–≠—Ç–æ –æ—á–µ–Ω—å —É–¥–æ–±–Ω—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏ –º—ã –µ—â—ë –Ω–µ —Ä–∞–∑ —É–≤–∏–¥–∏–º –µ–≥–æ.
 
-## Tuple Indexing
+## –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∫–æ—Ä—Ç–µ–∂–µ–π
 
-You can also access fields of a tuple with indexing syntax:
+–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º –∫–æ—Ä—Ç–µ–∂–∞ —Å –ø–æ–º–æ—â—å—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:
 
 
 ```rust
 let tuple = (1, 2, 3);
 
 let x = tuple.0;
 let y = tuple.1;
 let z = tuple.2;
 
 println!("x is {}", x);
 ```
 
-Like array indexing, it starts at zero, but unlike array indexing, it uses a
-`.`, rather than `[]`s.
+–ö–∞–∫ –∏ –≤ —Å–ª—É—á–∞–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤, –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –Ω—É–ª—è, –Ω–æ, –≤ –æ—Ç–ª–∏—á–∞–µ –æ—Ç
+–º–∞—Å—Å–∏–≤–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `.`, –∞ –Ω–µ `[]`.
 
-You can find more documentation for tuples [in the standard library
-documentation][tuple].
+–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä—Ç–µ–∂–∞—Ö (`tuple`) –≤ [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫
+—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ][tuple].
 
 [tuple]: ../std/primitive.tuple.html
 
-# Functions
+# –§—É–Ω–∫—Ü–∏–∏
 
-Functions also have a type! They look like this:
+–§—É–Ω–∫—Ü–∏–∏ —Ç–æ–∂–µ –∏–º–µ—é—Ç —Ç–∏–ø! –≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 
 ```
 fn foo(x: i32) -> i32 { x }
 
 let x: fn(i32) -> i32 = foo;
 ```
 
-In this case, `x` is a ‚Äòfunction pointer‚Äô to a function that takes an `i32` and
-returns an `i32`.
+–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ `x` - ‚Äò—ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é‚Äò, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ
+–∞—Ä–≥—É–º–µ–Ω—Ç–∞ `i32` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `i32`.
