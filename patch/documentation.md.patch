diff --git a/rust/master:src/doc/trpl/documentation.md b/fix_current_version:documentation.md
index 06071a8..6b610a0 100644
--- a/rust/master:src/doc/trpl/documentation.md
+++ b/fix_current_version:documentation.md
@@ -1,21 +1,21 @@
-% Documentation
+% Документация
 
-Documentation is an important part of any software project, and it's
-first-class in Rust. Let's talk about the tooling Rust gives you to
-document your project.
+Документация является важной частью любого программного проекта, и она
+первоклассная в Rust. Давайте поговорим об инструментах Rust, предназначенных
+для создания документации к проекту.
 
-## About `rustdoc`
+## О `rustdoc`
 
-The Rust distribution includes a tool, `rustdoc`, that generates documentation.
-`rustdoc` is also used by Cargo through `cargo doc`.
+Дистрибутив Rust включает в себя инструмент, `rustdoc`, который генерирует
+документацию. `rustdoc` также используется Cargo через `cargo doc`.
 
-Documentation can be generated in two ways: from source code, and from
-standalone Markdown files.
+Документация может быть сгенерирована двумя методами: из исходного кода, и из
+автономных Markdown файлов.
 
-## Documenting source code
+## Документирование исходного кода
 
-The primary way of documenting a Rust project is through annotating the source
-code. You can use documentation comments for this purpose:
+Основной способ документирования проекта на Rust заключается в комментировании
+исходного кода. Для этой цели вы можете использовать комментарии документации:
 
 ```rust,ignore
 /// Constructs a new `Rc<T>`.
@@ -32,15 +32,15 @@ pub fn new(value: T) -> Rc<T> {
 }
 ```
 
-This code generates documentation that looks [like this][rc-new]. I've left the
-implementation out, with a regular comment in its place. That's the first thing
-to notice about this annotation: it uses `///`, instead of `//`. The triple slash
-indicates a documentation comment.
+Этот код генерирует документацию, которая выглядит [так][rc-new]. В приведенном
+коде реализация метода была заменена на обычный комментарий. Первое, на что
+следует обратить внимание в этом примере: используется `///`, а не `//`. Тройной
+символ `/` указывает, что это комментарий документации.
 
-Documentation comments are written in Markdown.
+Комментарии документации написаны на Markdown.
 
-Rust keeps track of these comments, and uses them when generating
-documentation. This is important when documenting things like enums:
+Rust отслеживает такие комментарии, и использует их при генерировании
+документации. Что важно при документировании таких вещей, как перечисления:
 
 ```
 /// The `Option` type. See [the module level documentation](../) for more.
@@ -52,7 +52,7 @@ enum Option<T> {
 }
 ```
 
-The above works, but this does not:
+Код, приведенный выше работает, а ниже - не работает:
 
 ```rust,ignore
 /// The `Option` type. See [the module level documentation](../) for more.
@@ -62,7 +62,7 @@ enum Option<T> {
 }
 ```
 
-You'll get an error:
+Вы получите ошибку:
 
 ```text
 hello.rs:4:1: 4:2 error: expected ident, found `}`
@@ -70,23 +70,25 @@ hello.rs:4 }
            ^
 ```
 
-This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is
-correct: documentation comments apply to the thing after them, and there's no
-thing after that last comment.
+Эта досадная [ошибка](https://github.com/rust-lang/rust/issues/22547)
+заключается в следующем: комментарии документации распространяются на элементы,
+расположенные за ними, а в данном примере нет элемента, расположенного после
+последнего комментария.
 
 [rc-new]: http://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.new
 
-### Writing documentation comments
+### Написание комментариев документации
 
-Anyway, let's cover each part of this comment in detail:
+Давайте рассмотрим каждую часть приведенного комментария в деталях:
 
 ```
 /// Constructs a new `Rc<T>`.
 # fn foo() {}
 ```
 
-The first line of a documentation comment should be a short summary of its
-functionality. One sentence. Just the basics. High level.
+Первая строка комментария документации должна представлять из себя краткую
+информацию о функциональности. Одно предложение. Только самое основное.
+Высокоуровневое.
 
 ```
 ///
@@ -96,47 +98,50 @@ functionality. One sentence. Just the basics. High level.
 # fn foo() {}
 ```
 
-Our original example had just a summary line, but if we had more things to say,
-we could have added more explanation in a new paragraph.
+Наш исходный пример включал только строку с краткой информацией, но если бы у
+нас было больше информации, о которой следует сказать, мы могли бы добавить эту
+информацию в новом параграфе.
 
-#### Special sections
+#### Специальные разделы
 
 ```
 /// # Examples
 # fn foo() {}
 ```
 
-Next, are special sections. These are indicated with a header, `#`. There
-are three kinds of headers that are commonly used. They aren't special syntax,
-just convention, for now.
+Далее идут специальные разделы. Они обозначены с заголовком, который начинается
+с `#`. Существуют три вида заголовков, которые обычно используются. Они не
+являются каким-либо специальным синтаксисом, на данный момент это просто
+соглашение.
 
 ```
 /// # Panics
 # fn foo() {}
 ```
 
-Unrecoverable misuses of a function (i.e. programming errors) in Rust are
-usually indicated by panics, which kill the whole current thread at the very
-least. If your function has a non-trivial contract like this, that is
-detected/enforced by panics, documenting it is very important.
+Невыявляемые случаи неправильного использования функции (так называемые ошибки
+программирования) в Rust как правило вызывают панику, которая, в крайнем случае,
+убивает весь текущий поток (thread). Если ваша функция имеет нетривиальный
+контракт (поведение), другими словами, обнаруживает/создает панику, то очень
+важно задокументировать это.
 
 ```
 /// # Failures
 # fn foo() {}
 ```
 
-If your function or method returns a `Result<T, E>`, then describing the
-conditions under which it returns `Err(E)` is a nice thing to do. This is
-slightly less important than `Panics`, because failure is encoded into the type
-system, but it's still a good thing to do.
+Если ваша функция или метод возвращает `Result<T, E>`, то было бы правильно
+описать условия, при которых она возвращает `Err(E)`. Это чуть менее важно, чем
+описание `Panics`, потому как неудача кодируется в системе типа, но это не
+значит что стоит пренебрегать этим.
 
 ```
 /// # Safety
 # fn foo() {}
 ```
 
-If your function is `unsafe`, you should explain which invariants the caller is
-responsible for upholding.
+Если ваша функция является `unsafe`, необходимо пояснить, какие инварианты
+вызова должны поддерживаться.
 
 ```
 /// # Examples
@@ -149,10 +154,10 @@ responsible for upholding.
 # fn foo() {}
 ```
 
-Third, `Examples`. Include one or more examples of using your function or
-method, and your users will love you for it. These examples go inside of
-code block annotations, which we'll talk about in a moment, and can have
-more than one section:
+Раздел `Examples`. Включите в этот раздел один или несколько примеров
+использования функции или метода, и ваши пользователи будут вам благодарны за
+это. Примеры должны размещаться внутри блока кода, о чем мы сейчас и будем
+говорить, и могут иметь более одного раздела:
 
 ```
 /// # Examples
@@ -173,11 +178,11 @@ more than one section:
 # fn foo() {}
 ```
 
-Let's discuss the details of these code blocks.
+Давайте детально обсудим блоки кода.
 
-#### Code block annotations
+#### Блок кода
 
-To write some Rust code in a comment, use the triple graves:
+Чтобы написать код на Rust в комментарии, используйте символы ```:
 
 ```
 /// ```
@@ -186,7 +191,8 @@ To write some Rust code in a comment, use the triple graves:
 # fn foo() {}
 ```
 
-If you want something that's not Rust code, you can add an annotation:
+Если вы хотите написать код на любом другом языке (не на Rust), вы можете
+добавить аннотацию:
 
 ```
 /// ```c
@@ -195,18 +201,20 @@ If you want something that's not Rust code, you can add an annotation:
 # fn foo() {}
 ```
 
-This will highlight according to whatever language you're showing off.
-If you're just showing plain text, choose `text`.
+Это позволит использовать подсветку синтаксиса, соответствующую тому языку,
+который был указан в аннотации. Если же это простой текст, то в аннотации
+указывается `text`.
 
-It's important to choose the correct annotation here, because `rustdoc` uses it
-in an interesting way: It can be used to actually test your examples, so that
-they don't get out of date. If you have some C code but `rustdoc` thinks it's
-Rust because you left off the annotation, `rustdoc` will complain when trying to
-generate the documentation.
+Важно выбрать правильную аннотацию, потому что `rustdoc` использует ее
+интересным способом: Rust может выполнять проверку работоспособности примеров на
+момент запуска, чтобы они не устаревали. Предположим у вас есть код на C. Если
+вы опустите аннотацию, указывающую, что это код на C, то `rustdoc` будет думать,
+что это код на Rust, поэтому `rustdoc` будет жаловаться при попытке создания
+документации.
 
-## Documentation as tests
+## Тесты в документации
 
-Let's discuss our sample example documentation:
+Давайте обсудим наш пример документации:
 
 ```
 /// ```
@@ -215,9 +223,9 @@ Let's discuss our sample example documentation:
 # fn foo() {}
 ```
 
-You'll notice that you don't need a `fn main()` or anything here. `rustdoc` will
-automatically add a main() wrapper around your code, and in the right place.
-For example:
+Заметьте, что здесь нет нужды в `fn main()` или чем-нибудь подобном. `rustdoc`
+автоматически добавит main() обертку вокруг вашего кода в нужном месте.
+Например:
 
 ```
 /// ```
@@ -228,7 +236,7 @@ For example:
 # fn foo() {}
 ```
 
-This will end up testing:
+В конечном итоге это будет тест:
 
 ```
 fn main() {
@@ -237,42 +245,45 @@ fn main() {
 }
 ```
 
-Here's the full algorithm rustdoc uses to postprocess examples:
+Вот полный алгоритм, который использует `rustdoc` для постобработки примеров:
 
-1. Any leading `#![foo]` attributes are left intact as crate attributes.
-2. Some common `allow` attributes are inserted, including
-   `unused_variables`, `unused_assignments`, `unused_mut`,
-   `unused_attributes`, and `dead_code`. Small examples often trigger
-   these lints.
-3. If the example does not contain `extern crate`, then `extern crate
-   <mycrate>;` is inserted.
-2. Finally, if the example does not contain `fn main`, the remainder of the
-   text is wrapped in `fn main() { your_code }`
+1. Любые ведущие (leading) атрибуты `#![foo]` остаются без изменений в качестве
+   атрибутов крейта.
+2. Будут вставлены некоторые общие `allow` атрибуты, в том числе:
+   `unused_variables`, `unused_assignments`, `unused_mut`, `unused_attributes`,
+   `dead_code`. Небольшие примеры часто вызывают эти lints.
+3. Если пример не содержит `extern crate`, то будет вставлено `extern crate
+   <mycrate>;`.
+4. Наконец, если пример не содержит `fn main`, то оставшаяся часть текста будет
+   обернута в `fn main() { your_code }`
 
 Sometimes, this isn't enough, though. For example, all of these code samples
 with `///` we've been talking about? The raw text:
+Хотя иногда этого не достаточно. Например, все эти примеры кода с `///` мы
+говорим о? Представленный ниже блок кода до обработки `rustdoc`, в виде простого
+текста:
 
 ```text
 /// Some documentation.
 # fn foo() {}
 ```
 
-looks different than the output:
+выглядит иначе, чем после обработки `rustdoc`, в виде вывода:
 
 ```
 /// Some documentation.
 # fn foo() {}
 ```
 
-Yes, that's right: you can add lines that start with `# `, and they will
-be hidden from the output, but will be used when compiling your code. You
-can use this to your advantage. In this case, documentation comments need
-to apply to some kind of function, so if I want to show you just a
-documentation comment, I need to add a little function definition below
-it. At the same time, it's just there to satisfy the compiler, so hiding
-it makes the example more clear. You can use this technique to explain
-longer examples in detail, while still preserving the testability of your
-documentation. For example, this code:
+Да, именно так: вы можете добавлять строки, которые начинаются с `# `, и они
+будут скрыты в выводе, но при этом будут использоваться во время компиляции
+кода. Вы можете использовать это в своих интересах. Если в комментарии
+документации необходимо обратиться к какой-то функции, то ниже нужно будет
+добавить определение этой функции. В то же время, это делается только для того,
+чтобы удовлетворить компилятор, поэтому сокрытие ненужных строк в выводе делает
+пример более ясным. Вы можете использовать эту технику, чтобы детально объяснять
+длинные примеры, сохраняя при этом тестируемость документации. Например, этот
+код:
 
 ```
 let x = 5;
@@ -280,9 +291,9 @@ let y = 6;
 println!("{}", x + y);
 ```
 
-Here's an explanation, rendered:
+Вот объяснение, которое будет сгенерировано:
 
-First, we set `x` to five:
+Сперва мы устанавливаем `x` равным пяти:
 
 ```
 let x = 5;
@@ -290,7 +301,7 @@ let x = 5;
 # println!("{}", x + y);
 ```
 
-Next, we set `y` to six:
+Затем мы устанавливаем `y` равным шести:
 
 ```
 # let x = 5;
@@ -298,7 +309,7 @@ let y = 6;
 # println!("{}", x + y);
 ```
 
-Finally, we print the sum of `x` and `y`:
+В конце мы печатаем сумму `x` и `y`:
 
 ```
 # let x = 5;
@@ -306,9 +317,9 @@ Finally, we print the sum of `x` and `y`:
 println!("{}", x + y);
 ```
 
-Here's the same explanation, in raw text:
+Вот то же самое объяснение, но в виде простого текста:
 
-> First, we set `x` to five:
+> Сперва мы устанавливаем `x` равным пяти:
 >
 > ```text
 > let x = 5;
@@ -316,7 +327,7 @@ Here's the same explanation, in raw text:
 > # println!("{}", x + y);
 > ```
 >
-> Next, we set `y` to six:
+> Затем мы устанавливаем `y` равным шести:
 >
 > ```text
 > # let x = 5;
@@ -324,7 +335,7 @@ Here's the same explanation, in raw text:
 > # println!("{}", x + y);
 > ```
 >
-> Finally, we print the sum of `x` and `y`:
+> В конце мы печатаем сумму `x` и `y`:
 >
 > ```text
 > # let x = 5;
@@ -332,13 +343,13 @@ Here's the same explanation, in raw text:
 > println!("{}", x + y);
 > ```
 
-By repeating all parts of the example, you can ensure that your example still
-compiles, while only showing the parts that are relevant to that part of your
-explanation.
+Повторяя все части примера, вы можете быть уверены, что ваш пример
+компилируется, а не просто отображает кусоки кода, которые имеют отношение к той
+или иной части вашего объяснения.
 
-### Documenting macros
+### Документирование макросов
 
-Here’s an example of documenting a macro:
+Вот пример документирования макроса:
 
 ```
 /// Panic with a given message unless an expression evaluates to true.
@@ -365,14 +376,15 @@ macro_rules! panic_unless {
 # fn main() {}
 ```
 
-You’ll note three things: we need to add our own `extern crate` line, so that
-we can add the `#[macro_use]` attribute. Second, we’ll need to add our own
-`main()` as well. Finally, a judicious use of `#` to comment out those two
-things, so they don’t show up in the output.
+В нем вы можете заметить, три вещи. Во-первых, мы должны собственноручно
+добавить строку с `extern crate`, для того, чтобы мы могли указать атрибут
+`#[macro_use]`. Во-вторых, мы также собственноручно должны добавить `main()`. И
+наконец, разумно будет использовать `#`, чтобы закомментировать все, что мы
+добавили в первых двух пунктах, что бы оно не отображалось в вводе.
 
-### Running documentation tests
+### Запуск тестов в документации
 
-To run the tests, either
+Для запуска тестов можно использовать одну из двух комманд
 
 ```bash
 $ rustdoc --test path/to/my/crate/root.rs
@@ -380,10 +392,10 @@ $ rustdoc --test path/to/my/crate/root.rs
 $ cargo test
 ```
 
-That's right, `cargo test` tests embedded documentation too.
+Все верно, `cargo test` также выполняет тесты, встроенные в документацию.
 
-There are a few more annotations that are useful to help `rustdoc` do the right
-thing when testing your code:
+Есть еще несколько аннотаций, которые являются полезными, помогающих `rustdoc`
+работать правильно (корректно) при тестировании код:
 
 ```
 /// ```ignore
@@ -392,10 +404,11 @@ thing when testing your code:
 # fn foo() {}
 ```
 
-The `ignore` directive tells Rust to ignore your code. This is almost never
-what you want, as it's the most generic. Instead, consider annotating it
-with `text` if it's not code, or using `#`s to get a working example that
-only shows the part you care about.
+Директива `ignore` указывает Rust, что код должен быть проигнорирован. Почти во
+всех случаях это не то, что вам нужно, так как эта директива носит очень общий
+характер. Вместо нее лучше использовать аннотацию `text`, если это не код, или
+`#`, чтобы получить рабочий пример, отображающий только ту часть, которая вам
+нужна.
 
 ```
 /// ```should_panic
@@ -404,8 +417,8 @@ only shows the part you care about.
 # fn foo() {}
 ```
 
-`should_panic` tells `rustdoc` that the code should compile correctly, but
-not actually pass as a test.
+Аннотация `should_panic` указывает `rustdoc`, что код должен компилироваться, но
+выполнение теста должно завершиться ошибкой.
 
 ```
 /// ```no_run
@@ -416,13 +429,16 @@ not actually pass as a test.
 # fn foo() {}
 ```
 
-The `no_run` attribute will compile your code, but not run it. This is
-important for examples such as "Here's how to start up a network service,"
-which you would want to make sure compile, but might run in an infinite loop!
+Атрибут `no_run` указывает, что что код должен компилироваться, но запускать его
+на выполнение не требуется. Это важно для таких примеров, которые должны успешно
+компилироваться, но которые выполняются в бесконечном цикле! Например: "Вот как
+запустить сетевой сервис".
 
-### Documenting modules
+### Документирование модулей
 
-Rust has another kind of doc comment, `//!`. This comment doesn't document the next item, but the enclosing item. In other words:
+Rust предоставляет еще один вид комментариев документации, `//!`. Этот
+комментарий относится не к следующему за ним элементу, а к элементу, который его
+включает. Другими словами:
 
 ```
 mod foo {
@@ -434,8 +450,9 @@ mod foo {
 }
 ```
 
-This is where you'll see `//!` used most often: for module documentation. If
-you have a module in `foo.rs`, you'll often open its code and see this:
+Приведенный пример демонстрирует наиболее распространенное использование `//!`:
+документирование модуля. Если же модуль расположен в файле `foo.rs`, то вы часто
+будете открывать его код и видеть это:
 
 ```
 //! A module for using `foo`s.
@@ -443,20 +460,21 @@ you have a module in `foo.rs`, you'll often open its code and see this:
 //! The `foo` module contains a lot of useful functionality blah blah blah
 ```
 
-### Documentation comment style
+### Стиль комментариев документации
 
-Check out [RFC 505][rfc505] for full conventions around the style and format of
-documentation.
+Изучите [RFC 505][rfc505] для получения полных сведений о соглашениях по стилю и
+формату документации.
 
 [rfc505]: https://github.com/rust-lang/rfcs/blob/master/text/0505-api-comment-conventions.md
 
-## Other documentation
+## Другая документация
 
-All of this behavior works in non-Rust source files too. Because comments
-are written in Markdown, they're often `.md` files.
+Все эти правила поведения также применимы и в отношении исходных файлов не на
+Rust. Так как комментарии пишутся на Markdown, то часто эти файлы имеют
+расширение `.md`.
 
-When you write documentation in Markdown files, you don't need to prefix
-the documentation with comments. For example:
+Когда вы пишете документацию в Markdown файлах, вам не нужно добавлять префикс
+комментария документации, `///`. Например:
 
 ```
 /// # Examples
@@ -469,7 +487,7 @@ the documentation with comments. For example:
 # fn foo() {}
 ```
 
-is just
+преобразуется в
 
 ~~~markdown
 # Examples
@@ -481,8 +499,8 @@ let five = Rc::new(5);
 ```
 ~~~
 
-when it's in a Markdown file. There is one wrinkle though: Markdown files need
-to have a title like this:
+когда он находится в Markdown файле. Однако есть один недостаток: Markdown файлы
+должны иметь заголовок наподобие этого:
 
 ```markdown
 % The title
@@ -490,11 +508,12 @@ to have a title like this:
 This is the example documentation.
 ```
 
-This `%` line needs to be the very first line of the file.
+Строка, начинающаяся с `%`, должна быть самой первой строкой файла.
 
-## `doc` attributes
+## Атрибуты `doc`
 
-At a deeper level, documentation comments are sugar for documentation attributes:
+На более глубоком уровне, комментарии документации - это синтаксический сахар
+для атрибутов документации:
 
 ```
 /// this
@@ -505,6 +524,7 @@ At a deeper level, documentation comments are sugar for documentation attributes
 ```
 
 are the same, as are these:
+такие же, как и эти:
 
 ```
 //! this
@@ -512,12 +532,13 @@ are the same, as are these:
 #![doc="/// this"]
 ```
 
-You won't often see this attribute used for writing documentation, but it
-can be useful when changing some options, or when writing a macro.
+Вы не часто будете видеть этот атрибут, используемый для написания документации,
+но он может быть полезен, когда изменения некоторых настроек, или при написании
+макроса.
 
-### Re-exports
+### Ре-экспорт
 
-`rustdoc` will show the documentation for a public re-export in both places:
+`rustdoc` будет показывать документацию для public реэкспорта в обоих местах:
 
 ```ignore
 extern crate foo;
@@ -525,11 +546,11 @@ extern crate foo;
 pub use foo::bar;
 ```
 
-This will create documentation for bar both inside the documentation for the
-crate `foo`, as well as the documentation for your crate. It will use the same
-documentation in both places.
+Это создаст документацию для `bar` как в документации для крейта `foo`, так и в
+документации к вашему крейту. Так что будет использована одна и та же
+документация в обоих местах.
 
-This behavior can be suppressed with `no_inline`:
+Такое поведение может быть подавлено с помощью `no_inline`:
 
 ```ignore
 extern crate foo;
@@ -538,10 +559,10 @@ extern crate foo;
 pub use foo::bar;
 ```
 
-### Controlling HTML
+### Управление HTML
 
-You can control a few aspects of the HTML that `rustdoc` generates through the
-`#![doc]` version of the attribute:
+Вы можете управлять некоторыми аспектами HTML, который генерируется `rustdoc`,
+через атрибут `#![doc]`:
 
 ```
 #![doc(html_logo_url = "http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png",
@@ -549,14 +570,17 @@ You can control a few aspects of the HTML that `rustdoc` generates through the
        html_root_url = "http://doc.rust-lang.org/")];
 ```
 
-This sets a few different options, with a logo, favicon, and a root URL.
+В этом примере устанавливается несколько различных опций: логотип, иконка и
+корневой URL.
 
-## Generation options
+## Опции генерации
 
-`rustdoc` also contains a few other options on the command line, for further customiziation:
+`rustdoc` также содержит несколько опций командной строки, для дальнейшей
+кастомизации:
 
-- `--html-in-header FILE`: includes the contents of FILE at the end of the
-  `<head>...</head>` section.
-- `--html-before-content FILE`: includes the contents of FILE directly after
-  `<body>`, before the rendered content (including the search bar).
-- `--html-after-content FILE`: includes the contents of FILE after all the rendered content.
+- `--html-in-header FILE`: включить содержание FILE в конце `<head>...</head>`
+  раздела.
+- `--html-before-content FILE`: включить содержание FILE сразу после `<body>`,
+  перед отображаемым содержимым (в том числе строки поиска).
+- `--html-after-content FILE`: включить содержание FILE после всего
+  отображаемого содержимого.
