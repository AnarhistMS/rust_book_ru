diff --git a/rust/master:src/doc/trpl/patterns.md b/master:patterns.md
index 4ebf696..374ca0e 100644
--- a/rust/master:src/doc/trpl/patterns.md
+++ b/master:patterns.md
@@ -1,11 +1,8 @@
-% Patterns
+% Шаблоны
 
-We've made use of patterns a few times in the guide: first with `let` bindings,
-then with `match` statements. Let's go on a whirlwind tour of all of the things
-patterns can do!
+Мы уже использовали шаблоны несколько раз в этом руководстве: сначала при рассмотрении оператора `let`, а затем при изучении конструкции `match`. Давайте коротко пробежимся по всем возможностям, которые можно реализовать с помощью шаблонов!
 
-A quick refresher: you can match against literals directly, and `_` acts as an
-*any* case:
+Быстро освежим в памяти: сопоставлять с образцами литералы можно либо напрямую, либо с помощью символа `_`, который означает *любой* случай:
 
 ```{rust}
 let x = 1;
@@ -18,7 +15,7 @@ match x {
 }
 ```
 
-You can match multiple patterns with `|`:
+Вы можете сопоставлять с несколькими шаблонами, используя `|`:
 
 ```{rust}
 let x = 1;
@@ -30,7 +27,7 @@ match x {
 }
 ```
 
-You can match a range of values with `...`:
+Вы можете сопоставлять с диапазоном значений, используя `...`:
 
 ```{rust}
 let x = 1;
@@ -41,10 +38,9 @@ match x {
 }
 ```
 
-Ranges are mostly used with integers and single characters.
+Диапазоны в основном используются с числами или одиночными символами.
 
-If you're matching multiple things, via a `|` or a `...`, you can bind
-the value to a name with `@`:
+Если вы используете множественное сопоставление, с помощью `|` или `...`, вы можете присвоить значение переменной с именем `@`:
 
 ```{rust}
 let x = 1;
@@ -55,8 +51,7 @@ match x {
 }
 ```
 
-If you're matching on an enum which has variants, you can use `..` to
-ignore the value and type in the variant:
+Если при сопоставлении вы используете перечисление, содержащее варианты, то вы можете указать `..`, чтобы проигнорировать значение и тип в варианте:
 
 ```{rust}
 enum OptionalInt {
@@ -72,7 +67,7 @@ match x {
 }
 ```
 
-You can introduce *match guards* with `if`:
+Вы можете ввести *ограничители шаблонов сопоставления* (*match guards*) с помощью `if`:
 
 ```{rust}
 enum OptionalInt {
@@ -89,8 +84,7 @@ match x {
 }
 ```
 
-If you're matching on a pointer, you can use the same syntax as you declared it
-with. First, `&`:
+Если вы сопоставляете с указателем, то вы можете использовать тот же синтаксис, что и при его объявлении. Во-первых, `&`:
 
 ```{rust}
 let x = &5;
@@ -100,11 +94,9 @@ match x {
 }
 ```
 
-Here, the `val` inside the `match` has type `i32`. In other words, the left-hand
-side of the pattern destructures the value. If we have `&5`, then in `&val`, `val`
-would be `5`.
+Здесь `val` внутри `match` имеет тип `i32`. Другими словами, в левой части шаблона сопоставления значение деструктурируется. Если `&val` соответствует `&5`, то `val` будет `5`.
 
-If you want to get a reference, use the `ref` keyword:
+Если же вы хотите получить ссылку, то используйте ключевое слово `ref`:
 
 ```{rust}
 let x = 5;
@@ -114,9 +106,7 @@ match x {
 }
 ```
 
-Here, the `r` inside the `match` has the type `&i32`. In other words, the `ref`
-keyword _creates_ a reference, for use in the pattern. If you need a mutable
-reference, `ref mut` will work in the same way:
+Здесь `r` внутри `match` имеет тип `&i32`. Другими словами, ключевое слово `ref` _создает_ ссылку, для использования в шаблоне. Если вам нужна изменяемая ссылка, то `ref mut` будет работать аналогичным образом:
 
 ```{rust}
 let mut x = 5;
@@ -126,7 +116,7 @@ match x {
 }
 ```
 
-If you have a struct, you can destructure it inside of a pattern:
+Если у вас есть структура, вы можете деструктурировать ее внутри шаблона:
 
 ```{rust}
 # #![allow(non_shorthand_field_patterns)]
@@ -142,7 +132,7 @@ match origin {
 }
 ```
 
-If we only care about some of the values, we don't have to give them all names:
+Если нам нужны значения только некоторых из полей структуры, то мы можем не присваивать им всем имена:
 
 ```{rust}
 # #![allow(non_shorthand_field_patterns)]
@@ -158,7 +148,7 @@ match origin {
 }
 ```
 
-You can do this kind of match on any member, not just the first:
+Вы можете сделать это для любого поля, а не только для первого:
 
 ```{rust}
 # #![allow(non_shorthand_field_patterns)]
@@ -174,7 +164,7 @@ match origin {
 }
 ```
 
-If you want to match against a slice or array, you can use `&`:
+Если вы хотите использовать сопоставление со срезом или массивом, то вы можете указать `&`:
 
 ```{rust}
 # #![feature(slice_patterns)]
@@ -188,8 +178,7 @@ fn main() {
 }
 ```
 
-Whew! That's a lot of different ways to match things, and they can all be
-mixed and matched, depending on what you're doing:
+Вот так! Существует много разных способов использования конструкции сопоставления с шаблоном, и все они могут быть смешаны и состыкованы, в зависимости от того, что вы хотите сделать:
 
 ```{rust,ignore}
 match x {
@@ -197,4 +186,4 @@ match x {
 }
 ```
 
-Patterns are very powerful.  Make good use of them.
+Шаблоны являются очень мощным инструментом. Их использование находит очень широкое применение.
