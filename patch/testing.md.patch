diff --git a/rust/master:src/doc/trpl/testing.md b/master:testing.md
index 8fb08e1..a43c05c 100644
--- a/rust/master:src/doc/trpl/testing.md
+++ b/master:testing.md
@@ -1,27 +1,22 @@
-% Testing
+% Тестирование
 
 > Program testing can be a very effective way to show the presence of bugs, but
 > it is hopelessly inadequate for showing their absence.
 >
 > Edsger W. Dijkstra, "The Humble Programmer" (1972)
 
-Let's talk about how to test Rust code. What we will not be talking about is
-the right way to test Rust code. There are many schools of thought regarding
-the right and wrong way to write tests. All of these approaches use the same
-basic tools, and so we'll show you the syntax for using them.
+Давайте поговорим о том, как тестировать Rust код. Мы не будем рассказывать о том, какой подход к тестированию Rust кода является правильным. Есть много подходов, каждый из которых имеет свое представление о правильном написании тестов. Но все эти подходы используют одни и те же основные инструменты, и мы покажем вам синтаксис их использования.
 
-# The `test` attribute
+# Тесты с аттрибутом `test`
 
-At its simplest, a test in Rust is a function that's annotated with the `test`
-attribute. Let's make a new project with Cargo called `adder`:
+В самом простом случае, тест в Rust - это функция, аннотированная с помощью атрибута `test`. Давайте создадим новый проект с помощью Cargo, который будет называться `adder`:
 
 ```bash
 $ cargo new adder
 $ cd adder
 ```
 
-Cargo will automatically generate a simple test when you make a new project.
-Here's the contents of `src/lib.rs`:
+При создании нового проекта, Cargo автоматически сгенерирует простой тест. Ниже представлено содержимое `src/lib.rs`:
 
 ```rust
 #[test]
@@ -29,9 +24,7 @@ fn it_works() {
 }
 ```
 
-Note the `#[test]`. This attribute indicates that this is a test function. It
-currently has no body. That's good enough to pass! We can run the tests with
-`cargo test`:
+Обратите внимание на `#[test]`. Этот аттрибут указывает, что это тестовая функция. Сейчас она не имеет тела функции. Но такого вида функции достаточно, чтобы успешно выполнить тест. Запуск тестов осуществляется командой `cargo test`.
 
 ```bash
 $ cargo test
@@ -50,29 +43,26 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-Cargo compiled and ran our tests. There are two sets of output here: one
-for the test we wrote, and another for documentation tests. We'll talk about
-those later. For now, see this line:
+Cargo компилирует и запускает ваши тесты. В результате мы получаем выходные данные, поделенные на два раздела: один содержит информацию о тесте, который мы написали, а другой - информацию о тестах из документации. Но об этом позже. А сейчас посмотрим на эту строку:
 
 ```text
 test it_works ... ok
 ```
 
-Note the `it_works`. This comes from the name of our function:
+Обратите внимание на `it_works`. Это название нашей функции:
 
 ```rust
 fn it_works() {
 # }
 ```
 
-We also get a summary line:
+Мы также получаем итоговую строку:
 
 ```text
 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-So why does our do-nothing test pass? Any test which doesn't `panic!` passes,
-and any test that does `panic!` fails. Let's make our test fail:
+Так почему же наш ничего не делающий тест был выполнен успешно? Любой тест, который не вызывает `panic!`, выполняется успешно, и любой тест, который вызывает `panic!`, выполняется неудачно. Давайте сделаем тест, который выполнится неудачно:
 
 ```rust
 #[test]
@@ -81,9 +71,7 @@ fn it_works() {
 }
 ```
 
-`assert!` is a macro provided by Rust which takes one argument: if the argument
-is `true`, nothing happens. If the argument is false, it `panic!`s. Let's run
-our tests again:
+`assert!` является макросом, который принимает один аргумент: если аргумент имеет значение `true`, то ничего не происходит; если аргумент является `false`, то вызывается `panic!`. Давайте запустим наши тесты снова:
 
 ```bash
 $ cargo test
@@ -108,28 +96,28 @@ test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured
 thread '<main>' panicked at 'Some tests failed', /home/steve/src/rust/src/libtest/lib.rs:247
 ```
 
-Rust indicates that our test failed:
+Rust сообщает, что наш тест выполнен неудачно:
 
 ```text
 test it_works ... FAILED
 ```
 
-And that's reflected in the summary line:
+Это же отражается в итоговой строке:
 
 ```text
 test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured
 ```
 
-We also get a non-zero status code:
+Мы также получаем ненулевой код состояния:
 
 ```bash
 $ echo $?
 101
 ```
 
-This is useful if you want to integrate `cargo test` into other tooling.
+Это полезно, если вы хотите интегрировать `cargo test` в сторонний инструмент.
 
-We can invert our test's failure with another attribute: `should_panic`:
+Мы можем обратить ожидаемый результат теста с помощью атрибута: `should_panic`:
 
 ```rust
 #[test]
@@ -139,7 +127,7 @@ fn it_works() {
 }
 ```
 
-This test will now succeed if we `panic!` and fail if we complete. Let's try it:
+Теперь этот тест будет выполнен успешно, если вызывается `panic!`, и неудачно, если `panic!` не вызывается. Давайте попробуем:
 
 ```bash
 $ cargo test
@@ -158,8 +146,7 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-Rust provides another macro, `assert_eq!`, that compares two arguments for
-equality:
+Rust предоставляет и другой макрос, `assert_eq!`, который проверяет эквивалентность двух артументов:
 
 ```rust
 #[test]
@@ -169,8 +156,7 @@ fn it_works() {
 }
 ```
 
-Does this test pass or fail? Because of the `should_panic` attribute, it
-passes:
+А теперь этот тест будет выполнен успешно или неудачно? Из-за атрибута `should_panic` он завершится успешно:
 
 ```bash
 $ cargo test
@@ -189,11 +175,7 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-`should_panic` tests can be fragile, as it's hard to guarantee that the test
-didn't fail for an unexpected reason. To help with this, an optional `expected`
-parameter can be added to the `should_panic` attribute. The test harness will
-make sure that the failure message contains the provided text. A safer version
-of the example above would be:
+`should_panic` тесты могут быть хрупкими, потому как трудно гарантировать, что тест не выдаст панику по неожиданной причине. Чтобы помочь в этом аспекте, к атрибуту `should_panic` может быть добавлен необязательный параметр `expected`. Тогда тест также будет проверять, что сообщение об ошибке содержит ожидаемый текст. Ниже представлен более безопасный вариант приведенного выше примера:
 
 ```
 #[test]
@@ -203,7 +185,7 @@ fn it_works() {
 }
 ```
 
-That's all there is to the basics! Let's write one 'real' test:
+Вот и все, что касается основ! Давайте напишем один "реальный" тест:
 
 ```{rust,ignore}
 pub fn add_two(a: i32) -> i32 {
@@ -216,14 +198,11 @@ fn it_works() {
 }
 ```
 
-This is a very common use of `assert_eq!`: call some function with
-some known arguments and compare it to the expected output.
+Это распространенное использование макроса `assert_eq!`: вызывать некоторую функцию с известными аргументами и сравнить ее вызов с ожидаемыми результатом.
 
-# The `test` module
+# Тесты в модуле `test`
 
-There is one way in which our existing example is not idiomatic: it's
-missing the test module. The idiomatic way of writing our example
-looks like this:
+Есть один нюанс, из-за которого наш пример нельзя назвать идиоматическим: отсутствует модуль тестирования. Идиоматический вариант написания нашего примера будет выглядить примерно так:
 
 ```{rust,ignore}
 pub fn add_two(a: i32) -> i32 {
@@ -241,17 +220,9 @@ mod tests {
 }
 ```
 
-There's a few changes here. The first is the introduction of a `mod tests` with
-a `cfg` attribute. The module allows us to group all of our tests together, and
-to also define helper functions if needed, that don't become a part of the rest
-of our crate. The `cfg` attribute only compiles our test code if we're
-currently trying to run the tests. This can save compile time, and also ensures
-that our tests are entirely left out of a normal build.
+Здесь есть несколько изменений. Первое - это введение `mod tests` с атрибутом `cfg`. Модуль позволяет сгруппировать все наши тесты вместе, а также определить вспомогательные функции, если это необходимо, которые будут отделены от остальной части крейта. Атрибут `cfg` указывает на то, что тест будет скомпилирован, только когда мы попытаемся запустить тесты. Это может сэкономить время компиляции, а также гарантирует, что наши тесты полностью исключены из обычного билда.
 
-The second change is the `use` declaration. Because we're in an inner module,
-we need to bring our test function into scope. This can be annoying if you have
-a large module, and so this is a common use of the `glob` feature. Let's change
-our `src/lib.rs` to make use of it:
+Второе изменение заключается в объявлении `use`. Так как мы находимся во внутреннем модуле, то мы должны объявить использование тестируемой функции в его области видимости. Это может раздражать, если у вас большой модуль, и поэтому обычно используют фичу `glob`. Давайте, в соответствии с этим, изменим наш `src/lib.rs`:
 
 ```{rust,ignore}
 
@@ -270,7 +241,7 @@ mod tests {
 }
 ```
 
-Note the different `use` line. Now we run our tests:
+Обратите внимание на различие в строке с `use`. Теперь запустим наши тесты:
 
 ```bash
 $ cargo test
@@ -290,17 +261,13 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-It works!
+Работает!
 
-The current convention is to use the `test` module to hold your "unit-style"
-tests. Anything that just tests one small bit of functionality makes sense to
-go here. But what about "integration-style" tests instead? For that, we have
-the `tests` directory
+Данный подход представляет собой использование модуля `test` содержащего тесты в "юнит стиле". Любой код, задачей которого является только лишь тестирование небольшего кусочка функциональности, имеет смысл перенести в этот модуль. Но что если мы хотим использовать "интеграционный стиль" для создания тестов? Для этого мы можем использовать директорию `tests`
 
-# The `tests` directory
+# Тесты в директории `tests`
 
-To write an integration test, let's make a `tests` directory, and
-put a `tests/lib.rs` file inside, with this as its contents:
+Чтобы написать интеграционный тест, давайте создадим директорию `tests`, и положим в нее файл `tests/lib.rs` со следующим содержимое:
 
 ```{rust,ignore}
 extern crate adder;
@@ -311,13 +278,9 @@ fn it_works() {
 }
 ```
 
-This looks similar to our previous tests, but slightly different. We now have
-an `extern crate adder` at the top. This is because the tests in the `tests`
-directory are an entirely separate crate, and so we need to import our library.
-This is also why `tests` is a suitable place to write integration-style tests:
-they use the library like any other consumer of it would.
+Выглядит примерно так же, как и наши предыдущие тесты, но есть некоторые отличия. Теперь сверху у нас расположено `extern crate adder`. Это потому, что тесты в директории `tests` - это отдельный крейт, и, следовательно, мы должны импортировать нашу библиотеку. Это также объясняет, почему директория `tests` наиболее подходящее место для написания интеграционных тестов: они используют библиотеку, как это делал бы любой другой потребитель.
 
-Let's run them:
+Давайте запустим:
 
 ```bash
 $ cargo test
@@ -343,21 +306,15 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-Now we have three sections: our previous test is also run, as well as our new
-one.
+Теперь у нас появилось три раздела: запускается предыдущий тест, а также запускается наш новый тест.
 
-That's all there is to the `tests` directory. The `test` module isn't needed
-here, since the whole thing is focused on tests.
+Это все, что касается директории `tests`. Модуль `test` здесь не нужен, так как все здесь ориентировано на тесты.
 
-Let's finally check out that third section: documentation tests.
+Давайте, наконец, перейдем к третьей части: тесты из документации.
 
-# Documentation tests
+# Тесты в документации
 
-Nothing is better than documentation with examples. Nothing is worse than
-examples that don't actually work, because the code has changed since the
-documentation has been written. To this end, Rust supports automatically
-running examples in your documentation. Here's a fleshed-out `src/lib.rs`
-with examples:
+Нет ничего лучше, чем документация с примерами. Нет ничего хуже, чем примеры, которые на самом деле не работают, потому что код изменился с тех пор, как документация была написана. Для этого, Rust поддерживает автоматический запуск примеров в документации. Вот дополненный `src/lib.rs` с примерами:
 
 ```{rust,ignore}
 //! The `adder` crate provides functions that add numbers to other numbers.
@@ -392,12 +349,9 @@ mod tests {
 }
 ```
 
-Note the module-level documentation with `//!` and the function-level
-documentation with `///`. Rust's documentation supports Markdown in comments,
-and so triple graves mark code blocks. It is conventional to include the
-`# Examples` section, exactly like that, with examples following.
+Обратите внимание на документацию уровня модуля, начинающуюся с `//!` и на документацию уровня функции, начинающуюся с `///`. Документация Rust поддерживает Markdown в комментариях, поэтому блоки кода помечают тройным \`. Обычно включают раздел `# Examples`, содержащий примеры, такие как этот.
 
-Let's run the tests again:
+Давайте запустим тесты снова:
 
 ```bash
 $ cargo test
@@ -425,15 +379,11 @@ test _0 ... ok
 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-Now we have all three kinds of tests running! Note the names of the
-documentation tests: the `_0` is generated for the module test, and `add_two_0`
-for the function test. These will auto increment with names like `add_two_1` as
-you add more examples.
+Теперь у нас есть все три вида запущенных тестов! Обратите внимание на имена тестов из документации: `_0` создается для модульных тестов, и `add_two_0` для функцииональных тестов. Цифры на конце будут автоматически инкрементироваться, например `add_two_1`, если вы добавите еще примеров.
 
-# Benchmark tests
+# Тесты производительности
 
-Rust also supports benchmark tests, which can test the performance of your
-code. Let's make our `src/lib.rs` look like this (comments elided):
+Rust также поддерживает тесты производительности, которые помогают измерить производительность вашего кода. Давайте изменим наш `src/lib.rs`, чтобы он выглядел следующим образом (комментарии опущены):
 
 ```{rust,ignore}
 extern crate test;
@@ -459,13 +409,9 @@ mod tests {
 }
 ```
 
-We've imported the `test` crate, which contains our benchmarking support.
-We have a new function as well, with the `bench` attribute. Unlike regular
-tests, which take no arguments, benchmark tests take a `&mut Bencher`. This
-`Bencher` provides an `iter` method, which takes a closure. This closure
-contains the code we'd like to benchmark.
+Мы импортировали крейт `test`, который содержит поддержку измерения производительности. У нас есть новая функция, аннотированная с помощью атрибута `bench`. В отличие от обычных тестов, которые не принимают никаких аргументов, тесты производительности в качестве аргумента принимают `&mut Bencher`. `Bencher` предоставляет метод `iter`, который в качестве аргумента принимает замыкание. Это замыкание содержит код, производительность которого мы хотели бы протестировать.
 
-We can run benchmark tests with `cargo bench`:
+Запуск тестов производительности осуществляется командой `cargo bench`:
 
 ```bash
 $ cargo bench
@@ -479,31 +425,20 @@ test tests::bench_add_two ... bench:         1 ns/iter (+/- 0)
 test result: ok. 0 passed; 0 failed; 1 ignored; 1 measured
 ```
 
-Our non-benchmark test was ignored. You may have noticed that `cargo bench`
-takes a bit longer than `cargo test`. This is because Rust runs our benchmark
-a number of times, and then takes the average. Because we're doing so little
-work in this example, we have a `1 ns/iter (+/- 0)`, but this would show
-the variance if there was one.
+Все тесты, не относящиеся к тестам производительности, были проигнорированы. Вы, наверное, заметили, что выполнение `cargo bench` занимает немного больше времени чем `cargo test`. Это происходит потому, что Rust запускает наш тест несколько раз, а затем выдает среднее значение. Так как мы выполняем слишком мало полезной работы в этом примере, у нас получается `1 ns/iter (+/- 0)`, но была бы выведена дисперсия, если бы был один.
 
-Advice on writing benchmarks:
+Советы по написанию тестов производительности:
 
 
-* Move setup code outside the `iter` loop; only put the part you want to measure inside
-* Make the code do "the same thing" on each iteration; do not accumulate or change state
-* Make the outer function idempotent too; the benchmark runner is likely to run
-  it many times
-*  Make the inner `iter` loop short and fast so benchmark runs are fast and the
-   calibrator can adjust the run-length at fine resolution
-* Make the code in the `iter` loop do something simple, to assist in pinpointing
-  performance improvements (or regressions)
+* Внутри `iter` цикла пишите только тот код, производительность которой вы хотите измерить; инициализацию выполняйте за пределами `iter` цикла
+* Внутри `iter` цикла пишите код, который будет идемпотентным (будет делать "то же самое" на каждой итерации); не накапливайте и не изменяйте состояние
+* Вне `iter` цикла пишите код который также будет идемпотентным; скорее всего, он будет запущен много раз во время теста
+* Внутри `iter` цикла пишите код, который будет коротким и быстрым, **так чтобы тестов работает быстро и калибратор можно настроить по длине прогона на четком разрешении**
+* Внутри `iter` цикла пишите код, делающий что-то простое, чтобы помочь в выявлении улучшения (или уменьшения) производительности
 
-## Gotcha: optimizations
+## Особенности оптимизации
 
-There's another tricky part to writing benchmarks: benchmarks compiled with
-optimizations activated can be dramatically changed by the optimizer so that
-the benchmark is no longer benchmarking what one expects. For example, the
-compiler might recognize that some calculation has no external effects and
-remove it entirely.
+А вот другой сложный момент, относящийся к написанию тестов производительности: тесты, скомпилированные с оптимизацией, могут быть значительно изменены оптимизатором, после чего тест будет мерить производительность не так, как мы этого ожидаем. Например, компилятор может определить, что некоторые выражения не оказывают каких-либо внешних эффектов и просто удалит их полностью.
 
 ```{rust,ignore}
 extern crate test;
@@ -517,7 +452,7 @@ fn bench_xor_1000_ints(b: &mut Bencher) {
 }
 ```
 
-gives the following results
+выведет следующие результаты
 
 ```text
 running 1 test
@@ -526,11 +461,7 @@ test bench_xor_1000_ints ... bench:         0 ns/iter (+/- 0)
 test result: ok. 0 passed; 0 failed; 0 ignored; 1 measured
 ```
 
-The benchmarking runner offers two ways to avoid this. Either, the closure that
-the `iter` method receives can return an arbitrary value which forces the
-optimizer to consider the result used and ensures it cannot remove the
-computation entirely. This could be done for the example above by adjusting the
-`b.iter` call to
+Движок для запуска тестов производительности оставляет две возможности, позволяющие этого избежать. Либо использовать замыкание, передаваемое в метод `iter`, которое возвращает какое-либо значение; тогда это заставит оптимизатор думать, что возвращаемое значение будет использовано, из-за чего удалить вычисления полностью будет не возможно. Для примера выше этого можно достигнуть, изменив вызова `b.iter`
 
 ```rust
 # struct X;
@@ -541,9 +472,7 @@ b.iter(|| {
 });
 ```
 
-Or, the other option is to call the generic `test::black_box` function, which
-is an opaque "black box" to the optimizer and so forces it to consider any
-argument as used.
+Либо использовать вызов функции `test::black_box`, которая представляет собой "черный ящик", непрозрачный для оптимизатора, тем самым заставляя его рассматривать любой аргумент как используемый.
 
 ```rust
 # #![feature(test)]
@@ -561,11 +490,9 @@ b.iter(|| {
 # }
 ```
 
-Neither of these read or modify the value, and are very cheap for small values.
-Larger values can be passed indirectly to reduce overhead (e.g.
-`black_box(&huge_struct)`).
+В этом примере не происходит ни чтения, ни измения значения, что очень дешево для малых значений. Большие значения могут быть переданы косвенно для уменьшения издержек (например, `black_box(&huge_struct)`).
 
-Performing either of the above changes gives the following benchmarking results
+Выполнение одного из вышеперечисленных изменений дает следующие результаты измерения производительности
 
 ```text
 running 1 test
@@ -574,5 +501,4 @@ test bench_xor_1000_ints ... bench:       131 ns/iter (+/- 3)
 test result: ok. 0 passed; 0 failed; 0 ignored; 1 measured
 ```
 
-However, the optimizer can still modify a testcase in an undesirable manner
-even when using either of the above.
+Тем не менее, оптимизатор все еще может вносить нежелательные изменения в определенных случаях, даже при использовании любого из вышеописанных приемов.
