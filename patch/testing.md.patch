diff --git a/rust/master:src/doc/trpl/testing.md b/fix_current_version:testing.md
index fddb4c1..444fe6b 100644
--- a/rust/master:src/doc/trpl/testing.md
+++ b/fix_current_version:testing.md
@@ -1,27 +1,29 @@
-% Testing
+% Тестирование
 
 > Program testing can be a very effective way to show the presence of bugs, but
 > it is hopelessly inadequate for showing their absence.
 >
 > Edsger W. Dijkstra, "The Humble Programmer" (1972)
 
-Let's talk about how to test Rust code. What we will not be talking about is
-the right way to test Rust code. There are many schools of thought regarding
-the right and wrong way to write tests. All of these approaches use the same
-basic tools, and so we'll show you the syntax for using them.
+Давайте поговорим о том, как тестировать Rust код. Мы не будем рассказывать о
+том, какой подход к тестированию Rust кода является правильным. Есть много
+подходов, каждый из которых имеет свое представление о правильном написании
+тестов. Но все эти подходы используют одни и те же основные инструменты, и мы
+покажем вам синтаксис их использования.
 
-# The `test` attribute
+# Тесты с аттрибутом `test`
 
-At its simplest, a test in Rust is a function that's annotated with the `test`
-attribute. Let's make a new project with Cargo called `adder`:
+В самом простом случае, тест в Rust - это функция, аннотированная с помощью
+атрибута `test`. Давайте создадим новый проект при помощи Cargo, который будет
+называться `adder`:
 
 ```bash
 $ cargo new adder
 $ cd adder
 ```
 
-Cargo will automatically generate a simple test when you make a new project.
-Here's the contents of `src/lib.rs`:
+При создании нового проекта, Cargo автоматически сгенерирует простой тест. Ниже
+представлено содержимое `src/lib.rs`:
 
 ```rust
 #[test]
@@ -29,9 +31,10 @@ fn it_works() {
 }
 ```
 
-Note the `#[test]`. This attribute indicates that this is a test function. It
-currently has no body. That's good enough to pass! We can run the tests with
-`cargo test`:
+Обратите внимание на `#[test]`. Этот аттрибут указывает, что это тестовая
+функция. В этом примере она не имеет тела. Но такого вида функции достаточно,
+чтобы успешно выполнить тест. Запуск тестов осуществляется командой `cargo
+test`.
 
 ```bash
 $ cargo test
@@ -50,29 +53,32 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-Cargo compiled and ran our tests. There are two sets of output here: one
-for the test we wrote, and another for documentation tests. We'll talk about
-those later. For now, see this line:
+Cargo скомпилировал и запустил наши тесты. В результате мы получили выходные
+данные, поделенные на два раздела: один содержит информацию о тесте, который мы
+написали, а другой - информацию о тестах из документации. Но об этом позже. А
+сейчас посмотрим на эту строку:
 
 ```text
 test it_works ... ok
 ```
 
-Note the `it_works`. This comes from the name of our function:
+Обратите внимание на `it_works`. Это название нашей функции:
 
 ```rust
 fn it_works() {
 # }
 ```
 
-We also get a summary line:
+Мы также получили итоговую строку:
 
 ```text
 test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-So why does our do-nothing test pass? Any test which doesn't `panic!` passes,
-and any test that does `panic!` fails. Let's make our test fail:
+Так почему же наш ничего не делающий тест был выполнен успешно? Любой тест,
+который не вызывает `panic!`, выполняется успешно, и любой тест, который
+вызывает `panic!`, выполняется ошибочно. Давайте сделаем тест, который
+выполнится ошибочно:
 
 ```rust
 #[test]
@@ -81,9 +87,10 @@ fn it_works() {
 }
 ```
 
-`assert!` is a macro provided by Rust which takes one argument: if the argument
-is `true`, nothing happens. If the argument is false, it `panic!`s. Let's run
-our tests again:
+`assert!` является макросом, определенным в Rust, который принимает один
+аргумент: если аргумент имеет значение `true`, то ничего не происходит; если
+аргумент является `false`, то вызывается `panic!`. Давайте запустим наши тесты
+снова:
 
 ```bash
 $ cargo test
@@ -108,28 +115,30 @@ test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured
 thread '<main>' panicked at 'Some tests failed', /home/steve/src/rust/src/libtest/lib.rs:247
 ```
 
-Rust indicates that our test failed:
+Rust сообщает, что наш тест выполнен ошибочно:
 
 ```text
 test it_works ... FAILED
 ```
 
-And that's reflected in the summary line:
+Это же отражается в итоговой строке:
 
 ```text
 test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured
 ```
 
-We also get a non-zero status code:
+Мы также получаем ненулевой код состояния:
 
 ```bash
 $ echo $?
 101
 ```
 
-This is useful if you want to integrate `cargo test` into other tooling.
+Это бывает полезно, если вы хотите интегрировать `cargo test` в сторонний
+инструмент.
 
-We can invert our test's failure with another attribute: `should_panic`:
+Мы можем инвертировать ожидаемый результат теста с помощью атрибута:
+`should_panic`:
 
 ```rust
 #[test]
@@ -139,7 +148,8 @@ fn it_works() {
 }
 ```
 
-This test will now succeed if we `panic!` and fail if we complete. Let's try it:
+Теперь этот тест будет выполнен успешно, если вызывается `panic!`, и ошибочно,
+если `panic!` не вызывается. Давайте попробуем:
 
 ```bash
 $ cargo test
@@ -158,8 +168,8 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-Rust provides another macro, `assert_eq!`, that compares two arguments for
-equality:
+Rust предоставляет и другой макрос, `assert_eq!`, который проверяет
+эквивалентность двух артументов:
 
 ```rust
 #[test]
@@ -169,8 +179,8 @@ fn it_works() {
 }
 ```
 
-Does this test pass or fail? Because of the `should_panic` attribute, it
-passes:
+А теперь этот тест будет выполнен успешно или ошибочно? Из-за атрибута
+`should_panic` он завершится успешно:
 
 ```bash
 $ cargo test
@@ -189,11 +199,11 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-`should_panic` tests can be fragile, as it's hard to guarantee that the test
-didn't fail for an unexpected reason. To help with this, an optional `expected`
-parameter can be added to the `should_panic` attribute. The test harness will
-make sure that the failure message contains the provided text. A safer version
-of the example above would be:
+`should_panic` тесты могут быть хрупкими, потому как трудно гарантировать, что
+тест не вызовет панику по неожиданной причине. Чтобы помочь в этом аспекте, к
+атрибуту `should_panic` может быть добавлен необязательный параметр `expected`.
+Тогда тест также будет проверять, что сообщение об ошибке содержит ожидаемый
+текст. Ниже представлен более безопасный вариант приведенного выше примера:
 
 ```
 #[test]
@@ -203,7 +213,7 @@ fn it_works() {
 }
 ```
 
-That's all there is to the basics! Let's write one 'real' test:
+Вот и все, что касается основ! Давайте напишем один 'реальный' тест:
 
 ```{rust,ignore}
 pub fn add_two(a: i32) -> i32 {
@@ -216,14 +226,15 @@ fn it_works() {
 }
 ```
 
-This is a very common use of `assert_eq!`: call some function with
-some known arguments and compare it to the expected output.
+Это распространенное использование макроса `assert_eq!`: вызывать некоторую
+функцию с известными аргументами и сравнить результат ее вызова с ожидаемыми
+результатом.
 
-# The `test` module
+# Тесты в модуле `test`
 
-There is one way in which our existing example is not idiomatic: it's
-missing the test module. The idiomatic way of writing our example
-looks like this:
+Есть один нюанс, из-за которого наш пример нельзя назвать идиоматическим:
+отсутствует модуль тестирования. Идиоматический вариант написания нашего примера
+будет выглядить примерно так:
 
 ```{rust,ignore}
 pub fn add_two(a: i32) -> i32 {
@@ -241,17 +252,19 @@ mod test {
 }
 ```
 
-There's a few changes here. The first is the introduction of a `mod test` with
-a `cfg` attribute. The module allows us to group all of our tests together, and
-to also define helper functions if needed, that don't become a part of the rest
-of our crate. The `cfg` attribute only compiles our test code if we're
-currently trying to run the tests. This can save compile time, and also ensures
-that our tests are entirely left out of a normal build.
+Здесь есть несколько изменений. Первое - это введение `mod test` с атрибутом
+`cfg`. Модуль позволяет сгруппировать все наши тесты вместе, а также определить
+вспомогательные функции, если это необходимо, которые будут отделены от
+остальной части контейнера. Атрибут `cfg` указывает на то, что тест будет
+скомпилирован, только когда мы попытаемся запустить тесты. Это может сэкономить
+время компиляции, а также гарантирует, что наши тесты полностью исключены из
+обычного билда.
 
-The second change is the `use` declaration. Because we're in an inner module,
-we need to bring our test function into scope. This can be annoying if you have
-a large module, and so this is a common use of the `glob` feature. Let's change
-our `src/lib.rs` to make use of it:
+Второе изменение заключается в объявлении `use`. Так как мы находимся во
+внутреннем модуле, то мы должны объявить использование тестируемой функции в его
+области видимости. Это может раздражать, если у вас большой модуль, и поэтому
+обычно используют фичу `glob`. Давайте, в соответствии с этим, изменим наш
+`src/lib.rs`:
 
 ```{rust,ignore}
 
@@ -270,7 +283,7 @@ mod test {
 }
 ```
 
-Note the different `use` line. Now we run our tests:
+Обратите внимание на различие в строке с `use`. Теперь запустим наши тесты:
 
 ```bash
 $ cargo test
@@ -290,17 +303,18 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-It works!
+Работает!
 
-The current convention is to use the `test` module to hold your "unit-style"
-tests. Anything that just tests one small bit of functionality makes sense to
-go here. But what about "integration-style" tests instead? For that, we have
-the `tests` directory
+Данный подход представляет собой использование модуля `test` содержащего тесты в
+"юнит стиле". Любой код, задачей которого является только лишь тестирование
+небольшего кусочка функциональности, имеет смысл перенести в этот модуль. Но что
+если мы хотим использовать "интеграционный стиль" для создания тестов? Для этого
+следует использовать директорию `tests`
 
-# The `tests` directory
+# Тесты в директории `tests`
 
-To write an integration test, let's make a `tests` directory, and
-put a `tests/lib.rs` file inside, with this as its contents:
+Чтобы написать интеграционный тест, давайте создадим директорию `tests`, и
+положим в нее файл `tests/lib.rs` со следующим содержимым:
 
 ```{rust,ignore}
 extern crate adder;
@@ -311,13 +325,14 @@ fn it_works() {
 }
 ```
 
-This looks similar to our previous tests, but slightly different. We now have
-an `extern crate adder` at the top. This is because the tests in the `tests`
-directory are an entirely separate crate, and so we need to import our library.
-This is also why `tests` is a suitable place to write integration-style tests:
-they use the library like any other consumer of it would.
+Выглядит примерно так же, как и наши предыдущие тесты, но есть некоторые
+отличия. Теперь сверху у нас расположено `extern crate adder`. Это потому, что
+тесты в директории `tests` - это отдельный контейнер, и, следовательно, мы
+должны импортировать нашу библиотеку. Это также объясняет, почему директория
+`tests` наиболее подходящее место для написания интеграционных тестов: они
+используют библиотеку, как это делал бы любой другой потребитель.
 
-Let's run them:
+Давайте запустим их:
 
 ```bash
 $ cargo test
@@ -343,21 +358,20 @@ running 0 tests
 test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-Now we have three sections: our previous test is also run, as well as our new
-one.
+Теперь у нас появилось три раздела: запускается предыдущий тест, а также
+запускается наш новый тест.
 
-That's all there is to the `tests` directory. The `test` module isn't needed
-here, since the whole thing is focused on tests.
+Это все, что касается директории `tests`. Модуль `test` здесь не нужен, так как
+все здесь ориентировано на тесты.
 
-Let's finally check out that third section: documentation tests.
+Давайте, наконец, перейдем к третьей части: тесты из документации.
 
-# Documentation tests
+# Тесты в документации
 
-Nothing is better than documentation with examples. Nothing is worse than
-examples that don't actually work, because the code has changed since the
-documentation has been written. To this end, Rust supports automatically
-running examples in your documentation. Here's a fleshed-out `src/lib.rs`
-with examples:
+Нет ничего лучше, чем документация с примерами. Нет ничего хуже, чем примеры,
+которые на самом деле не работают, потому что код изменился с тех пор, как
+документация была написана. Для этого, Rust поддерживает автоматический запуск
+примеров в документации. Вот дополненный `src/lib.rs` с примерами:
 
 ```{rust,ignore}
 //! The `adder` crate provides functions that add numbers to other numbers.
@@ -392,12 +406,13 @@ mod tests {
 }
 ```
 
-Note the module-level documentation with `//!` and the function-level
-documentation with `///`. Rust's documentation supports Markdown in comments,
-and so triple graves mark code blocks. It is conventional to include the
-`# Examples` section, exactly like that, with examples following.
+Обратите внимание на документацию уровня модуля, начинающуюся с `//!` и на
+документацию уровня функции, начинающуюся с `///`. Документация Rust
+поддерживает Markdown в комментариях, поэтому блоки кода помечают символами
+\`\`\`. В комментарии документации обычно включают раздел `# Examples`,
+содержащий примеры, такие как этот.
 
-Let's run the tests again:
+Давайте запустим тесты снова:
 
 ```bash
 $ cargo test
@@ -425,8 +440,7 @@ test _0 ... ok
 test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured
 ```
 
-Now we have all three kinds of tests running! Note the names of the
-documentation tests: the `_0` is generated for the module test, and `add_two_0`
-for the function test. These will auto increment with names like `add_two_1` as
-you add more examples.
-
+Теперь у нас запускаются все три вида тестов! Обратите внимание на имена тестов
+из документации: `_0` создается для модульных тестов, и `add_two_0` - для
+функцииональных тестов. Цифры на конце будут автоматически инкрементироваться,
+например `add_two_1`, если вы добавите еще примеров.
