diff --git a/rust/master:src/doc/trpl/comments.md b/HEAD:comments.md
index 441496e..c77f98f 100644
--- a/rust/master:src/doc/trpl/comments.md
+++ b/HEAD:comments.md
@@ -1,47 +1,47 @@
-% Comments
+% Комментарии
 
-Now that we have some functions, it's a good idea to learn about comments.
-Comments are notes that you leave to other programmers to help explain things
-about your code. The compiler mostly ignores them.
+Теперь, когда у нас есть несколько функций, неплохо бы узнать о комментариях.
+Комментарии - это заметки, которые вы оставляете для других программистов, чтобы
+помочь объяснить некоторые вещи в вашем коде. Компилятор в основном игнорирует
+их.
 
-Rust has two kinds of comments that you should care about: *line comments*
-and *doc comments*.
+В Rust есть два вида комментариев: `строчные комментарии` и `doc-комментарии`.
 
 ```{rust}
-// Line comments are anything after '//' and extend to the end of the line.
+// Строчные комментарии - это всё что угодно после '//' и до конца строки.
 
-let x = 5; // this is also a line comment.
+let x = 5; // это тоже строчный комментарий.
 
-// If you have a long explanation for something, you can put line comments next
-// to each other. Put a space between the // and your comment so that it's
-// more readable.
+// Если у вас длинное объяснение для чего-либо, вы можете расположить строчные
+// комментарии один за другим. Поместите пробел между '//' и вашим комментарием,
+// так как это более читаемо.
 ```
 
-The other kind of comment is a doc comment. Doc comments use `///` instead of
-`//`, and support Markdown notation inside:
+Другое применение комментария - это doc-комментарий. Doc-комментарий использует
+`///` вместо `//`, и поддерживает Markdown-разметку внутри:
 
 ```{rust}
-/// `hello` is a function that prints a greeting that is personalized based on
-/// the name given.
+/// `hello` - это функция, которая выводит на экран персональное приветствие
+/// основанное на полученном имени
 ///
 /// # Arguments
 ///
-/// * `name` - The name of the person you'd like to greet.
+/// * `name` - Имя особы, которую вы хотите поприветствовать.
 ///
 /// # Examples
 ///
 /// ```rust
 /// let name = "Steve";
-/// hello(name); // prints "Hello, Steve!"
+/// hello(name); // выведет "Привет, Steve!"
 /// ```
 fn hello(name: &str) {
-    println!("Hello, {}!", name);
+    println!("Привет, {}!", name);
 }
 ```
 
-When writing doc comments, adding sections for any arguments, return values,
-and providing some examples of usage is very, very helpful. Don't worry about
-the `&str`, we'll get to it soon.
+При написании doc-комментария, очень полезно добавлять разделы для любых
+аргументов, возвращаемых значений и приводить некоторые примеры использования.
 
-You can use the [`rustdoc`](documentation.html) tool to generate HTML documentation
-from these doc comments.
+Вы можете использовать [`rustdoc`](documentation.html) для генерации HTML-
+документации из этих doc-комментариев. Мы расскажем больше о `rustdoc` позже в
+отдельной теме.
