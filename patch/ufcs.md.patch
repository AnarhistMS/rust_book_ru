diff --git a/rust/master:src/doc/trpl/ufcs.md b/HEAD:ufcs.md
index 2353c63..7a0f8c6 100644
--- a/rust/master:src/doc/trpl/ufcs.md
+++ b/HEAD:ufcs.md
@@ -1,127 +1,129 @@
-% Universal Function Call Syntax
+% Универсальный синтаксис вызова функций (Universal Function Call Syntax)
 
-Sometimes, functions can have the same names. Consider this code:
+Иногда, функции могут иметь одинаковые имена. Рассмотрим этот код:
 
 ```rust
 trait Foo {
     fn f(&self);
 }
 
 trait Bar {
     fn f(&self);
 }
 
 struct Baz;
 
 impl Foo for Baz {
     fn f(&self) { println!("Baz’s impl of Foo"); }
 }
 
 impl Bar for Baz {
     fn f(&self) { println!("Baz’s impl of Bar"); }
 }
 
 let b = Baz;
 ```
 
-If we were to try to call `b.f()`, we’d get an error:
+Если мы попытаемся вызвать `b.f()`, то получим ошибку:
 
 ```text
 error: multiple applicable methods in scope [E0034]
 b.f();
   ^~~
 note: candidate #1 is defined in an impl of the trait `main::Foo` for the type
 `main::Baz`
     fn f(&self) { println!("Baz’s impl of Foo"); }
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 note: candidate #2 is defined in an impl of the trait `main::Bar` for the type
 `main::Baz`
     fn f(&self) { println!("Baz’s impl of Bar"); }
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 ```
 
-We need a way to disambiguate which method we need. This feature is called
-‘universal function call syntax’, and it looks like this:
+Нам нужен способ указать, какой конкретно метод нужен, чтобы устранить
+неоднозначность. Эта фича называется ’универсальный синтаксис вызова функций’, и
+выглядит это так:
 
 ```rust
 # trait Foo {
 #     fn f(&self);
 # }
 # trait Bar {
 #     fn f(&self);
 # }
 # struct Baz;
 # impl Foo for Baz {
 #     fn f(&self) { println!("Baz’s impl of Foo"); }
 # }
 # impl Bar for Baz {
 #     fn f(&self) { println!("Baz’s impl of Bar"); }
 # }
 # let b = Baz;
 Foo::f(&b);
 Bar::f(&b);
 ```
 
-Let’s break it down.
+Давайте разберемся.
 
 ```rust,ignore
 Foo::
 Bar::
 ```
 
-These halves of the invocation are the types of the two traits: `Foo` and
-`Bar`. This is what ends up actually doing the disambiguation between the two:
-Rust calls the one from the trait name you use.
+Эти части вызова задают один из двух видов трейтов: `Foo` и `Bar`. Это то, что
+на самом деле устраняет неоднозначность между двумя методами: Rust вызывает
+метод того трейта, имя которого вы используете.
 
 ```rust,ignore
 f(&b)
 ```
 
-When we call a method like `b.f()` using [method syntax][methodsyntax], Rust
-will automatically borrow `b` if `f()` takes `&self`. In this case, Rust will
-not, and so we need to pass an explicit `&b`.
+Когда мы вызываем метод, используя [синтаксис вызова метода][methodsyntax], как
+например `b.f()`, Rust автоматически заимствует `b`, если `f()` принимает в
+качестве аргумента `&self`. В этом же случае, Rust не будет использовать
+автоматическое заимствование, и поэтому мы должны явно передать `&b`.
 
 [methodsyntax]: method-syntax.html
 
-# Angle-bracket Form
+# Форма с угловыми скобками
 
-The form of UFCS we just talked about:
+Форма UFCS, о которой мы только что говорили:
 
 ```rust,ignore
 Trait::method(args);
 ```
 
-Is a short-hand. There’s an expanded form of this that’s needed in some
-situations:
+Это сокращенная форма записи. Ниже представлена расширенная форма записи,
+которая требуется в некоторых ситуациях:
 
 ```rust,ignore
 <Type as Trait>::method(args);
 ```
 
-The `<>::` syntax is a means of providing a type hint. The type goes inside
-the `<>`s. In this case, the type is `Type as Trait`, indicating that we want
-`Trait`’s version of `method` to be called here. The `as Trait` part is
-optional if it’s not ambiguous. Same with the angle brackets, hence the
-shorter form.
+Синтаксис `<>::` является средством предоставления подсказки типа. Тип
+располагается внутри `<>`. В этом случае типом является `Type as Trait`,
+указывающий, что мы хотим здесь вызвать `Trait` версию метода. Часть `as Trait`
+является необязательной, если вызов не является неоднозначным. То же самое что с
+угловыми скобками, отсюда и короткая форма.
 
-Here’s an example of using the longer form.
+Вот пример использования длинной формы записи.
 
 ```rust
 trait Foo {
     fn clone(&self);
 }
 
 #[derive(Clone)]
 struct Bar;
 
 impl Foo for Bar {
     fn clone(&self) {
         println!("Making a clone of Bar");
 
         <Bar as Clone>::clone(self);
     }
 }
 ```
 
-This will call the `Clone` trait’s `clone()` method, rather than `Foo`’s.
+Этот код вызвает метод `clone()` трейта `Clone`, а не трейта `Foo`.
