diff --git a/rust/master:src/doc/trpl/raw-pointers.md b/HEAD:raw-pointers.md
index 4a37af3..9ae77f4 100644
--- a/rust/master:src/doc/trpl/raw-pointers.md
+++ b/HEAD:raw-pointers.md
@@ -1,122 +1,129 @@
-% Raw Pointers
+% Сырые указатели
 
-Rust has a number of different smart pointer types in its standard library, but
-there are two types that are extra-special. Much of Rust’s safety comes from
-compile-time checks, but raw pointers don’t have such guarantees, and are
-[unsafe][unsafe] to use.
+Стандартная библиотека Rust содержит ряд различных типов умных указателей, но
+среди них есть два типа, которые экстра-специальные. Большая часть безопасности
+в Rust является слкдствием проверок во время компиляции, но сырье указатели не
+имеют конкретных гарантий и являются [небезопасными][unsafe] для использования.
 
-`*const T` and `*mut T` are called ‘raw pointers’ in Rust. Sometimes, when
-writing certain kinds of libraries, you’ll need to get around Rust’s safety
-guarantees for some reason. In this case, you can use raw pointers to implement
-your library, while exposing a safe interface for your users. For example, `*`
-pointers are allowed to alias, allowing them to be used to write
-shared-ownership types, and even thread-safe shared memory types (the `Rc<T>`
-and `Arc<T>` types are both implemented entirely in Rust).
+`*const T` и `*mut T` в Rust называются ‘сырыми указателями‘ (‘raw pointers‘).
+Иногда, при написании определенных видов библиотек, вам по какой-то причине
+нужно обойти гарантии безопасности Rust. В этом случае, вы можете использовать
+сырые указатели в реализации вашей библиотеки, вместе с тем предоставляя
+безопасный интерфейс для пользователей. Например, `*` указатели допускают
+псевдонимы, позволяя им быть использоваными для записи типов с разделяемой
+собственности, и даже поточно-безопасные типы памяти (`Rc<T>` и `Arc<T>` типы и
+реализован полностью в Rust).
 
-Here are some things to remember about raw pointers that are different than
-other pointer types. They:
+Вот некоторые факты о сырых указателях, которые следует помнить и которые
+отличают их от других типов указателей. Они:
 
-- are not guaranteed to point to valid memory and are not even
-  guaranteed to be non-null (unlike both `Box` and `&`);
-- do not have any automatic clean-up, unlike `Box`, and so require
-  manual resource management;
-- are plain-old-data, that is, they don't move ownership, again unlike
-  `Box`, hence the Rust compiler cannot protect against bugs like
-  use-after-free;
-- lack any form of lifetimes, unlike `&`, and so the compiler cannot
-  reason about dangling pointers; and
-- have no guarantees about aliasing or mutability other than mutation
-  not being allowed directly through a `*const T`.
+- не гарантируют, что они указывают на действительную область памяти, и не
+гарантируют, что они является ненулевыми указателями (в отличие от `Box` и `&`);
+- не имеют никакой автоматической очистки, в отличие от `Box`, и поэтому требуют
+ручного управления ресурсами;
+- это простые структуры данных (plain-old-data), то есть они не перемещают право
+собственности, опять же в отличие от `Box`, следовательно, компилятор Rust не
+может защитить от ошибок, таких как использование освобождённой памяти (use-
+after-free);
+- лишены сроков жизни в какой-либо форме, в отличие от `&`, и поэтому компилятор
+не может делать выводы о висячих указателях; и
+- не имеют никаких гарантий относительно псевдонимизации или изменяемости, за
+исключением изменений, недопустимых непосредственно для `*const T`.
 
-# Basics
 
-Creating a raw pointer is perfectly safe:
+# Основы
+
+Создание сырого указателя совершенно безопасно:
 
 ```rust
 let x = 5;
 let raw = &x as *const i32;
 
 let mut y = 10;
 let raw_mut = &mut y as *mut i32;
 ```
 
-However, dereferencing one is not. This won’t work:
+А вот его разыменование не является. Следующий код не будет работать:
 
 ```rust,ignore
 let x = 5;
 let raw = &x as *const i32;
 
 println!("raw points at {}", *raw);
 ```
 
-It gives this error:
+Он выдает такую ошибку:
 
 ```text
 error: dereference of unsafe pointer requires unsafe function or block [E0133]
      println!("raw points at{}", *raw);
                                  ^~~~
 ```
 
-When you dereference a raw pointer, you’re taking responsibility that it’s not
-pointing somewhere that would be incorrect. As such, you need `unsafe`:
+Когда вы разыменовываете сырой указатель, вы принимаете на себя ответственность,
+что он не указывает на что-то, что может быть некорректным. Таким образом, вы
+должны использовать `unsafe`:
 
 ```rust
 let x = 5;
 let raw = &x as *const i32;
 
 let points_at = unsafe { *raw };
 
 println!("raw points at {}", points_at);
 ```
 
-For more operations on raw pointers, see [their API documentation][rawapi].
+Для более подробной информации по операциям с сырыми указателями, обратитесь к
+[API документации][rawapi] о них.
 
 [unsafe]: unsafe.html
 [rawapi]: ../std/primitive.pointer.html
 
 # FFI
 
-Raw pointers are useful for FFI: Rust’s `*const T` and `*mut T` are similar to
-C’s `const T*` and `T*`, respectfully. For more about this use, consult the
-[FFI chapter][ffi].
+Сырые указатели полезны для FFI: `*const T` и `*mut T` в Rust приблизительно
+соответствуют `const T*` и `T*` в C. Для более подробной информации об этом
+обратитесь к главе [FFI][ffi].
 
-[ffi]: ffi.html
+[ffi]: ffi.md
 
-# References and raw pointers
+# Ссылки и сырые указатели
 
-At runtime, a raw pointer `*` and a reference pointing to the same piece of
-data have an identical representation. In fact, an `&T` reference will
-implicitly coerce to an `*const T` raw pointer in safe code and similarly for
-the `mut` variants (both coercions can be performed explicitly with,
-respectively, `value as *const T` and `value as *mut T`).
+Во время выполнения и сырой указатель, `*`, и ссылка, указывающая на тот же
+кусок данных, имеют одинаковое представление. По факту, ссылка `&T` будет неявно
+приведена к сырому указателю `*const T` в безопасном коде, аналогично и для
+вариантов `mut` (оба приведения могут быть выполнены явно, с помощью,
+соответственно, `value as *const T` и `value as *mut T`).
 
-Going the opposite direction, from `*const` to a reference `&`, is not safe. A
-`&T` is always valid, and so, at a minimum, the raw pointer `*const T` has to
-point to a valid instance of type `T`. Furthermore, the resulting pointer must
-satisfy the aliasing and mutability laws of references. The compiler assumes
-these properties are true for any references, no matter how they are created,
-and so any conversion from raw pointers is asserting that they hold. The
-programmer *must* guarantee this.
+Переход в обратном направлении, от `*const` к ссылке `&`, не являеся безопасным.
+Ссылка `&T` всегда валидна, и поэтому, как минимум, сырой указатель `*const T`
+должен указывать на правильный экземпляр типа `T`. Кроме того, в результате
+указатель должен удовлетворять правилам псевдонимизации и изменяемости ссылок.
+Компилятор предполагает, что эти свойства верны для любых ссылок, независимо от
+того, как они были созданы, и поэтому любое преобразование из сырых указателей
+равносильно утверждению, что они соответствуют этим правилам. Программист
+*должен* гарантировать это.
 
-The recommended method for the conversion is
+Рекомендуемым методом преобразования является
 
 ```rust
 let i: u32 = 1;
 
 // explicit cast
 let p_imm: *const u32 = &i as *const u32;
 let mut m: u32 = 2;
 
 // implicit coercion
 let p_mut: *mut u32 = &mut m;
 
 unsafe {
     let ref_imm: &u32 = &*p_imm;
     let ref_mut: &mut u32 = &mut *p_mut;
 }
 ```
 
-The `&*x` dereferencing style is preferred to using a `transmute`. The latter
-is far more powerful than necessary, and the more restricted operation is
-harder to use incorrectly; for example, it requires that `x` is a pointer
-(unlike `transmute`).
+Разыменование с помощью конструкции `&*x` является более предпочтительным, чем с
+использованием `transmute`. Последнее является гораздо более мощным
+инструментом, чем необходимо, а более ограниченное поведение сложнее
+использовать неправильно. Например, она требует, чтобы `x` представляет собой
+указатель (в отличие от `transmute`).
