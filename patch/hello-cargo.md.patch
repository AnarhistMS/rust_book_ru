diff --git a/rust/master:src/doc/trpl/hello-cargo.md b/HEAD:hello-cargo.md
index 6967532..c68c261 100644
--- a/rust/master:src/doc/trpl/hello-cargo.md
+++ b/HEAD:hello-cargo.md
@@ -1,198 +1,169 @@
 % Hello, Cargo!
 
-[Cargo][cratesio] is a tool that Rustaceans use to help manage their Rust
-projects. Cargo is currently in a pre-1.0 state, and so it is still a work in
-progress. However, it is already good enough to use for many Rust projects, and
-so it is assumed that Rust projects will use Cargo from the beginning.
+[Cargo](http://crates.io/) - это инструмент, который используют разработчики для
+управления своими Rust проектами. Cargo, как и сам Rust, сейчас находится в
+состоянии pre-1.0, и работа над ним ещё продолжается. Тем не менее, он уже
+достаточно хорош для использования во многих Rust проектах, и поэтому
+предполагается, что проекты на Rust будут использовать Cargo с самого начала.
 
-[cratesio]: https://doc.crates.io
+Cargo делает три вещи: собирает ваш код, скачивает нужные вашему коду
+зависимости и собирает их. Поначалу, вашей программе не понадобится никаких
+зависимостей, поэтому будем использовать только первую часть его функционала. Со
+временем нам понадобится добавить несколько зависимостей, и нам не составит
+труда сделать это, поскольку мы начали использовать Cargo.
 
-Cargo manages three things: building your code, downloading the dependencies
-your code needs, and building those dependencies. At first, your
-program doesn’t have any dependencies, so we’ll only be using the first part of
-its functionality. Eventually, we’ll add more. Since we started off by using
-Cargo, it'll be easy to add later.
+Cargo установился вместе с Rust'ом, если вы использовали официальный установщик.
+Если нет, прочтите [как его установить](https://github.com/rust-lang/cargo#installing-cargo-from-nightlies)
+отдельно от Rust.
 
-If you installed Rust via the official installers you will also have Cargo. If
-you installed Rust some other way, you may want to [check the Cargo
-README][cargoreadme] for specific instructions about installing it.
+## Переходим на Cargo
 
-[cargoreadme]: https://github.com/rust-lang/cargo#installing-cargo-from-nightlies
+Давайте начнём использовать Cargo для сборки кода нашей программы "Hello World".
 
-## Converting to Cargo
-
-Let’s convert Hello World to Cargo.
-
-To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`
-configuration file, and put our source file in the right place. Let's
-do that part first:
+Чтобы Cargo-фицировать ваш проект, вы должны сделать две вещи: создать
+конфигурационный файл `Cargo.toml` и поместить файл с исходным кодом в
+правильное место. Давайте сделаем это:
 
 ```bash
 $ mkdir src
 $ mv main.rs src/main.rs
 ```
 
-Cargo expects your source files to live inside a `src` directory. That leaves
-the top level for other things, like READMEs, license information, and anything
-not related to your code. Cargo helps us keep our projects nice and tidy. A
-place for everything, and everything in its place.
+Cargo ожидает что ваши файлы с исходным кодом находятся в директории `src`. Это
+оставляет верхний уровень для других вещей вроде README, файлов с текстом
+лицензии и других не относящихся к вашему коду. Cargo помогает нам сохранять
+наши проекты красивыми и аккуратными. Всему своё место и всё на своём месте.
 
-Next, our configuration file:
+Дальше, создадим конфигурационный файл для Cargo:
 
 ```bash
 $ editor Cargo.toml
 ```
 
-Make sure to get this name right: you need the capital `C`!
+Убедитесь, что имя правильное: вам нужна заглавная `C`!
 
-Put this inside:
+Вставьте эту конфигурацию в свой `Cargo.toml`:
 
 ```toml
 [package]
 
 name = "hello_world"
 version = "0.0.1"
-authors = [ "Your name <you@example.com>" ]
+authors = [ "Ваше имя <you@example.ru>" ]
+
+[[bin]]
+
+name = "hello_world"
 ```
 
-This file is in the [TOML][toml] format. Let’s let it explain itself to you:
+Этот файл в формате [TOML](https://github.com/toml-lang/toml). Позволим ему
+самому рассказать о себе:
 
-> TOML aims to be a minimal configuration file format that's easy to read due
-> to obvious semantics. TOML is designed to map unambiguously to a hash table.
-> TOML should be easy to parse into data structures in a wide variety of
-> languages.
+> TOML стремится быть минималистичным форматом для конфигурационных файлов,
+> который легко читается благодаря понятной семантике. TOML спроектирован для
+> однозначного отображения в хэш-таблицу. TOML должен легко преобразовываться в
+> структуры данных широкого спектра языков программирования.
 
-TOML is very similar to INI, but with some extra goodies.
+TOML очень похож на INI, но с некоторыми дополнительными возможностями.
 
-[toml]: https://github.com/toml-lang/toml
+В любом случае, в этом файле есть две *таблицы*: `package` и `bin`. Первая
+сообщает Cargo метаданные вашего пакета. Вторая говорит, что мы заинтересованы в
+сборке исполняемого файла, а не библиотеки (хотя мы могли бы сделать и то, и
+другое!), и как его следует назвать.
 
-Once you have this file in place, we should be ready to build! Try this:
+Итак, мы с этим закончили и готовы к сборке! Попробуйте собрать:
 
 ```bash
 $ cargo build
    Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)
 $ ./target/debug/hello_world
 Hello, world!
 ```
 
-Bam! We build our project with `cargo build`, and run it with
-`./target/debug/hello_world`. We can do both in one step with `cargo run`:
+Та-да! Мы собрали наш проект вызвав `cargo build` и запустили его с помощью
+`./target/debug/hello_world`. На первый взгляд это кажется сложнее, по сравнению
+с более простым использованием `rustc`, но подумаем о будущем: если бы в нашем
+проекте было больше одного файла, мы бы должны были вызвать `rustc` для каждого
+и передать ему кучу параметров, что бы собрать их все вместе. С Cargo, когда наш
+проект вырастет, нам понадобится вызвать только команду `cargo build` и она всё
+сделает за нас. Когда вы закончите работать над проектом, и он окончательно
+будет готов к релизу, то можете использовать команду `cargo build --release` для
+компиляции ваших крэйтов с оптимизацией.
 
-```bash
-$ cargo run
-     Running `target/debug/hello_world`
-Hello, world!
-```
-
-Notice that we didn’t re-build the project this time. Cargo figured out that
-we hadn’t changed the source file, and so it just ran the binary. If we had
-made a modification, we would have seen it do both:
-
-```bash
-$ cargo run
-   Compiling hello_world v0.0.1 (file:///home/yourname/projects/hello_world)
-     Running `target/debug/hello_world`
-Hello, world!
-```
-
-This hasn’t bought us a whole lot over our simple use of `rustc`, but think
-about the future: when our project gets more complex, we would need to do more
-things to get all of the parts to properly compile. With Cargo, as our project
-grows, we can just `cargo build`, and it’ll work the right way.
-
-When your project is finally ready for release, you can use
-`cargo build --release` to compile your project with optimizations.
-
-You'll also notice that Cargo has created a new file: `Cargo.lock`.
+Так же вы должны были заметить, что Cargo создал новый файл: `Cargo.lock`.
 
 ```toml
 [root]
 name = "hello_world"
 version = "0.0.1"
 ```
 
-This file is used by Cargo to keep track of dependencies in your application.
-Right now, we don’t have any, so it’s a bit sparse. You won't ever need
-to touch this file yourself, just let Cargo handle it.
+Этот файл используется Cargo для отслеживания зависимостей в вашем приложении.
+Прямо сейчас у нас нет ни одной, поэтому этот файл немного пустоват. Вам не
+нужно редактировать этот файл самостоятельно, Cargo сам с ним разберётся.
 
-That’s it! We’ve successfully built `hello_world` with Cargo. Even though our
-program is simple, it’s using much of the real tooling that you’ll use for the
-rest of your Rust career. You can expect to do this to get started with
-virtually all Rust projects:
+Так! Мы успешно собрали `hello_world` с помощью Cargo. Несмотря на то, что наша
+программа проста, мы использовали большую часть реальных инструментов, которые
+вы будете использовать в своём дальнейшем пути Rust программиста.
 
-```bash
-$ git clone someurl.com/foo
-$ cd foo
-$ cargo build
-```
+## Новый проект
 
-## A New Project
+Вам не нужно повторять вышеприведённые шаги каждый раз, когда вы хотите создать
+новый проект! Cargo может создать директорию проекта, в котором вы сразу сможете
+приступить к разработке.
 
-You don’t have to go through this whole process every time you want to start a
-new project! Cargo has the ability to make a bare-bones project directory in
-which you can start developing right away.
-
-To start a new project with Cargo, use `cargo new`:
+Чтобы создать новый проект с помощью Cargo, нужно ввести команду `cargo new`:
 
 ```bash
 $ cargo new hello_world --bin
 ```
 
-We’re passing `--bin` because we're making a binary program: if we were making
-a library, we'd leave it off.
+Мы указываем аргумент `--bin`, т.к. хотим создать исполняемую программу. Если мы
+не укажем этот аргумент, то Cargo создаст проект для библиотеки.
 
-Let's check out what Cargo has generated for us:
+Давайте теперь посмотрим на то, что Cargo создал нам:
 
 ```bash
 $ cd hello_world
 $ tree .
 .
 ├── Cargo.toml
 └── src
     └── main.rs
 
-1 directory, 2 files
+1 директория, 2 файла
 ```
 
-If you don't have the `tree` command, you can probably get it from your
-distribution’s package manager. It’s not necessary, but it’s certainly useful.
+>Если у вас нет команды `tree`, то скорее всего эта программа не установлена в
+>вашей системе. Попробуйте установить её через менеджер пакетов вашего
+>дистрибутива. Это не обязательно, но данная утилита очень полезна.
 
-This is all we need to get started. First, let’s check out `Cargo.toml`:
+Все файлы и директории уже на месте. Теперь можем начинать. Для начала проверим
+файл `Cargo.toml`:
 
 ```toml
 [package]
 
 name = "hello_world"
 version = "0.0.1"
-authors = ["Your Name <you@example.com>"]
+authors = ["Ваше Имя <you@example.ru>"]
 ```
 
-Cargo has populated this file with reasonable defaults based off the arguments
-you gave it and your `git` global configuration. You may notice that Cargo has
-also initialized the `hello_world` directory as a `git` repository.
+Cargo наполнил этот файл значениями по умолчанию на основании переданных
+аргументов и глобальной конфигурации `git`. Обратите внимание, что Cargo уже в
+директории `hello_world` создал репозиторий для `git`.
 
-Here’s what’s in `src/main.rs`:
+Также заглянем в `src/main.rs`:
 
 ```rust
 fn main() {
     println!("Hello, world!");
 }
 ```
 
-Cargo has generated a "Hello World!" for us, and you’re ready to start coding! Cargo
-has its own [guide][guide] which covers Cargo’s features in much more depth.
+Cargo сгенерировал "Hello World!" для нас и вы можете уже приступить к
+программированию! Больше информации о Cargo вы можете получить
+[здесь](http://doc.crates.io/guide.html).
 
-[guide]: http://doc.crates.io/guide.html
-
-Now that you’ve got the tools down, let’s actually learn more about the Rust
-language itself. These are the basics that will serve you well through the rest
-of your time with Rust.
-
-You have two options: Dive into a project with ‘[Learn Rust][learnrust]’, or
-start from the bottom and work your way up with ‘[Syntax and
-Semantics][syntax]’. More experienced systems programmers will probably prefer
-‘Learn Rust’, while those from dynamic backgrounds may enjoy either. Different
-people learn differently! Choose whatever’s right for you.
-
-[learnrust]: learn-rust.html
-[syntax]: syntax-and-semantics.html
+Теперь давайте отложим инструментарий и узнаем больше о самом языке. Эти знания
+помогут постепенно погрузиться в Rust.
