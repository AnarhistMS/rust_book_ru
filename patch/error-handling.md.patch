diff --git a/rust/master:src/doc/trpl/error-handling.md b/fix_current_version:error-handling.md
index cf60bd8..84baee9 100644
--- a/rust/master:src/doc/trpl/error-handling.md
+++ b/fix_current_version:error-handling.md
@@ -1,52 +1,59 @@
-% Error Handling
+% Обработка ошибок
 
 > The best-laid plans of mice and men  
 > Often go awry
 >
 > "Tae a Moose", Robert Burns
 
-Sometimes, things just go wrong. It's important to have a plan for when the
-inevitable happens. Rust has rich support for handling errors that may (let's
-be honest: will) occur in your programs.
+Иногда что-то может пойти не так. Очень важно иметь план действий на тот случай,
+когда это неизбежно произойдет. Rust имеет богатую поддержку для обработки
+ошибок, которые могут (давайте будем честны: будут) происходить в ваших
+программах.
 
-There are two main kinds of errors that can occur in your programs: failures,
-and panics. Let's talk about the difference between the two, and then discuss
-how to handle each. Then, we'll discuss upgrading failures to panics.
+Есть два основных типа ошибок, которые могут возникнуть в ваших программах:
+неудачи (failures), и паники (panics). Давайте поговорим о разнице между ними, а
+затем обсудим, как справиться с каждой из них. Затем мы обсудим преобразование
+неудачи в панику.
 
-# Failure vs. Panic
+# Типы ошибок: неудача, паника
 
-Rust uses two terms to differentiate between two forms of error: failure, and
-panic. A *failure* is an error that can be recovered from in some way. A
-*panic* is an error that cannot be recovered from.
+Rust использует два понятия, чтобы различать два типа ошибок: неудачи и паники.
+*Неудача* - это ошибка, после которой, в некоторых случаях, может быть
+восстановлена работоспособность программы. *Паника* - это ошибка, после которой
+работоспособность программы не может быть восстановлена.
 
-What do we mean by "recover"? Well, in most cases, the possibility of an error
-is expected. For example, consider the `from_str` function:
+Что мы подразумеваем под понятием "восстановить"? В большинстве случаев,
+возможность возникновения ошибок ожидаема. Например, рассмотрим функцию
+`from_str`:
 
 ```{rust,ignore}
 from_str("5");
 ```
 
-This function takes a string argument and converts it into another type. But
-because it's a string, you can't be sure that the conversion actually works.
-For example, what should this convert to?
+Эта функция принимает строку в качестве аргумента и преобразует его в другой
+тип. Но, так как это строка, вы не можете быть уверены, что преобразование
+пройдет успешно. Например, во что должно быть преобразовано следующее?
 
 ```{rust,ignore}
 from_str("hello5world");
 ```
 
-This won't work. So we know that this function will only work properly for some
-inputs. It's expected behavior. We call this kind of error a *failure*.
+Это не будет работать. Итак, мы знаем, что эта функция будет работать только при
+некоторых входных данных. Это ожидаемое поведение. Мы называем такой тип ошибок
+*неудача*.
 
-On the other hand, sometimes, there are errors that are unexpected, or which
-we cannot recover from. A classic example is an `assert!`:
+С другой стороны, иногда есть ошибки, которые являются неожиданными, или после
+которых мы не можем восстановить работоспособность программы. Классическим
+примером является `assert!`:
 
 ```{rust,ignore}
 assert!(x == 5);
 ```
 
-We use `assert!` to declare that something is true. If it's not true, something
-is very wrong. Wrong enough that we can't continue with things in the current
-state. Another example is using the `unreachable!()` macro:
+Мы используем `assert!`, чтобы заявить, что что-то не верно. Если это не верно,
+то что-то очень неправильно. Настолько неправильно, что мы не можем продолжать
+работу программы в текущем состоянии. Другой пример - использование макроса
+`unreachable!()`:
 
 ```{rust,ignore}
 enum Event {
@@ -74,14 +81,15 @@ fn main() {
 }
 ```
 
-This will give us an error:
+Этот пример выведет следующую ошибку:
 
 ```text
 error: non-exhaustive patterns: `_` not covered [E0004]
 ```
 
-While we know that we've covered all possible cases, Rust can't tell. It
-doesn't know that probability is between 0.0 and 1.0. So we add another case:
+Хотя мы и знаем, что рассмотрели все возможные случаи, но Rust этого не знает.
+Он не знает, что вероятность находится между 0,0 и 1,0. Поэтому мы добавляем еще
+один случай:
 
 ```rust
 use Event::NewRelease;
@@ -112,25 +120,26 @@ fn main() {
 }
 ```
 
-We shouldn't ever hit the `_` case, so we use the `unreachable!()` macro to
-indicate this. `unreachable!()` gives a different kind of error than `Result`.
-Rust calls these sorts of errors *panics*.
+Мы никогда не должны попадать в случай `_`, поэтому мы используем макрос
+`unreachable!()`, чтобы сообщить об этом. `unreachable!()` выдает другой тип
+ошибки, нежели `Result`. Rust называет такой тип ошибок *паника*.
 
-# Handling errors with `Option` and `Result`
+# Обработка ошибок с помощью `Option` и `Result`
 
-The simplest way to indicate that a function may fail is to use the `Option<T>`
-type. Remember our `from_str()` example? Here's its type signature:
+Простейший способ указать, что функция может потерпеть неудачу, это использовать
+тип `Option<T>`. Помните наш пример с функцией `from_str()`? Вот ее сигнатура:
 
 ```{rust,ignore}
 pub fn from_str<A: FromStr>(s: &str) -> Option<A>
 ```
 
-`from_str()` returns an `Option<A>`. If the conversion succeeds, it will return
-`Some(value)`, and if it fails, it will return `None`.
+Функция `from_str()` возвращает `Option<A>`. Если преобразование успешно, то она
+возвращает `Some(value)`, а если неудачно, то `None`.
 
-This is appropriate for the simplest of cases, but doesn't give us a lot of
-information in the failure case. What if we wanted to know _why_ the conversion
-failed? For this, we can use the `Result<T, E>` type. It looks like this:
+Такой вариант подходит для простейших случаев, однако он не дает нам достаточно
+информации в случае неудачи. Что же делать, если мы хотим знать причину,
+_почему_ преобразование не удалось? Для этого мы можем использовать `Result<T,
+E>`. Выглядит это следующим образом:
 
 ```rust
 enum Result<T, E> {
@@ -139,12 +148,13 @@ enum Result<T, E> {
 }
 ```
 
-This enum is provided by Rust itself, so you don't need to define it to use it
-in your code. The `Ok(T)` variant represents a success, and the `Err(E)` variant
-represents a failure. Returning a `Result` instead of an `Option` is recommended
-for all but the most trivial of situations.
+Это перечисление определено непосредственно в Rust, так что вам не нужно
+определять его самостоятельно, чтобы использовать в своем коде. `Ok(T)` вариант
+представляет собой успех, а `Err(E)` вариант представляет собой неудачу.
+Рекомендуется возвращать `Result` вместо `Option` во всех случаях, кроме самых
+тривиальных.
 
-Here's an example of using `Result`:
+Ниже приведен пример использования `Result`:
 
 ```rust
 #[derive(Debug)]
@@ -175,48 +185,54 @@ match version {
 }
 ```
 
-This function makes use of an enum, `ParseError`, to enumerate the various
-errors that can occur.
+В примере показана функция, которая использует перечисление `ParseError`, чтобы
+определить ошибки, которые могут возникнуть.
 
-# Non-recoverable errors with `panic!`
+# Использование `panic!`
 
-In the case of an error that is unexpected and not recoverable, the `panic!`
-macro will induce a panic. This will crash the current thread, and give an error:
+В случае ошибки, которая является неожиданной, и после которой не может быть
+восстановлена работоспособность программы, макрос `panic!` будет вызывать
+панику. Это приведет к аварийному завершению текущего потока, и выдаст сообщение
+об ошибке:
 
 ```{rust,ignore}
 panic!("boom");
 ```
 
-gives
+выводит
 
 ```text
 thread '<main>' panicked at 'boom', hello.rs:2
 ```
 
-when you run it.
+когда вы запускаете пример.
 
-Because these kinds of situations are relatively rare, use panics sparingly.
+Подобные ситуации встречаются довольно редко, поэтому используйте паники
+осмотрительно.
 
-# Upgrading failures to panics
+# Преобразование неудачи в панику
 
-In certain circumstances, even though a function may fail, we may want to treat
-it as a panic instead. For example, `io::stdin().read_line()` returns an
-`IoResult<String>`, a form of `Result`, when there is an error reading the
-line. This allows us to handle and possibly recover from this sort of error.
+В некоторых случаях, когда функция может потерпеть неудачу, нам может
+понадобиться рассматривать эту неудачу как панику. Например,
+`io::stdin().read_line()` возвращает `IoResult<String>`, один из видов `Result`,
+если произошла ошибка при чтении строки. Это позволяет нам обработать такого
+рода ошибку и, возможно, восстановить работоспособность программы.
 
-If we don't want to handle this error, and would rather just abort the program,
-we can use the `unwrap()` method:
+Если же нам не нужно обрабатывать ошибку, а нужно просто прервать программу, то
+мы можем использовать метод `unwrap()`:
 
 ```{rust,ignore}
 io::stdin().read_line().unwrap();
 ```
 
-`unwrap()` will `panic!` if the `Option` is `None`. This basically says "Give
-me the value, and if something goes wrong, just crash." This is less reliable
-than matching the error and attempting to recover, but is also significantly
-shorter. Sometimes, just crashing is appropriate.
+`unwrap()` вызывает `panic!`, если `Option` будет `None`. Такой подход просто
+говорит: "Дай мне значение, но если что-то пойдет не так, то просто аварийно
+заверши программу". Такой подход менее надежен, чем распаковка ошибки с
+последующей пыткой восстановления работоспособности программы, но он значительно
+короче. Хотя в некоторых ситуациях аварийное завершение программы более
+целесообразно.
 
-There's another way of doing this that's a bit nicer than `unwrap()`:
+Вот еще один способ распаковки ошибок, который немного лучше, чем `unwrap()`:
 
 ```{rust,ignore}
 let input = io::stdin().read_line()
@@ -224,17 +240,17 @@ let input = io::stdin().read_line()
                        .expect("Failed to read line");
 ```
 
-`ok()` converts the `IoResult` into an `Option`, and `expect()` does the same
-thing as `unwrap()`, but takes a message. This message is passed along to the
-underlying `panic!`, providing a better error message if the code errors.
+`ok()` преобразует `IoResult` в `Option`, а `expect()` делает то же самое, что и
+`unwrap()`, но принимает сообщение. Это сообщение передается в нижележащий вызов
+`panic!`, обеспечивая лучшее сообщение об ошибке, если ошибок в коде.
 
-# Using `try!`
+# Использование `try!`
 
-When writing code that calls many functions that return the `Result` type, the
-error handling can be tedious. The `try!` macro hides some of the boilerplate
-of propagating errors up the call stack.
+При написании кода, который вызывает множество функций, возвращающих тип
+`Result`, обработка ошибок может быть утомительной. Макрос `try!` скрывает
+некоторые шаблонные действия, передавая ошибки выше по стеку вызовов.
 
-It replaces this:
+Он заменяет этот код:
 
 ```rust
 use std::fs::File;
@@ -264,7 +280,7 @@ fn write_info(info: &Info) -> io::Result<()> {
 }
 ```
 
-With this:
+на этот код:
 
 ```rust
 use std::fs::File;
@@ -288,13 +304,13 @@ fn write_info(info: &Info) -> io::Result<()> {
 }
 ```
 
-Wrapping an expression in `try!` will result in the unwrapped success (`Ok`)
-value, unless the result is `Err`, in which case `Err` is returned early from
-the enclosing function.
+Упаковка выражения в `try!` приведет к распакованному успешному (`Ok`) значению,
+если результат не `Err`, и в этом случае `Err` возвращается раньше от функции
+включения.
 
-It's worth noting that you can only use `try!` from a function that returns a
-`Result`, which means that you cannot use `try!` inside of `main()`, because
-`main()` doesn't return anything.
+Стоит отметить, что вы можете использовать `try!` только из функции, которая
+возвращает `Result`, что означает, что вы не можете использовать `try!` внутри
+функции `main()`, потому что `main()` ничего не возвращают.
 
-`try!` makes use of [`FromError`](../std/error/#the-fromerror-trait) to determine
-what to return in the error case.
+`try!` использует [`FromError`](../std/error/#the-fromerror-trait), чтобы
+определять, что следует вернуть в случае ошибки.
