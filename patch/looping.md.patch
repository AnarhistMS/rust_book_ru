diff --git a/rust/master:src/doc/trpl/looping.md b/master:looping.md
index 28f02b1..35cba9e 100644
--- a/rust/master:src/doc/trpl/looping.md
+++ b/master:looping.md
@@ -1,59 +1,46 @@
-% Looping
+% Циклы
 
-Looping is the last basic construct that we haven't learned yet in Rust. Rust has
-two main looping constructs: `for` and `while`.
+Последнюю базовую конструкцию в Rust которую мы изучим это циклы. В языке Rust имеется две конструкции для создания циклов: `for` и `while`.
 
-## `for`
+## Цикл `for`
 
-The `for` loop is used to loop a particular number of times. Rust's `for` loops
-work a bit differently than in other systems languages, however. Rust's `for`
-loop doesn't look like this "C-style" `for` loop:
+Цикл `for` нужен для повторения блока кода определенного количества раз. Циклы `for` в Rust работают немного иначе, чем в других языках программирования. Например в Си подобном языке цикл `for` выглядит так:
 
-```{c}
+```c
 for (x = 0; x < 10; x++) {
     printf( "%d\n", x );
 }
 ```
 
-Instead, it looks like this:
+Однако, этот код в Rust будет выглядеть следующим образом:
 
-```{rust}
+```rust
 for x in 0..10 {
     println!("{}", x); // x: i32
 }
 ```
 
-In slightly more abstract terms,
+Можно показать цикл более абстрактнее:
 
-```{ignore}
-for var in expression {
-    code
+```
+for var in выражение {
+    тело_цикла
 }
 ```
 
-The expression is an iterator, which we will discuss in more depth later in the
-guide. The iterator gives back a series of elements. Each element is one
-iteration of the loop. That value is then bound to the name `var`, which is
-valid for the loop body. Once the body is over, the next value is fetched from
-the iterator, and we loop another time. When there are no more values, the
-`for` loop is over.
+Выражение это итератор, который мы будем рассматривать позже в этом руководстве. Итератор возвращает серию элементов, где каждый элемент будет являться одной итерацией цикла. Значение этого элемента затем присваивается переменной `var`, которая будет доступна в теле цикла. После окончания тела цикла, берется следующее значение итератора и снова выполняется тело цикла. Когда в итераторе закончатся значения, то цикл `for` завершается.
 
-In our example, `0..10` is an expression that takes a start and an end position,
-and gives an iterator over those values. The upper bound is exclusive, though,
-so our loop will print `0` through `9`, not `10`.
+В нашем примере `0..10` это выражение, где задается начальное и конечное значение, и возвращает итератор, который будет возвращать серию значений последовательно, начиная с начального значения и заканчивая конечным значением не включая его самого. В нашем примере будет напечатано от `0` до `9`, но не будет напечатано `10`.
 
-Rust does not have the "C-style" `for` loop on purpose. Manually controlling
-each element of the loop is complicated and error prone, even for experienced C
-developers.
+В Rust нет цикла `for` как в Си-подобном синтаксисе, т.к. управлять каждым элементом цикла вручную сложно и приводит к ошибкам даже у опытных программистов на Си.
 
-We'll talk more about `for` when we cover *iterators*, later in the Guide.
+Мы вернемся к циклам `for` когда начнем рассматривать *итераторы*, позже в этом Руководстве.
 
-## `while`
+## Цикл `while`
 
-The other kind of looping construct in Rust is the `while` loop. It looks like
-this:
+Цикл `while` это еще один вид конструкции цикла в Rust. Выглядит он так:
 
-```{rust}
+```rust
 let mut x = 5; // mut x: u32
 let mut done = false; // mut done: bool
 
@@ -64,33 +51,27 @@ while !done {
 }
 ```
 
-`while` loops are the correct choice when you're not sure how many times
-you need to loop.
+этот цикл применяется, если неизвестно сколько раз нужно выполнить тело цикла, чтобы получть результат. При каждой итерации цикла проверяется условие, если оно истино, то запускается следующая итерация, иначе цикл `while` завершается.
 
-If you need an infinite loop, you may be tempted to write this:
+Если вам нужен бесконечный цикл, то можете сделать условие всегда истинным:
 
-```{rust,ignore}
+```rust
 while true {
 ```
 
-However, Rust has a dedicated keyword, `loop`, to handle this case:
+Однако, в Rust имеется ключевое слово `loop` для такого случая:
 
-```{rust,ignore}
+```rust
 loop {
 ```
 
-Rust's control-flow analysis treats this construct differently than a
-`while true`, since we know that it will always loop. The details of what
-that _means_ aren't super important to understand at this stage, but in
-general, the more information we can give to the compiler, the better it
-can do with safety and code generation, so you should always prefer
-`loop` when you plan to loop infinitely.
+В Rust анализатор потока управления обрабатывает конструкцию `loop` иначе, чем `while true`, хотя для нас это одно и тоже. На данном этапе изучения Rust нам не важно знать в чем именно различие между этими конструкциями, но если вы хотите сделать бесконечный цикл, то используйте конструкцию `loop`, т.к. компилятор сможет транслировать ваш код в более эффективный и безопасный машинный код.
 
-## Ending iteration early
+## Управление итерацией цикла
 
-Let's take a look at that `while` loop we had earlier:
+Давайте посмотрим на цикл `while` снова:
 
-```{rust}
+```rust
 let mut x = 5;
 let mut done = false;
 
@@ -101,13 +82,11 @@ while !done {
 }
 ```
 
-We had to keep a dedicated `mut` boolean variable binding, `done`, to know
-when we should exit out of the loop. Rust has two keywords to help us with
-modifying iteration: `break` and `continue`.
+В этом примере имеется изменяемая переменная `done` типа boolean, которая используется в условии для выхода из цикла. В Rust имеются два ключевых слова, которые помогут нам работать с итерациями цикла: `break` и `continue`.
 
-In this case, we can write the loop in a better way with `break`:
+Можем переписать цикл более лучшим способом с помощью `break`, чтобы избавиться от переменной `done`:
 
-```{rust}
+```rust
 let mut x = 5;
 
 loop {
@@ -117,17 +96,16 @@ loop {
 }
 ```
 
-We now loop forever with `loop` and use `break` to break out early.
+Теперь мы исользуем бесконечный цикл `loop` и для выхода из цикла `break`.
 
-`continue` is similar, but instead of ending the loop, goes to the next
-iteration. This will only print the odd numbers:
+`continue` похож на `break`, но вместо выхода из цикла переходит к следующей итерации. Следующий пример отобразит только нечетные числа:
 
-```{rust}
-for x in 0..10 {
+```rust
+for x in 0u32..10 {
     if x % 2 == 0 { continue; }
 
     println!("{}", x);
 }
 ```
 
-Both `continue` and `break` are valid in both kinds of loops.
+Использовать `continue` и `break` можно как в циклах `while`, так и в циклах `for`.
