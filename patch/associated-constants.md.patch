diff --git a/rust/master:src/doc/trpl/associated-constants.md b/HEAD:associated-constants.md
index 1c097be..abcf5d1 100644
--- a/rust/master:src/doc/trpl/associated-constants.md
+++ b/HEAD:associated-constants.md
@@ -1,79 +1,81 @@
-% Associated Constants
+% Ассоциированные константы
 
-With the `associated_consts` feature, you can define constants like this:
+С включенной фичей `associated_consts` вы можете определить константы вроде
+этой:
 
 ```rust
 #![feature(associated_consts)]
 
 trait Foo {
     const ID: i32;
 }
 
 impl Foo for i32 {
     const ID: i32 = 1;
 }
 
 fn main() {
     assert_eq!(1, i32::ID);
 }
 ```
 
-Any implementor of `Foo` will have to define `ID`. Without the definition:
+Любая реализация `Foo` долна будет определить `ID`. Без этого определения:
 
 ```rust,ignore
 #![feature(associated_consts)]
 
 trait Foo {
     const ID: i32;
 }
 
 impl Foo for i32 {
 }
 ```
 
-gives
+выдаст ошибку
 
 ```text
 error: not all trait items implemented, missing: `ID` [E0046]
      impl Foo for i32 {
      }
 ```
 
-A default value can be implemented as well:
+Также может быть реализовано значение по умолчанию:
 
 ```rust
 #![feature(associated_consts)]
 
 trait Foo {
     const ID: i32 = 1;
 }
 
 impl Foo for i32 {
 }
 
 impl Foo for i64 {
     const ID: i32 = 5;
 }
 
 fn main() {
     assert_eq!(1, i32::ID);
     assert_eq!(5, i64::ID);
 }
 ```
 
-As you can see, when implementing `Foo`, you can leave it unimplemented, as
-with `i32`. It will then use the default value. But, as in `i64`, we can also
-add our own definition.
+Как вы можете видеть, при реализации `Foo`, можно оставить константу
+неопределенной, как в случае для `i32`. Тогда будет использовано значение по
+умолчанию. Но также можно и добавить собственное определение, как в случае для
+`i64`.
 
-Associated constants don’t have to be associated with a trait. An `impl` block
-for a `struct` works fine too:
+Ассоциированные константы могут быть ассоциированы не только с трейтом. Это
+также прекрасно работает и с блоком `impl` для `struct`:
 
 ```rust
 #![feature(associated_consts)]
 
 struct Foo;
 
 impl Foo {
     pub const FOO: u32 = 3;
 }
 ```
