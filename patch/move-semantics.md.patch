diff --git a/rust/master:src/doc/trpl/move-semantics.md b/HEAD:move-semantics.md
index b5bd53e..0a4b2e4 100644
--- a/rust/master:src/doc/trpl/move-semantics.md
+++ b/HEAD:move-semantics.md
@@ -1,105 +1,112 @@
-% Move Semantics
+% Семантика перемещения
 
-An important aspect of [ownership][ownership] is ‘move semantics’. Move
-semantics control how and when ownership is transferred between bindings.
+Важным аспектом [владения][ownership] является ’семантика перемещения’.
+Семантика перемещения контролирует, как и когда право собственности перемещается
+между привязками (связываниями).
 
 [ownership]: ownership.html
 
-For example, consider a type like `Vec<T>`, which owns its contents:
+В качестве примера рассмотрим тип, который владеет своим содержимым, такой как
+`Vec<T>`:
 
 ```rust
 let v = vec![1, 2, 3];
 ```
 
-I can assign this vector to another binding:
+Мы можем присвоить этот вектор другой привязке:
 
 ```rust
 let v = vec![1, 2, 3];
 
 let v2 = v;
 ```
 
-But, if we try to use `v` afterwards, we get an error:
+Но, если после этого мы попытаемся использовать `v`, то получим ошибку:
 
 ```rust,ignore
 let v = vec![1, 2, 3];
 
 let v2 = v;
 
 println!("v[0] is: {}", v[0]);
 ```
 
-It looks like this:
+Ошибка выглядит следующим образом:
 
 ```text
 error: use of moved value: `v`
 println!("v[0] is: {}", v[0]);
                         ^
 ```
 
-A similar thing happens if we define a function which takes ownership, and
-try to use something after we’ve passed it as an argument:
+То же самое произойдет, если мы определим функцию, которая принимает право
+владения, и попробуем использовать что-то после того как мы передали это что-то
+в качестве аргумента в эту функцию:
 
 ```rust,ignore
 fn take(v: Vec<i32>) {
     // what happens here isn’t important.
 }
 
 let v = vec![1, 2, 3];
 
 take(v);
 
 println!("v[0] is: {}", v[0]);
 ```
 
-Same error: “use of moved value.” When we transfer ownership to something else,
-we say that we’ve ‘moved’ the thing we refer to. You don’t need some sort of
-special annotation here, it’s the default thing that Rust does.
+Та же самая ошибка: "используется перемещенное значение". Когда мы передаем
+право владения куда-то еще, мы как бы говорим, что мы 'перемещаем' то, на что
+ссылаемся. При этом не нужно указывать какую-либо специальную аннотацию, Rust
+делает это по-умолчанию.
 
-# The details
+# Детали
 
-The reason that we cannot use a binding after we’ve moved it is subtle, but
-important. When we write code like this:
+Причина, по которой мы не можем использовать привязку после того как мы ее
+переместили, трудно заметная, но очень важная. Когда мы пишем код вроде этого:
 
 ```rust
 let v = vec![1, 2, 3];
 
 let v2 = v;
 ```
 
-The first line creates some data for the vector on the stack, `v`. The vector’s
-data, however, is stored on the heap, and so it contains a pointer to that
-data. When we move `v` to `v2`, it creates a copy of that data, for `v2`. Which
-would mean two pointers to the contents of the vector on the heap. That would
-be a problem: it would violate Rust’s safety guarantees by introducing a data
-race. Therefore, Rust forbids using `v` after we’ve done the move.
+Первая строка создает некоторые данные для вектора в стеке, `v`. Данные самого
+вектора, однако, сохраняются в куче, и поэтому стековые данные содержат
+указатель на данные в куче. Когда мы перемещаем `v` в `v2`, то создается копия
+стековых данных, для `v2`. Что будет означать, что два указателя ссылаются на
+расположенный в куче вектор. Такое поведение могло бы быть проблемой: оно
+нарушало бы гарантии безопасности Rust, привнося гонки данных. Поэтому Rust
+запрещает использование `v` после того как мы выполнили его перемещение.
 
-It’s also important to note that optimizations may remove the actual copy of
-the bytes, depending on circumstances. So it may not be as inefficient as it
-initially seems.
+Важно также отметить, что оптимизация может удалить фактическую (точную) копию
+байтов, в зависимости от обстоятельств. Так что это может быть не так уж
+неэффективно, как выглядит на первый взгляд.
 
-# `Copy` types
+# Типы, реализующие трейт `Copy`
 
-We’ve established that when ownership is transferred to another binding, you
-cannot use the original binding. However, there’s a [trait][traits] that changes this
-behavior, and it’s called `Copy`. We haven’t discussed traits yet, but for now,
-you can think of them as an annotation to a particular type that adds extra
-behavior. For example:
+Мы установили, что, как только право собственности передается другой привязке,
+то вы больше не можете использовать оригинальную привязку. Тем не менее,
+существует [трейт][traits], который изменяет такое поведение, и он называется
+`Copy`. Мы еще не обсуждали трейты, но пока вы можете думать о них как об
+аннотациях к конкретному типу, которые придают дополнительное поведение.
+Например:
 
 ```rust
 let v = 1;
 
 let v2 = v;
 
 println!("v is: {}", v);
 ```
 
-In this case, `v` is an `i32`, which implements the `Copy` trait. This means
-that, just like a move, when we assign `v` to `v2`, a copy of the data is made.
-But, unlike a move, we can still use `v` afterward. This is because an `i32`
-has no pointers to data somewhere else, copying it is a full copy.
+В этом примере `v` является` i32`, который реализует трейт `Copy`. Это означает,
+что, как и при перемещении, когда мы присваиваем привязку `v` привязке `v2`,
+будет создана копия данных. Но, в отличие от перемещения, мы можем использовать
+`v` в дальнейшем. Это потому, что в `i32` не имеет указателей на данные в каком-
+либо другом месте, поэтому копирование - это полная копия.
 
-We will discuss how to make your own types `Copy` in the [traits][traits]
-section.
+Мы будем обсуждать, как сделать свои собственные типы, реализующие трейт `Copy`
+в разделе [Трейты][traits].
 
 [traits]: traits.html
