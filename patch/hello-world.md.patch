diff --git a/rust/master:src/doc/trpl/hello-world.md b/HEAD:hello-world.md
index e58bac6..6754f017 100644
--- a/rust/master:src/doc/trpl/hello-world.md
+++ b/HEAD:hello-world.md
@@ -1,166 +1,170 @@
 % Hello, world!
 
-Now that you have Rust installed, let’s write your first Rust program. It’s
-traditional to make your first program in any new language one that prints the
-text “Hello, world!” to the screen. The nice thing about starting with such a
-simple program is that you can verify that your compiler isn’t just installed,
-but also working properly. And printing information to the screen is a pretty
-common thing to do.
+Теперь, когда вы установили Rust, напишем первую вашу программу на Rust.
+Традиционно, в любом новом изучаемом языке программирования, первая программа
+только выводит на экран текст "Hello, World!". Хорошо начинать с такой простой
+программы, т.к. вы можете убедиться что ваш компилятор не только установлен, но
+и работает правильно. Вывод информации на экран будет замечательным способом
+проверить это.
 
-The first thing that we need to do is make a file to put our code in. I like
-to make a `projects` directory in my home directory, and keep all my projects
-there. Rust does not care where your code lives.
+Первое, с чего мы должны начать, это создать файл для нашего кода. Мне нравится
+размещать каталог `projects` в домашней директории и хранить там все мои
+проекты. Для Rust не имеет значения где располагается ваш код.
 
-This actually leads to one other concern we should address: this guide will
-assume that you have basic familiarity with the command line. Rust itself makes
-no specific demands on your editing tooling, or where your code lives. If you
-prefer an IDE to the command line, you may want to check out
-[SolidOak][solidoak], or wherever plugins are for your favorite IDE. There are
-a number of extensions of varying quality in development by the community. The
-Rust team also ships [plugins for various editors][plugins]. Configuring your
-editor or IDE is out of the scope of this tutorial, so check the documentation
-for your setup, specifically.
+На самом деле это приводит к ещё одной проблеме о которой мы должны
+предупредить: данное руководство предполагает, что у вас есть базовые навыки
+работы с командной строкой. Rust не требует от вас великих познаний о командной
+строке, но до тех пор пока язык не будет в более завершённом, чем сейчас, виде,
+его поддержка в IDE затруднительна. У Rust нет специфичных требований к вашей
+среде разработки или к тому, где вы храните свой код.
 
-[solidoak]: https://github.com/oakes/SolidOak
-[plugins]: https://github.com/rust-lang/rust/blob/master/src/etc/CONFIGS.md
+С учётом вышесказанного, давайте сделаем каталог для нашей программы в
+директории с проектами.
 
-With that said, let’s make a directory in our projects directory.
-
-```bash
+```{bash}
 $ mkdir ~/projects
 $ cd ~/projects
 $ mkdir hello_world
 $ cd hello_world
 ```
 
-If you’re on Windows and not using PowerShell, the `~` may not work. Consult
-the documentation for your shell for more details.
+Если вы используете Windows и не используете PowerShell, `~` может не работать.
+Обратитесь к документации вашей оболочки для уточнения деталей.
 
-Let’s make a new source file next. We’ll call our file `main.rs`. Rust files
-always end in a `.rs` extension. If you’re using more than one word in your
-filename, use an underscore: `hello_world.rs` rather than `helloworld.rs`.
+Теперь создадим новый файл для текста программы. Я буду использовать синтаксис
+`editor имя_файла` для обозначения редактируемого файла в этих примерах, но вы
+можете создать и сохранить файл сами как угодно. Назовём наш файл `main.rs`:
 
-Now that you’ve got your file open, type this in:
+```{bash}
+$ editor main.rs
+```
 
-```rust
+Rust файлы всегда имеют расширение `.rs`. Если вы хотите использовать в имени
+вашего файла больше одного слова, разделяйте их подчёркиванием:
+`hello_world.rs`, а не `helloworld.rs`.
+
+Теперь когда файл открыт, добавьте в него следующий код:
+
+```{rust}
 fn main() {
     println!("Hello, world!");
 }
 ```
 
-Save the file, and then type this into your terminal window:
+Сохраните файл, а затем введите эти команды в ваше окно терминала:
 
-```bash
+```{bash}
 $ rustc main.rs
-$ ./main # or main.exe on Windows
+$ ./main # или main.exe в Windows
 Hello, world!
 ```
 
-Success! Let’s go over what just happened in detail.
+Вы также можете запустить эти примеры на сайте [play.rust-lang.org](http://play.rust-lang.org/).
 
-```rust
+Работает! Разберём подробнее что же произошло.
+
+```{rust}
 fn main() {
 
 }
 ```
 
-These lines define a *function* in Rust. The `main` function is special:
-it's the beginning of every Rust program. The first line says "I’m declaring a
-function named `main` which takes no arguments and returns nothing." If there
-were arguments, they would go inside the parentheses (`(` and `)`), and because
-we aren’t returning anything from this function, we can omit the return type
-entirely. We’ll get to it later.
+Эти строки определяют *функцию* в Rust'е. Функция `main` особенна: это начало
+каждой программы на Rust. Первая строка говорит: "Я объявляю функцию именуемую
+`main`, которая не получает параметров и ничего не возвращает". Если бы мы
+хотели передать в функцию параметры, то указали бы их в скобках (`(` и `)`). Так
+как нам не надо ничего возвращать из этой функции, мы можем опустить указание
+типа возвращаемого значения. Мы вернёмся к этому позже.
 
-You’ll also note that the function is wrapped in curly braces (`{` and `}`).
-Rust requires these around all function bodies. It is also considered good
-style to put the opening curly brace on the same line as the function
-declaration, with one space in between.
+Вы должны были заметить, что функция обёрнута в фигурные скобки (`{` и `}`).
+Rust требует их вокруг тел всех функций. Так же хорошим стилем считается ставить
+открывающую фигурную скобку на той же строке, что и объявление функции,
+отделённую от него одним пробелом.
 
-Next up is this line:
+Теперь эта строка:
 
-```rust
+```{rust}
     println!("Hello, world!");
 ```
 
-This line does all of the work in our little program. There are a number of
-details that are important here. The first is that it’s indented with four
-spaces, not tabs. Please configure your editor of choice to insert four spaces
-with the tab key. We provide some [sample configurations for various
-editors][configs].
+Эта строка делает всю работу в нашей маленькой программе. Тут есть несколько
+деталей, которые имеют существенное значение. Во-первых, отступ в четыре
+пробела, а не табуляция. Пожалуйста, настройте выбранный вами редактор так,
+чтобы вставлять четыре пробела при помощи клавиши табуляции. Мы предоставляем
+некоторые [примеры настроек для различных редакторов][configs].
 
 [configs]: https://github.com/rust-lang/rust/tree/master/src/etc/CONFIGS.md
 
-The second point is the `println!()` part. This is calling a Rust [macro][macro],
-which is how metaprogramming is done in Rust. If it were a function instead, it
-would look like this: `println()`. For our purposes, we don’t need to worry
-about this difference. Just know that sometimes, you’ll see a `!`, and that
-means that you’re calling a macro instead of a normal function. Rust implements
-`println!` as a macro rather than a function for good reasons, but that's an
-advanced topic. One last thing to mention: Rust’s macros are significantly
-different from C macros, if you’ve used those. Don’t be scared of using macros.
-We’ll get to the details eventually, you’ll just have to trust us for now.
+Теперь разберёмся с `println!()`. Это вызов *макроса*, которым представлено
+метапрограммирование в Rust'e. Если бы вместо макроса была функция, это бы
+выглядело следующим образом: `println()`. Для достижения нашей цели, нас не
+должна волновать эта разница. Просто знайте, что иногда вы будете видеть `!`, по
+которому можно понять, что вы вызываете макрос вместо нормальной функции. Rust
+реализует `println!` как макрос вместо функции по веским причинам, но это
+достаточно глубокая тема о которой мы поговорим позже. И последнее, что нужно
+отметить: макросы Rust'a значительно отличаются от макросов C, если вы их
+использовали. Не бойтесь использовать макросы. В конце концов мы вернёмся к
+деталям, а сейчас просто доверьтесь нам.
 
-[macro]: macros.html
+Идём дальше. `"Hello, world!"` - это *строка*. Строки удивительно сложная тема в
+системном языке программирования, и это статически расположенная в памяти
+строка. Мы расскажем больше о различных видах распределения памяти позже.
+Передадим эту строку в качестве аргумента в `println!`, который выводит строки
+на экран. Это достаточно просто!
 
-Next, `"Hello, world!"` is a ‘string’. Strings are a surprisingly complicated
-topic in a systems programming language, and this is a ‘statically allocated’
-string. If you want to read further about allocation, check out
-[the stack and the heap][allocation], but you don’t need to right now if you
-don’t want to. We pass this string as an argument to `println!`, which prints the
-string to the screen. Easy enough!
+В завершение, строка заканчивается точкой с запятой (`;`). Rust `выражение-
+ориентированный язык`, что означает, что в нём большая часть вещей является
+выражением. `;` используется для указания, что выражение закончилось и
+начинается следующее. Большинство строк кода на Rust заканчивается `;`. Мы
+рассмотрим это позже в отдельном разделе руководства.
 
-[allocation]: the-stack-and-the-heap.html
+На самом деле, завершением будет *сборка* и *запуск* нашей программы. Соберём
+программу компилятором `rustc`, передав ему в качестве аргумента название нашего
+файла с кодом:
 
-Finally, the line ends with a semicolon (`;`). Rust is an ‘expression oriented’
-language, which means that most things are expressions, rather than statements.
-The `;` is used to indicate that this expression is over, and the next one is
-ready to begin. Most lines of Rust code end with a `;`.
-
-Finally, actually compiling and running our program. We can compile with our
-compiler, `rustc`, by passing it the name of our source file:
-
-```bash
+```{bash}
 $ rustc main.rs
 ```
 
-This is similar to `gcc` or `clang`, if you come from a C or C++ background. Rust
-will output a binary executable. You can see it with `ls`:
+Это похоже на `gcc` или `clang`, если вы программировали раньше на C или C++.
+Rust выдаст двоичный исполняемый файл. Вы можете убедиться в этом с помощью
+`ls`:
 
-```bash
+```{bash}
 $ ls
 main  main.rs
 ```
 
-Or on Windows:
+Или в Windows:
 
-```bash
+```{bash}
 $ dir
 main.exe  main.rs
 ```
 
-There are now two files: our source code, with the `.rs` extension, and the
-executable (`main.exe` on Windows, `main` everywhere else)
+У нас есть два файла: наш исходный код, с расширением `.rs` и исполняемый файл
+(`main.exe` в Windows, `main` в остальных случаях)
 
-```bash
-$ ./main  # or main.exe on Windows
+```{bash}
+$ ./main  # или main.exe в Windows
 ```
 
-This prints out our `Hello, world!` text to our terminal.
+Мы получили выведенный в окне терминала текст `"Hello, world!"`.
 
-If you come from a dynamically typed language like Ruby, Python, or JavaScript,
-you may not be used to these two steps being separate. Rust is an
-‘ahead-of-time compiled language’, which means that you can compile a program,
-give it to someone else, and they don't need to have Rust installed. If you
-give someone a `.rb` or `.py` or `.js` file, they need to have a
-Ruby/Python/JavaScript implementation installed, but you just need one command
-to both compile and run your program. Everything is a tradeoff in language
-design, and Rust has made its choice.
+Если вы перешли из динамически-типизированных языков программирования вроде
+Ruby, Python или JavaScript, вы не можете использовать эти два шага отдельно.
+Rust *компилируемый перед исполнением* язык, это означает, что вы можете собрать
+программу, дать её кому-то ещё, и ему не нужно устанавливать Rust. Если вы
+передадите кому-нибудь `.rb`, `.py` или `.js` файл, им понадобится
+Ruby/Python/JavaScript, чтобы скомпилировать и запустить вашу программу, но
+запустить его они смогу одной командой. Все это взаимоисключаемо в дизайне
+языков программирования, и Rust сделал свой выбор.
 
-Congratulations! You have officially written a Rust program. That makes you a
-Rust programmer! Welcome. 🎊🎉👍
+Поздравляем! Вы официально написали программу на Rust. Это делает вас Rust-
+программистом! Добро пожаловать!
 
-Next, I'd like to introduce you to another tool, Cargo, which is used to write
-real-world Rust programs. Just using `rustc` is nice for simple things, but as
-your project grows, you'll want something to help you manage all of the options
-that it has, and to make it easy to share your code with other people and
-projects.
+Дальше мы познакомимся с новым инструментом `cargo`, который используется для
+написания настоящих программ в Rust. Использовать `rustc` удобно лишь для
+небольших программ, но по мере роста проекта потребуется инструмент, помогающий
+управлять настройками проекта, а также облегчит обмен кода с другими людьми и
+проектами.
