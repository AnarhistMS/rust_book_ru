diff --git a/rust/master:src/doc/trpl/closures.md b/master:closures.md
index bf4c2d9..9636c31 100644
--- a/rust/master:src/doc/trpl/closures.md
+++ b/master:closures.md
@@ -1,12 +1,8 @@
-% Closures
+% Замыкания
 
-So far, we've made lots of functions in Rust, but we've given them all names.
-Rust also allows us to create anonymous functions. Rust's anonymous
-functions are called *closures*. By themselves, closures aren't all that
-interesting, but when you combine them with functions that take closures as
-arguments, really powerful things are possible.
+К этому моменту мы уже создали много функций в Rust, но мы дали им всем имена. Rust также позволяет нам создавать анонимные функции. В Rust анонимные функции, называются *замыкания*. Сами по себе замыкания не предсталяют большого интереса, но, когда вы объединяете их с функциями, которые принимают замыкания в качестве аргументов, то становится возможным создавать по-настоящему мощные вещи.
 
-Let's make a closure:
+Давайте создадим замыкание:
 
 ```{rust}
 let add_one = |x| { 1 + x };
@@ -14,24 +10,18 @@ let add_one = |x| { 1 + x };
 println!("The sum of 5 plus 1 is {}.", add_one(5));
 ```
 
-We create a closure using the `|...| { ... }` syntax, and then we create a
-binding so we can use it later. Note that we call the function using the
-binding name and two parentheses, just like we would for a named function.
+Мы создаем замыкание с помощью `|...| { ... }` синтаксиса, а затем связываем его с именем, поэтому мы можем использовать его позже. Обратите внимание, что мы вызываем функцию с помощью связанного имени и двух круглых скобок, точно так же, как мы бы делали это для именонанной функции.
 
-Let's compare syntax. The two are pretty close:
+Давайте сравним синтаксис. Они довольно близки:
 
 ```{rust}
 let add_one = |x: i32| -> i32 { 1 + x };
 fn  add_one   (x: i32) -> i32 { 1 + x }
 ```
 
-As you may have noticed, closures infer their argument and return types, so you
-don't need to declare one. This is different from named functions, which
-default to returning unit (`()`).
+Как вы могли заметить, замыкание самостоятельно выводит типы аргументов и возвращаемого значения, так что вам не обязательно объявлять один. Это отличает их от именованных функций, которые по умолчанию возвращения блок (`()`).
 
-There's one big difference between a closure and named functions, and it's in
-the name: a closure "closes over its environment." What does that mean? It means
-this:
+Но есть одна большая разница между замыканием и именованной функцией, название говорит само за себя: замыкание "замыкает в себе свое окружение." Что это значит? Это означает следующее:
 
 ```{rust}
 fn main() {
@@ -43,11 +33,9 @@ fn main() {
 }
 ```
 
-The `||` syntax means this is an anonymous closure that takes no arguments.
-Without it, we'd just have a block of code in `{}`s.
+Синтаксис `||` означает, что это замыкание, которое не принимает никаких аргументов. Без него мы бы просто получили блок кода, заключенный в `{}`.
 
-In other words, a closure has access to variables in the scope where it's
-defined. The closure borrows any variables it uses, so this will error:
+Другими словами, замыкание имеет доступ к переменным в области определения, где оно определено. Замыкание заимствует все переменные, которые оно использует, так что это будет ошибка:
 
 ```{rust,ignore}
 fn main() {
@@ -59,20 +47,13 @@ fn main() {
 }
 ```
 
-## Moving closures
+## Перемещающие замыкания
 
-Rust has a second type of closure, called a *moving closure*. Moving
-closures are indicated using the `move` keyword (e.g., `move || x *
-x`). The difference between a moving closure and an ordinary closure
-is that a moving closure always takes ownership of all variables that
-it uses. Ordinary closures, in contrast, just create a reference into
-the enclosing stack frame. Moving closures are most useful with Rust's
-concurrency features, and so we'll just leave it at this for
-now. We'll talk about them more in the "Concurrency" chapter of the book.
+В Rust есть второй тип замыканий, называемых *перемещающие замыкания*. Перемещающие замыкания определяются с помощью ключевого слова `move` (например, `move || x * x`). Разница между перемещающим и обычным замыканиями в том, что перемещающее замыкание становится владельцем всех переменных, которые оно использует. Обычное замыкание, напротив, просто создает ссылку в замыкнутом кадре стека. Перемещающие замыкания являются наиболее полезными в сочетании с особенностями параллелизма Rust, и поэтому мы просто оставим эту тему сейчас. Мы поговорим о них более подробно в главе "параллелизм" этой книги.
 
-## Accepting closures as arguments
+## Передача замыканий в качестве аргументов
 
-Closures are most useful as an argument to another function. Here's an example:
+Замыкания являются наиболее полезными, если использовать их в качестве аргумента другой функции. Вот пример:
 
 ```{rust}
 fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {
@@ -86,14 +67,13 @@ fn main() {
 }
 ```
 
-Let's break the example down, starting with `main`:
+Давайте разберем пример, начиная с `main`:
 
 ```{rust}
 let square = |x: i32| { x * x };
 ```
 
-We've seen this before. We make a closure that takes an integer, and returns
-its square.
+Мы уже видели подобное раньше. Мы создаем замыкание, принимающее целое число, и возвращающее квадрат этого числа.
 
 ```{rust}
 # fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 { f(x) + f(x) }
@@ -101,33 +81,21 @@ its square.
 twice(5, square); // evaluates to 50
 ```
 
-This line is more interesting. Here, we call our function, `twice`, and we pass
-it two arguments: an integer, `5`, and our closure, `square`. This is just like
-passing any other two variable bindings to a function, but if you've never
-worked with closures before, it can seem a little complex. Just think: "I'm
-passing two variables: one is an i32, and one is a function."
+Эта строка более интересна. Здесь мы вызываем нашу функцию `twice`, и передаем ей два аргумента: целое число, `5`, и наш замыкание, `square`. Это аналогично передачи в функцию каких-либо двух других связанных переменных, но если вы никогда не работали с замыканиями ранее, это может показаться немного сложным. Подумайте только: "Я передаю две переменные: одна i32, а другая функция."
 
-Next, let's look at how `twice` is defined:
+Далее, давайте посмотрим на то, как `twice` определяется:
 
 ```{rust,ignore}
 fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {
 ```
 
-`twice` takes two arguments, `x` and `f`. That's why we called it with two
-arguments. `x` is an `i32`, we've done that a ton of times. `f` is a function,
-though, and that function takes an `i32` and returns an `i32`. This is
-what the requirement `Fn(i32) -> i32` for the type parameter `F` says.
-Now `F` represents *any* function that takes an `i32` and returns an `i32`.
+`twice` принимает два аргумента, `x` и `f`. Вот почему мы вызывали ее с двумя аргументами. `x` имеет тип `i32`, мы имели дело с этим много раз. `f` является функцией, которая принимает `i32` и возвращает `i32`. Это то, о чем говорит что требование `Fn(i32) -> i32` для параметра типа `F`. Теперь `F` представляет собой *любую* функцию, которая принимает `i32` и возвращает `i32`.
 
-This is the most complicated function signature we've seen yet! Give it a read
-a few times until you can see how it works. It takes a teeny bit of practice, and
-then it's easy. The good news is that this kind of passing a closure around
-can be very efficient. With all the type information available at compile-time
-the compiler can do wonders.
+Это самая сложная сигнатура функции из всех, которые мы видели до сих пор! Прочтите это несколько раз, пока вы не осознаете, как это работает. Это потребует немного практики. Хорошей новостью является то, что этот вид передачи замыкания может быть очень эффективным. Со всеми типами, информация о которых имеется во время компиляции, компилятор может творить чудеса.
 
-Finally, `twice` returns an `i32` as well.
+Наконец, `twice` возвращает `i32`.
 
-Okay, let's look at the body of `twice`:
+Хорошо, давайте посмотрим на тело функции `twice`:
 
 ```{rust}
 fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {
@@ -135,17 +103,15 @@ fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {
 }
 ```
 
-Since our closure is named `f`, we can call it just like we called our closures
-before, and we pass in our `x` argument to each one, hence the name `twice`.
+Так как наше замыкание имеет имя `f`, мы можем вызывать его так же, как мы вызывали наши замыкания прежде, и мы передаем аргумент `x` в каждый из двух вызовов, отсюда и название `twice`.
+
+Если вы сравните, `(5 * 5) + (5 * 5) == 50`, то уви так что это выходе мы получаем.
 
 If you do the math, `(5 * 5) + (5 * 5) == 50`, so that's the output we get.
 
-Play around with this concept until you're comfortable with it. Rust's standard
-library uses lots of closures where appropriate, so you'll be using
-this technique a lot.
+Поэкспериментируйте с этой концепцией, пока вы не чувствуете себя комфортно при работе с ней. В стандартной библиотеке Rust постоянно используются замыкания, где это уместно, так что вы часто будете сталкиваться с этой техникой.
 
-If we didn't want to give `square` a name, we could just define it inline.
-This example is the same as the previous one:
+Если мы не хотим присваивать имя `square`, мы могли бы просто определить его как встроенное замыкание. Этот пример точно такой же, как и предыдущий:
 
 ```{rust}
 fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {
@@ -157,8 +123,7 @@ fn main() {
 }
 ```
 
-A named function's name can be used wherever you'd use a closure. Another
-way of writing the previous example:
+Везде, где используется замыкание, можно использовать именованную функцию. Ниже приведен другой способ написания предыдущего примера:
 
 ```{rust}
 fn twice<F: Fn(i32) -> i32>(x: i32, f: F) -> i32 {
@@ -172,9 +137,9 @@ fn main() {
 }
 ```
 
-Doing this is not particularly common, but it's useful every once in a while.
+Это используется не особенно часто, но время от времени это бывает полезным.
 
-Before we move on, let us look at a function that accepts two closures.
+Прежде чем мы перейдем дальше, давайте посмотрим на функцию, которая принимает два замыкания.
 
 ```{rust}
 fn compose<F, G>(x: i32, f: F, g: G) -> i32
@@ -189,26 +154,12 @@ fn main() {
 }
 ```
 
-You might ask yourself: why do we need to introduce two type
-parameters `F` and `G` here?  Evidently, both `f` and `g` have the
-same signature: `Fn(i32) -> i32`.
-
-That is because in Rust each closure has its own unique type.
-So, not only do closures with different signatures have different types,
-but different closures with the *same* signature have *different*
-types, as well!
-
-You can think of it this way: the behavior of a closure is part of its
-type.  Therefore, using a single type parameter for both closures
-will accept the first of them, rejecting the second. The distinct
-type of the second closure does not allow it to be represented by the
-same type parameter as that of the first.  We acknowledge this, and
-use two different type parameters `F` and `G`.
-
-This also introduces the `where` clause, which lets us describe type
-parameters in a more flexible manner.
-
-That's all you need to get the hang of closures! Closures are a little bit
-strange at first, but once you're used to them, you'll miss them
-in other languages. Passing functions to other functions is
-incredibly powerful, as you will see in the following chapter about iterators.
+Вы можете задаться вопросом: почему мы использовали два параметра типа `F` и `G` здесь? Очевидно, что оба аргумента `f` и `g` имеют одинаковую сигнатуру: `Fn(i32) -> i32`.
+
+Это потому, что в Rust каждое замыкание имеет свой собственный уникальный тип. Поэтому не только замыкания с разными сигнатурами имеют различные типы, но и разные замыкания с *одинаковыми* сигнатурами также имеют *различные* типы!
+
+Вы можете думать об этом так: поведение замыкания является частью его типа. Таким образом, использование одного параметра типа для обоих замыканий будет принято первым из них, но отвергнуто вторым. Отличный тип второго замыкания не позволяет ему быть представленным тем же параметром типа, что и первое замыкание. Мы осознаем это, и поэтому используем два разных параметра типа `F` и `G`.
+
+Этот пример также вводит статью `where`, что позволяет нам описать параметры типов в более гибкой манере.
+
+Это все, что вам нужно, чтобы работать с замыканиями! Замыкания могут показаться немного странным на первый взгляд, но, как только вы привыкнете к ним, вам будет не хватать их в на других языках. Передача функций в другие функции может быть невероятно мощным, что вы увидите в следующей главе об итераторах.
