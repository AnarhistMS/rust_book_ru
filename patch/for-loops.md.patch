diff --git a/rust/master:src/doc/trpl/for-loops.md b/HEAD:for-loops.md
index 1e3f2fa..a0a565e 100644
--- a/rust/master:src/doc/trpl/for-loops.md
+++ b/HEAD:for-loops.md
@@ -1,43 +1,46 @@
-% for Loops
+% Циклы `for`
 
-The `for` loop is used to loop a particular number of times. Rust’s `for` loops
-work a bit differently than in other systems languages, however. Rust’s `for`
-loop doesn’t look like this “C-style” `for` loop:
+Цикл `for` нужен для повторения блока кода определенного количества раз. Циклы
+`for` в Rust работают немного иначе, чем в других языках программирования.
+Например в Си подобном языке цикл `for` выглядит так:
 
 ```c
 for (x = 0; x < 10; x++) {
     printf( "%d\n", x );
 }
 ```
 
-Instead, it looks like this:
+Однако, этот код в Rust будет выглядеть следующим образом:
 
 ```rust
 for x in 0..10 {
     println!("{}", x); // x: i32
 }
 ```
 
-In slightly more abstract terms,
+Можно показать цикл более абстрактнее:
 
 ```ignore
-for var in expression {
-    code
+for var in выражение {
+    тело_цикла
 }
 ```
 
-The expression is an [iterator][iterator]. The iterator gives back a series of
-elements. Each element is one iteration of the loop. That value is then bound
-to the name `var`, which is valid for the loop body. Once the body is over, the
-next value is fetched from the iterator, and we loop another time. When there
-are no more values, the `for` loop is over.
+Выражение это [итератор][iterator], который мы будем рассматривать позже в этом
+руководстве. Итератор возвращает серию элементов, где каждый элемент будет
+являться одной итерацией цикла. Значение этого элемента затем присваивается
+переменной `var`, которая будет доступна в теле цикла. После окончания тела
+цикла, берется следующее значение итератора и снова выполняется тело цикла.
+Когда в итераторе закончатся значения, то цикл `for` завершается.
 
 [iterator]: iterators.html
 
-In our example, `0..10` is an expression that takes a start and an end position,
-and gives an iterator over those values. The upper bound is exclusive, though,
-so our loop will print `0` through `9`, not `10`.
+В нашем примере `0..10` это выражение, где задается начальное и конечное
+значение, и возвращает итератор, который будет возвращать серию значений
+последовательно, начиная с начального значения и заканчивая конечным значением
+не включая его самого. В нашем примере будет напечатано от `0` до `9`, но не
+будет напечатано `10`.
 
-Rust does not have the “C-style” `for` loop on purpose. Manually controlling
-each element of the loop is complicated and error prone, even for experienced C
-developers.
+В Rust нет цикла `for` как в Си-подобном синтаксисе, т.к. управлять каждым
+элементом цикла вручную сложно и приводит к ошибкам даже у опытных программистов
+на Си.
