diff --git a/rust/master:./src/doc/trpl/references-and-borrowing.md b/HEAD:./syntax-and-semantics/references-and-borrowing.md
index bb5adac..1aecf9b 100644
--- a/rust/master:./src/doc/trpl/references-and-borrowing.md
+++ b/HEAD:./syntax-and-semantics/references-and-borrowing.md
@@ -1,371 +1,352 @@
-% References and Borrowing
+% Ссылки и Заимствование
 
-This guide is one of three presenting Rust’s ownership system. This is one of
-Rust’s most unique and compelling features, with which Rust developers should
-become quite acquainted. Ownership is how Rust achieves its largest goal,
-memory safety. There are a few distinct concepts, each with its own
-chapter:
+Эта глава является одной из трех, описывающих систему владения ресурсами Rust.
+Эта система представляет собой наиболее уникальную и привлекательную фичу Rust,
+о которой разработчики на Rust должны иметь полное представление. Владение - это
+то, как Rust достигает своей главной цели - безопасности памяти. Система
+владения включает в себя несколько различных концепций, каждая из которых
+рассматривается в своей собственной главе:
 
-* [ownership][ownership], the key concept
-* borrowing, which you’re reading now
-* [lifetimes][lifetimes], an advanced concept of borrowing
+* [владение][ownership], ключевая концепция
+* заимствование, ее вы сейчас читаете
+* [время жизни][lifetimes], расширение концепции заимствования
 
-These three chapters are related, and in order. You’ll need all three to fully
-understand the ownership system.
+Эти три главы взаимосвязаны, и их порядок важен. Вы должны будете освоить все
+три главы, чтобы полностью понять систему владения.
 
 [ownership]: ownership.html
 [lifetimes]: lifetimes.html
 
-# Meta
+# Мета
 
-Before we get to the details, two important notes about the ownership system.
+Прежде чем перейти к деталям, отметитм два важных нюанса о системе владения.
 
-Rust has a focus on safety and speed. It accomplishes these goals through many
-‘zero-cost abstractions’, which means that in Rust, abstractions cost as little
-as possible in order to make them work. The ownership system is a prime example
-of a zero cost abstraction. All of the analysis we’ll talk about in this guide
-is _done at compile time_. You do not pay any run-time cost for any of these
-features.
+Rust сфокусирован на безопасности и скорости. Это достигается за счет
+‘абстракций с нулевой стоимостью‘ (‘zero-cost abstractions‘), что означает, что
+в Rust стоимость абстракций должна быть настолько минимальной, насколько это
+возможно, без ущерба для работоспособности. Система владения ресурсами - это
+яркий пример абстракции с нулевой стоимостью. Весь анализ, о котором мы будем
+говорить в этом руководстве, выполняется _во время компиляции_. Вы не платите
+хоть сколько-нибудь времени рантайма за какую-либо из фич.
 
-However, this system does have a certain cost: learning curve. Many new users
-to Rust experience something we like to call ‘fighting with the borrow
-checker’, where the Rust compiler refuses to compile a program that the author
-thinks is valid. This often happens because the programmer’s mental model of
-how ownership should work doesn’t match the actual rules that Rust implements.
-You probably will experience similar things at first. There is good news,
-however: more experienced Rust developers report that once they work with the
-rules of the ownership system for a period of time, they fight the borrow
-checker less and less.
+Тем не менее, эта система все же имеет определенную стоимость: кривая обучения.
+Многие новые пользователи Rust испытыват то, что мы называем ‘борьба с проверкой
+заимствования‘, когда компилятор Rust отказывается компилировать программу,
+которая по мнению автора является абсолютно правильной. Это часто происходит
+потому, что мысленное представление программиста о том, как должно работать
+владение, не совпадает с реальными правилами, которыми оперирует Rust. Вы,
+наверное, также будете испытывать подобные трудности поначалу. Однако существует
+и хорошая новость: более опытные разработчики на Rust сообщают, что чем больше
+они работают с правилами системы владения, тем меньше они борются с проверкой
+заимствования.
 
-With that in mind, let’s learn about borrowing.
+Имея это в виду, давайте перейдем к изучению систему владения.
 
-# Borrowing
+# Заимствование
 
-At the end of the [ownership][ownership] section, we had a nasty function that looked
-like this:
+В конце главы [Владение][ownership], у нас была скверная функция, которая
+выглядела так:
 
 ```rust
 fn foo(v1: Vec<i32>, v2: Vec<i32>) -> (Vec<i32>, Vec<i32>, i32) {
     // do stuff with v1 and v2
 
     // hand back ownership, and the result of our function
     (v1, v2, 42)
 }
 
 let v1 = vec![1, 2, 3];
 let v2 = vec![1, 2, 3];
 
 let (v1, v2, answer) = foo(v1, v2);
 ```
 
-This is not idiomatic Rust, however, as it doesn’t take advantage of borrowing. Here’s
-the first step:
+Однако, этот код не является идиоматическим с точки зрения Rust, так как он не
+использует заимствование. Вот первый шаг:
 
 ```rust
 fn foo(v1: &Vec<i32>, v2: &Vec<i32>) -> i32 {
     // do stuff with v1 and v2
 
     // return the answer
     42
 }
 
 let v1 = vec![1, 2, 3];
 let v2 = vec![1, 2, 3];
 
 let answer = foo(&v1, &v2);
 
 // we can use v1 and v2 here!
 ```
 
-Instead of taking `Vec<i32>`s as our arguments, we take a reference:
-`&Vec<i32>`. And instead of passing `v1` and `v2` directly, we pass `&v1` and
-`&v2`. We call the `&T` type a ‘reference’, and rather than owning the resource,
-it borrows ownership. A binding that borrows something does not deallocate the
-resource when it goes out of scope. This means that after the call to `foo()`,
-we can use our original bindings again.
+Вместо того, чтобы принимать `Vec<i32>` в качестве аргументов, мы будем
+принимать ссылки: `&Vec<i32>`. И вместо передачи `v1` и `v2` напрямую, мы будем
+передавать `&v1` и `&v2`. Мы называем тип `&T` ‘ссылка‘, и вместо того, чтобы
+забирать право владения ресурсом, она его заимствует. Привязки, которые
+заимствуют что-то, не освобождают ресурс, когда они выходят из области
+видимости. Это означает, что, после вызова `foo()`, мы снова можем использовать
+наши оригинальные привязки.
 
-References are immutable, just like bindings. This means that inside of `foo()`,
-the vectors can’t be changed at all:
+Ссылки являются неизменяемыми, как и привязки. Это означает, что внутри `foo()`,
+векторы не могут быть изменены:
 
 ```rust,ignore
 fn foo(v: &Vec<i32>) {
      v.push(5);
 }
 
 let v = vec![];
 
 foo(&v);
 ```
 
-errors with:
+выдает ошибку:
 
 ```text
 error: cannot borrow immutable borrowed content `*v` as mutable
 v.push(5);
 ^
 ```
 
-Pushing a value mutates the vector, and so we aren’t allowed to do it.
+Добавление значения изменяет вектор, и поэтому компилятор не позволил нам это
+сделать.
 
-# &mut references
+# &mut ссылки
 
-There’s a second kind of reference: `&mut T`. A ‘mutable reference’ allows you
-to mutate the resource you’re borrowing. For example:
+Вот второй вид ссылок: `&mut T`. Это ‘изменяемая ссылка‘, которая позволяет
+изменять ресурс, который вы заимствуете. Например:
 
 ```rust
 let mut x = 5;
 {
     let y = &mut x;
     *y += 1;
 }
 println!("{}", x);
 ```
 
-This will print `6`. We make `y` a mutable reference to `x`, then add one to
-the thing `y` points at. You’ll notice that `x` had to be marked `mut` as well,
-if it wasn’t, we couldn’t take a mutable borrow to an immutable value.
+Этот код напечатает `6`. Мы создали `y`, изменяемую ссылку на `x`, а затем
+добавили единицу к значению, на которое указывает `y`. Следует отметить, что `x`
+также должна быть помечена как `mut`, если бы этого не было, то мы не могли бы
+взять изменяемый заем неизменяемого значения.
 
-Otherwise, `&mut` references are just like references. There _is_ a large
-difference between the two, and how they interact, though. You can tell
-something is fishy in the above example, because we need that extra scope, with
-the `{` and `}`. If we remove them, we get an error:
+Во всем остальном изменяемые ссылки (`&mut`) такие же, как и неизменяемые (`&`).
+Однако, существует большая разница между этими двумя концепциями, и тем, как они
+взаимодействуют. Вы можете сказать, что в приведенном выше примере есть что-то
+подозрительное, потому что нам зачем-то понадобилась дополнительная область
+видимости, созданная с помощью `{` и `}`. Если мы уберем эти скобки, то получим
+ошибку:
 
 ```text
 error: cannot borrow `x` as immutable because it is also borrowed as mutable
     println!("{}", x);
                    ^
 note: previous borrow of `x` occurs here; the mutable borrow prevents
 subsequent moves, borrows, or modification of `x` until the borrow ends
         let y = &mut x;
                      ^
 note: previous borrow ends here
 fn main() {
 
 }
 ^
 ```
 
-As it turns out, there are rules.
+Как оказалось, есть правила.
 
-# The Rules
+# Правила
 
-Here’s the rules about borrowing in Rust:
+Вот правила о заимствовании в Rust:
 
-First, any borrow must last for a smaller scope than the owner. Second, you may
-have one or the other of these two kinds of borrows, but not both at the same
-time:
+Во-первых, область видимости любого заема должна находиться в пределах области
+видимости владельца. Во-вторых, одновременно у вас может быть только один из
+двух перечисленных ниже видов заимствования, но не оба сразу:
 
-* 0 to N references (`&T`) to a resource.
-* exactly one mutable reference (`&mut T`)
+* от 0 до N неизменяемых ссылок (`&T`) на ресурс,
+* ровно одна изменяемая ссылка (`&mut T`) на ресурс.
 
 
-You may notice that this is very similar, though not exactly the same as,
-to the definition of a data race:
+Вы можете заметить, что они очень похожи, хотя и не совсем то же самое,
+относительно определения состояния гонки данных:
 
-> There is a ‘data race’ when two or more pointers access the same memory
-> location at the same time, where at least one of them is writing, and the
-> operations are not synchronized.
+> Состояние ’гонки данных’ возникает, когда два или более указателей имеют
+> доступ к одной и той же области памяти одновременно, и когда по крайней мере
+> один из них производит запись, а операции не синхронизированы.
 
-With references, you may have as many as you’d like, since none of them are
-writing. If you are writing, you need two or more pointers to the same memory,
-and you can only have one `&mut` at a time. This is how Rust prevents data
-races at compile time: we’ll get errors if we break the rules.
+Что касается неизменяемых ссылок, то вы можете иметь их столько, сколько хотите,
+так как ни одна из них не производит запись. Если же вы производите запись, и
+вам нужно два или больше указателей на одну и ту же область памяти, то вы можете
+иметь только один `&mut` одновременно. Это то как Rust предотвращает
+возникновение состояния гонки данных во время компиляции: мы получим ошибки,
+если мы нарушим эти правила.
 
-With this in mind, let’s consider our example again.
+Имея это в виду, давайте рассмотрим наш пример еще раз.
 
-## Thinking in scopes
+## Мысли об областях видимости (Thinking in scopes)
 
-Here’s the code:
+Вот код:
 
 ```rust,ignore
 let mut x = 5;
 let y = &mut x;
 
 *y += 1;
 
 println!("{}", x);
 ```
 
-This code gives us this error:
+Этот код выдает нам такую ошибку:
 
 ```text
 error: cannot borrow `x` as immutable because it is also borrowed as mutable
     println!("{}", x);
                    ^
 ```
 
-This is because we’ve violated the rules: we have a `&mut T` pointing to `x`,
-and so we aren’t allowed to create any `&T`s. One or the other. The note
-hints at how to think about this problem:
+Это потому, что мы нарушили правила: у нас есть изменяемая ссылка `&mut T`,
+указывающая на `x`, и поэтому мы не можем создать какую-либо `&T`. Одно из двух.
+Примечание подсказывает как следует рассматривать эту проблему:
 
 ```text
 note: previous borrow ends here
 fn main() {
 
 }
 ^
 ```
 
-In other words, the mutable borow is held through the rest of our example. What
-we want is for the mutable borrow to end _before_ we try to call `println!` and
-make an immutable borrow. In Rust, borrowing is tied to the scope that the
-borrow is valid for. And our scopes look like this:
+Другими словами, изменяемая ссылка сохраняется до конца нашего примера. А мы
+хотим, чтобы изменяемый заем заканчивался _до_ того, как мы пытаемся вызвать
+`println!` и создать неизменяемый заем. В Rust заимствование привязано к области
+видимости, в которой оно является действительным. И эти области видимости
+выглядят следующим образом:
 
 ```rust,ignore
 let mut x = 5;
 
 let y = &mut x;    // -+ &mut borrow of x starts here
                    //  |
 *y += 1;           //  |
                    //  |
 println!("{}", x); // -+ - try to borrow x here
                    // -+ &mut borrow of x ends here
 ```
 
-The scopes conflict: we can’t make an `&x` while `y` is in scope.
+Конфликт областей видимости: мы не можем создать `&x` до тех пор, пока `y`
+находится в области видимости.
 
-So when we add the curly braces:
+Поэтому, когда мы добавляем фигурные скобки:
 
 ```rust
 let mut x = 5;
 
 {                   
     let y = &mut x; // -+ &mut borrow starts here
     *y += 1;        //  |
 }                   // -+ ... and ends here
 
 println!("{}", x);  // <- try to borrow x here
 ```
 
-There’s no problem. Our mutable borrow goes out of scope before we create an
-immutable one. But scope is the key to seeing how long a borrow lasts for.
+Никаких проблем нет. Наш изменяемый заем выходит из области видимости до
+создания неизменяемого. Но область видимости является ключом к определению того,
+как долго длится заем.
 
-## Issues borrowing prevents
+## Проблемы, которые предотвращает заимствование
 
-Why have these restrictive rules? Well, as we noted, these rules prevent data
-races. What kinds of issues do data races cause? Here’s a few.
+Почему нужны эти ограничивающие правила? Ну, как мы уже отметили, эти правила
+предотвращают гонки данных. Какие виды проблем могут привести к состоянию гонки
+данных? Вот некоторые из них.
 
-### Iterator invalidation
+### Недействительный итератор
 
-One example is ‘iterator invalidation’, which happens when you try to mutate a
-collection that you’re iterating over. Rust’s borrow checker prevents this from
-happening:
+Одним из примеров является ’недействительный итератор’, такое может произойти,
+когда вы пытаетесь изменить коллекцию, которую в данный момент итерируете.
+Проверка заимствования Rust предотвращает это:
 
 ```rust
 let mut v = vec![1, 2, 3];
 
 for i in &v {
     println!("{}", i);
 }
 ```
 
-This prints out one through three. As we iterate through the vectors, we’re
-only given references to the elements. And `v` is itself borrowed as immutable,
-which means we can’t change it while we’re iterating:
+Этот код печатает от одного до трех. Так как мы итерируем по вектору, мы
+получаем лишь ссылки на элементы. И сам `v` заимствован как неизменяемый, что
+означает, что мы не можем изменить его в процессе итерирования:
 
 ```rust,ignore
 let mut v = vec![1, 2, 3];
 
 for i in &v {
     println!("{}", i);
     v.push(34);
 }
 ```
 
-Here’s the error:
+Вот ошибка:
 
 ```text
 error: cannot borrow `v` as mutable because it is also borrowed as immutable
     v.push(34);
     ^
 note: previous borrow of `v` occurs here; the immutable borrow prevents
 subsequent moves or mutable borrows of `v` until the borrow ends
 for i in &v {
           ^
 note: previous borrow ends here
 for i in &v {
     println!(“{}”, i);
     v.push(34);
 }
 ^
 ```
 
-We can’t modify `v` because it’s borrowed by the loop.
+Мы не можем изменить `v`, потому что он уже заимствован в цикле.
 
-### use after free
+### Использование после освобождения (use after free)
 
-References must live as long as the resource they refer to. Rust will check the
-scopes of your references to ensure that this is true.
+Ссылки должны жить так же долго, как и ресурс, на который они ссылаются. Rust
+проверяет области видимоси ваших ссылок, чтобы удостовериться, что это правда.
 
-If Rust didn’t check this property, we could accidentally use a reference
-which was invalid. For example:
+Если Rust не будет проверять это свойство, то мы можем случайно использовать
+ссылку, которая будет недействительна. Например:
 
 ```rust,ignore
 let y: &i32;
 { 
     let x = 5;
     y = &x;
 }
 
 println!("{}", y);
 ```
 
-We get this error:
+Мы получим следующую ошибку:
 
 ```text
 error: `x` does not live long enough
     y = &x;
          ^
 note: reference must be valid for the block suffix following statement 0 at
 2:16...
 let y: &i32;
 { 
     let x = 5;
     y = &x;
 }
 
 note: ...but borrowed value is only valid for the block suffix following
 statement 0 at 4:18
     let x = 5;
     y = &x;
 }
 ```
 
-In other words, `y` is only valid for the scope where `x` exists. As soon as
-`x` goes away, it becomes invalid to refer to it. As such, the error says that
-the borrow ‘doesn’t live long enough’ because it’s not valid for the right
-amount of time.
-
-The same problem occurs when the reference is declared _before_ the variable it refers to:
-
-```rust,ignore
-let y: &i32;
-let x = 5;
-y = &x;
-
-println!("{}", y);
-```
-
-We get this error:
-
-```text
-error: `x` does not live long enough
-y = &x;
-     ^
-note: reference must be valid for the block suffix following statement 0 at
-2:16...
-    let y: &i32;
-    let x = 5;
-    y = &x;
-    
-    println!("{}", y);
-}
-
-note: ...but borrowed value is only valid for the block suffix following
-statement 1 at 3:14
-    let x = 5;
-    y = &x;
-    
-    println!("{}", y);
-}
-```
+Другими словами, `y` действителен только для той области видимости, где
+существует `x`. Как только `x` выходит из области видимости, ссылка на него
+становится недействительной. Таким образом, ошибка сообщает, что заем ‘does not
+live long enough‘ (‘не живет достаточно долго‘), потому что он не является
+действительным столько времени, сколько требуется.
