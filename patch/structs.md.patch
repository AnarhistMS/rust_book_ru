diff --git a/rust/master:src/doc/trpl/structs.md b/HEAD:structs.md
index fcf928e..dca5358 100644
--- a/rust/master:src/doc/trpl/structs.md
+++ b/HEAD:structs.md
@@ -1,119 +1,53 @@
-% Structs
+% Структуры
 
-Structs are a way of creating more complex data types. For example, if we were
-doing calculations involving coordinates in 2D space, we would need both an `x`
-and a `y` value:
-
-```rust
-let origin_x = 0;
-let origin_y = 0;
-```
-
-A struct lets us combine these two into a single, unified datatype:
+Структура - это другой вид *агрегатного типа*, как и кортеж. Разница в том, что
+в структурах у каждого элемента есть имя. Элемент структуры называется *полем*
+или *членом структуры*. Смотрите:
 
 ```rust
 struct Point {
     x: i32,
     y: i32,
 }
 
 fn main() {
     let origin = Point { x: 0, y: 0 }; // origin: Point
 
-    println!("The origin is at ({}, {})", origin.x, origin.y);
+    println!("Начало координат находится в ({}, {})", origin.x, origin.y);
 }
 ```
 
-There’s a lot going on here, so let’s break it down. We declare a `struct` with
-the `struct` keyword, and then with a name. By convention, `struct`s begin with
-a capital letter and are camel cased: `PointInSpace`, not `Point_In_Space`.
+Этот код делает много разных вещей, поэтому давайте разберём его по порядку. Мы
+объявляем структуру с помощью ключевого слова `struct`, за которым следует имя
+объявляемой структуры. Обычно, имена типов-структур начинаются с заглавной буквы
+и используют чередующийся регистр букв: название `PointInSpace` выглядит
+привычно, а `Point_In_Space` - нет.
 
-We can create an instance of our struct via `let`, as usual, but we use a `key:
-value` style syntax to set each field. The order doesn’t need to be the same as
-in the original declaration.
+Как всегда, мы можем создать экземпляр нашей структуры с помощью оператора
+`let`. Однако в данном случае мы используем синтаксис вида `ключ: значение` для
+установки значения каждого поля. Порядок инициализации полей не обязательно
+должен совпадать с порядком их объявления.
 
-Finally, because fields have names, we can access the field through dot
-notation: `origin.x`.
+Наконец, поскольку у полей есть имена, мы можем получить поле с помощью операции
+`точка`: `origin.x`.
 
-The values in structs are immutable by default, like other bindings in Rust.
-Use `mut` to make them mutable:
+Значения, хранимые в структурах, неизменяемы по умолчанию. В этом плане они не
+отличаются от других именованных сущностей. Чтобы они стали изменяемы,
+используйте ключевое слово `mut`:
 
-```rust
+```{rust}
 struct Point {
     x: i32,
     y: i32,
 }
 
 fn main() {
     let mut point = Point { x: 0, y: 0 };
 
     point.x = 5;
 
-    println!("The point is at ({}, {})", point.x, point.y);
+    println!("Точка находится в ({}, {})", point.x, point.y);
 }
 ```
 
-This will print `The point is at (5, 0)`.
-
-Rust does not support field mutability at the language level, so you cannot
-write something like this:
-
-```rust,ignore
-struct Point {
-    mut x: i32,
-    y: i32,
-}
-```
-
-Mutability is a property of the binding, not of the structure itself. If you’re
-used to field-level mutability, this may seem strange at first, but it
-significantly simplifies things. It even lets you make things mutable for a short
-time only:
-
-
-```rust,ignore
-struct Point {
-    x: i32,
-    y: i32,
-}
-
-fn main() {
-    let mut point = Point { x: 0, y: 0 };
-
-    point.x = 5;
-
-    let point = point; // this new binding can’t change now
-
-    point.y = 6; // this causes an error
-}
-```
-
-# Update syntax
-
-A `struct` can include `..` to indicate that you want to use a copy of some
-other struct for some of the values. For example:
-
-```rust
-struct Point3d {
-    x: i32,
-    y: i32,
-    z: i32,
-}
-
-let mut point = Point3d { x: 0, y: 0, z: 0 };
-point = Point3d { y: 1, .. point };
-```
-
-This gives `point` a new `y`, but keeps the old `x` and `z` values. It doesn’t
-have to be the same `struct` either, you can use this syntax when making new
-ones, and it will copy the values you don’t specify:
-
-```rust
-# struct Point3d {
-#     x: i32,
-#     y: i32,
-#     z: i32,
-# }
-let origin = Point3d { x: 0, y: 0, z: 0 };
-let point = Point3d { z: 1, x: 2, .. origin };
-```
+Этот код напечатает `Точка находится в (5, 0)`.
