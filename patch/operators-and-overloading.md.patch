diff --git a/rust/master:./src/doc/trpl/operators-and-overloading.md b/HEAD:./syntax-and-semantics/operators-and-overloading.md
index 6a59465..c0b92b6 100644
--- a/rust/master:./src/doc/trpl/operators-and-overloading.md
+++ b/HEAD:./syntax-and-semantics/operators-and-overloading.md
@@ -1,83 +1,84 @@
-% Operators and Overloading
+% Перегрузка операций
 
-Rust allows for a limited form of operator overloading. There are certain
-operators that are able to be overloaded. To support a particular operator
-between types, there’s a specific trait that you can implement, which then
-overloads the operator.
+Rust позволяет ограниченную форму перегрузки операций. Есть определенные
+операции, которые могут быть перегружены. Есть специальные трейты, которые вы
+можете реализовать для поддержки конкретной операции между типами. В результате
+чего перегружается операция.
 
-For example, the `+` operator can be overloaded with the `Add` trait:
+Например, операция `+` может быть перегружена с помощью трейта `Add`:
 
 ```rust
 use std::ops::Add;
 
 #[derive(Debug)]
 struct Point {
     x: i32,
     y: i32,
 }
 
 impl Add for Point {
     type Output = Point;
 
     fn add(self, other: Point) -> Point {
         Point { x: self.x + other.x, y: self.y + other.y }
     }
 }
 
 fn main() {
     let p1 = Point { x: 1, y: 0 };
     let p2 = Point { x: 2, y: 3 };
 
     let p3 = p1 + p2;
 
     println!("{:?}", p3);
 }
 ```
 
-In `main`, we can use `+` on our two `Point`s, since we’ve implemented
-`Add<Output=Point>` for `Point`.
+В `main` мы можем использовать операцию `+` для двух `Point`, так как мы
+реализовали трейт `Add<Output=Point>` для `Point`.
 
-There are a number of operators that can be overloaded this way, and all of
-their associated traits live in the [`std::ops`][stdops] module. Check out its
-documentation for the full list.
+Есть целый ряд операций, которые могут быть перегружены таким образом, и все
+связанные с этим трейты расположены в модуле [`std::ops`][stdops]. Проверьте эту
+часть документации для получения полного списка.
 
 [stdops]: ../std/ops/index.html
 
-Implementing these traits follows a pattern. Let’s look at [`Add`][add] in more
-detail:
+Реализация этих трейтов следует паттерну. Давайте посмотрим на трейт
+[`Add`][add] более детально:
 
 ```rust
 # mod foo {
 pub trait Add<RHS = Self> {
     type Output;
 
     fn add(self, rhs: RHS) -> Self::Output;
 }
 # }
 ```
 
 [add]: ../std/ops/trait.Add.html
 
-There’s three types in total involved here: the type you `impl Add` for, `RHS`,
-which defaults to `Self`, and `Output`. For an expression `let z = x + y`, `x`
-is the `Self` type, `y` is the RHS, and `z` is the `Self::Output` type.
+В общей сложности здесь присутствуют три типа: тип `impl Add`, который мы
+реализуем, тип `RHS`, который по умолчанию равен `Self` и тип `Output`. Для
+выражения `let z = x + y`: `x` - это тип `Self`, `y` - это тип `RHS`, а `z` -
+это тип `Self::Output`.
 
 ```rust
 # struct Point;
 # use std::ops::Add;
 impl Add<i32> for Point {
     type Output = f64;
 
     fn add(self, rhs: i32) -> f64 {
         // add an i32 to a Point and get an f64
 # 1.0
     }
 }
 ```
 
-will let you do this:
+позволит вам сделать следующее:
 
 ```rust,ignore
 let p: Point = // ...
 let x: f64 = p + 2i32;
 ```
